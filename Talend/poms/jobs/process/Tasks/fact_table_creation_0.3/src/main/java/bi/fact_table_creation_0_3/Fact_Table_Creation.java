// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package bi.fact_table_creation_0_3;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

@SuppressWarnings("unused")

/**
 * Job: Fact_Table_Creation Purpose: <br>
 * Description: <br>
 * 
 * @author user@talend.com
 * @version 7.3.1.20200219_1130
 * @status
 */
public class Fact_Table_Creation implements TalendJob {

	protected static void logIgnoredError(String message, Throwable cause) {
		System.err.println(message);
		if (cause != null) {
			cause.printStackTrace();
		}

	}

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private Object[] multiThreadLockWrite = new Object[0];

	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String, String> propertyTypes = new java.util.HashMap<>();

		public PropertiesWithType(java.util.Properties properties) {
			super(properties);
		}

		public PropertiesWithType() {
			super();
		}

		public void setContextType(String key, String type) {
			propertyTypes.put(key, type);
		}

		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

		}

	}

	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.3";
	private final String jobName = "Fact_Table_Creation";
	private final String projectName = "BI";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = java.util.Collections
			.synchronizedMap(new java.util.HashMap<String, Object>());

	private final java.util.Map<String, Long> start_Hash = java.util.Collections
			.synchronizedMap(new java.util.HashMap<String, Long>());
	private final java.util.Map<String, Long> end_Hash = java.util.Collections
			.synchronizedMap(new java.util.HashMap<String, Long>());
	private final java.util.Map<String, Boolean> ok_Hash = java.util.Collections
			.synchronizedMap(new java.util.HashMap<String, Boolean>());
	public final java.util.List<String[]> globalBuffer = java.util.Collections
			.synchronizedList(new java.util.ArrayList<String[]>());

	private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null && currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					Fact_Table_Creation.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(Fact_Table_Creation.this, new Object[] { e, currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tDBConnection_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tDBConnection_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_4_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_person_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_flight_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_satisfaction_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_ticket_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBConnection_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBConnection_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBConnection_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tDBConnection_1 begin ] start
				 */

				ok_Hash.put("tDBConnection_1", false);
				start_Hash.put("tDBConnection_1", System.currentTimeMillis());

				currentComponent = "tDBConnection_1";

				int tos_count_tDBConnection_1 = 0;

				String dbProperties_tDBConnection_1 = "";
				String url_tDBConnection_1 = "jdbc:postgresql://" + "bi2022.postgres.database.azure.com" + ":" + "5432"
						+ "/" + "postgres";

				if (dbProperties_tDBConnection_1 != null && !"".equals(dbProperties_tDBConnection_1.trim())) {
					url_tDBConnection_1 = url_tDBConnection_1 + "?" + dbProperties_tDBConnection_1;
				}
				String dbUser_tDBConnection_1 = "bi2022";

				final String decryptedPassword_tDBConnection_1 = routines.system.PasswordEncryptUtil.decryptPassword(
						"enc:routine.encryption.key.v1:GY/jT8xILOTI9QsDIc03pDIfK/vj+unIq1XCb9HlbxPiz7pp");
				String dbPwd_tDBConnection_1 = decryptedPassword_tDBConnection_1;

				java.sql.Connection conn_tDBConnection_1 = null;

				java.util.Enumeration<java.sql.Driver> drivers_tDBConnection_1 = java.sql.DriverManager.getDrivers();
				java.util.Set<String> redShiftDriverNames_tDBConnection_1 = new java.util.HashSet<String>(
						java.util.Arrays.asList("com.amazon.redshift.jdbc.Driver", "com.amazon.redshift.jdbc41.Driver",
								"com.amazon.redshift.jdbc42.Driver"));
				while (drivers_tDBConnection_1.hasMoreElements()) {
					java.sql.Driver d_tDBConnection_1 = drivers_tDBConnection_1.nextElement();
					if (redShiftDriverNames_tDBConnection_1.contains(d_tDBConnection_1.getClass().getName())) {
						try {
							java.sql.DriverManager.deregisterDriver(d_tDBConnection_1);
							java.sql.DriverManager.registerDriver(d_tDBConnection_1);
						} catch (java.lang.Exception e_tDBConnection_1) {
							// do nothing
						}
					}
				}
				String driverClass_tDBConnection_1 = "org.postgresql.Driver";
				java.lang.Class jdbcclazz_tDBConnection_1 = java.lang.Class.forName(driverClass_tDBConnection_1);
				globalMap.put("driverClass_tDBConnection_1", driverClass_tDBConnection_1);

				conn_tDBConnection_1 = java.sql.DriverManager.getConnection(url_tDBConnection_1, dbUser_tDBConnection_1,
						dbPwd_tDBConnection_1);

				globalMap.put("conn_tDBConnection_1", conn_tDBConnection_1);
				if (null != conn_tDBConnection_1) {

					conn_tDBConnection_1.setAutoCommit(true);
				}

				globalMap.put("schema_" + "tDBConnection_1", "");

				globalMap.put("conn_" + "tDBConnection_1", conn_tDBConnection_1);

				/**
				 * [tDBConnection_1 begin ] stop
				 */

				/**
				 * [tDBConnection_1 main ] start
				 */

				currentComponent = "tDBConnection_1";

				tos_count_tDBConnection_1++;

				/**
				 * [tDBConnection_1 main ] stop
				 */

				/**
				 * [tDBConnection_1 process_data_begin ] start
				 */

				currentComponent = "tDBConnection_1";

				/**
				 * [tDBConnection_1 process_data_begin ] stop
				 */

				/**
				 * [tDBConnection_1 process_data_end ] start
				 */

				currentComponent = "tDBConnection_1";

				/**
				 * [tDBConnection_1 process_data_end ] stop
				 */

				/**
				 * [tDBConnection_1 end ] start
				 */

				currentComponent = "tDBConnection_1";

				ok_Hash.put("tDBConnection_1", true);
				end_Hash.put("tDBConnection_1", System.currentTimeMillis());

				/**
				 * [tDBConnection_1 end ] stop
				 */
			} // end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBConnection_1:OnSubjobOk", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk1", 0, "ok");
			}

			tFileInputDelimited_1Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBConnection_1 finally ] start
				 */

				currentComponent = "tDBConnection_1";

				/**
				 * [tDBConnection_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBConnection_1_SUBPROCESS_STATE", 1);
	}

	public static class factStruct implements routines.system.IPersistableRow<factStruct> {
		final static byte[] commonByteArrayLock_BI_Fact_Table_Creation = new byte[0];
		static byte[] commonByteArray_BI_Fact_Table_Creation = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public long person_id;

		public long getPerson_id() {
			return this.person_id;
		}

		public long flight_id;

		public long getFlight_id() {
			return this.flight_id;
		}

		public long satisfaction_id;

		public long getSatisfaction_id() {
			return this.satisfaction_id;
		}

		public long ticket_id;

		public long getTicket_id() {
			return this.ticket_id;
		}

		public String overall_satisfaction;

		public String getOverall_satisfaction() {
			return this.overall_satisfaction;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.person_id;

				result = prime * result + (int) this.flight_id;

				result = prime * result + (int) this.satisfaction_id;

				result = prime * result + (int) this.ticket_id;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final factStruct other = (factStruct) obj;

			if (this.person_id != other.person_id)
				return false;

			if (this.flight_id != other.flight_id)
				return false;

			if (this.satisfaction_id != other.satisfaction_id)
				return false;

			if (this.ticket_id != other.ticket_id)
				return false;

			return true;
		}

		public void copyDataTo(factStruct other) {

			other.person_id = this.person_id;
			other.flight_id = this.flight_id;
			other.satisfaction_id = this.satisfaction_id;
			other.ticket_id = this.ticket_id;
			other.overall_satisfaction = this.overall_satisfaction;

		}

		public void copyKeysDataTo(factStruct other) {

			other.person_id = this.person_id;
			other.flight_id = this.flight_id;
			other.satisfaction_id = this.satisfaction_id;
			other.ticket_id = this.ticket_id;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_BI_Fact_Table_Creation.length) {
					if (length < 1024 && commonByteArray_BI_Fact_Table_Creation.length == 0) {
						commonByteArray_BI_Fact_Table_Creation = new byte[1024];
					} else {
						commonByteArray_BI_Fact_Table_Creation = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_BI_Fact_Table_Creation, 0, length);
				strReturn = new String(commonByteArray_BI_Fact_Table_Creation, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_BI_Fact_Table_Creation) {

				try {

					int length = 0;

					this.person_id = dis.readLong();

					this.flight_id = dis.readLong();

					this.satisfaction_id = dis.readLong();

					this.ticket_id = dis.readLong();

					this.overall_satisfaction = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// long

				dos.writeLong(this.person_id);

				// long

				dos.writeLong(this.flight_id);

				// long

				dos.writeLong(this.satisfaction_id);

				// long

				dos.writeLong(this.ticket_id);

				// String

				writeString(this.overall_satisfaction, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("person_id=" + String.valueOf(person_id));
			sb.append(",flight_id=" + String.valueOf(flight_id));
			sb.append(",satisfaction_id=" + String.valueOf(satisfaction_id));
			sb.append(",ticket_id=" + String.valueOf(ticket_id));
			sb.append(",overall_satisfaction=" + overall_satisfaction);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(factStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.person_id, other.person_id);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.flight_id, other.flight_id);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.satisfaction_id, other.satisfaction_id);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.ticket_id, other.ticket_id);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_BI_Fact_Table_Creation = new byte[0];
		static byte[] commonByteArray_BI_Fact_Table_Creation = new byte[0];

		public Long id;

		public Long getId() {
			return this.id;
		}

		public String satisfaction_v2;

		public String getSatisfaction_v2() {
			return this.satisfaction_v2;
		}

		public String Gender;

		public String getGender() {
			return this.Gender;
		}

		public String Customer_Type;

		public String getCustomer_Type() {
			return this.Customer_Type;
		}

		public Integer Age;

		public Integer getAge() {
			return this.Age;
		}

		public String Type_of_Travel;

		public String getType_of_Travel() {
			return this.Type_of_Travel;
		}

		public String Flight_Class;

		public String getFlight_Class() {
			return this.Flight_Class;
		}

		public Long Flight_Distance;

		public Long getFlight_Distance() {
			return this.Flight_Distance;
		}

		public Integer Seat_comfort;

		public Integer getSeat_comfort() {
			return this.Seat_comfort;
		}

		public Integer Departure_Arrival_time_convenient;

		public Integer getDeparture_Arrival_time_convenient() {
			return this.Departure_Arrival_time_convenient;
		}

		public Integer Food_and_drink;

		public Integer getFood_and_drink() {
			return this.Food_and_drink;
		}

		public Integer Gate_location;

		public Integer getGate_location() {
			return this.Gate_location;
		}

		public Integer Inflight_wifi_service;

		public Integer getInflight_wifi_service() {
			return this.Inflight_wifi_service;
		}

		public Integer Inflight_entertainment;

		public Integer getInflight_entertainment() {
			return this.Inflight_entertainment;
		}

		public Integer Online_support;

		public Integer getOnline_support() {
			return this.Online_support;
		}

		public Integer Ease_of_Online_booking;

		public Integer getEase_of_Online_booking() {
			return this.Ease_of_Online_booking;
		}

		public Integer On_board_service;

		public Integer getOn_board_service() {
			return this.On_board_service;
		}

		public Integer Leg_room_service;

		public Integer getLeg_room_service() {
			return this.Leg_room_service;
		}

		public Integer Baggage_handling;

		public Integer getBaggage_handling() {
			return this.Baggage_handling;
		}

		public Integer Checkin_service;

		public Integer getCheckin_service() {
			return this.Checkin_service;
		}

		public Integer Cleanliness;

		public Integer getCleanliness() {
			return this.Cleanliness;
		}

		public Integer Online_boarding;

		public Integer getOnline_boarding() {
			return this.Online_boarding;
		}

		public Long Departure_Delay_in_Minutes;

		public Long getDeparture_Delay_in_Minutes() {
			return this.Departure_Delay_in_Minutes;
		}

		public Long Arrival_Delay_in_Minutes;

		public Long getArrival_Delay_in_Minutes() {
			return this.Arrival_Delay_in_Minutes;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_BI_Fact_Table_Creation.length) {
					if (length < 1024 && commonByteArray_BI_Fact_Table_Creation.length == 0) {
						commonByteArray_BI_Fact_Table_Creation = new byte[1024];
					} else {
						commonByteArray_BI_Fact_Table_Creation = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_BI_Fact_Table_Creation, 0, length);
				strReturn = new String(commonByteArray_BI_Fact_Table_Creation, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_BI_Fact_Table_Creation) {

				try {

					int length = 0;

					length = dis.readByte();
					if (length == -1) {
						this.id = null;
					} else {
						this.id = dis.readLong();
					}

					this.satisfaction_v2 = readString(dis);

					this.Gender = readString(dis);

					this.Customer_Type = readString(dis);

					this.Age = readInteger(dis);

					this.Type_of_Travel = readString(dis);

					this.Flight_Class = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Flight_Distance = null;
					} else {
						this.Flight_Distance = dis.readLong();
					}

					this.Seat_comfort = readInteger(dis);

					this.Departure_Arrival_time_convenient = readInteger(dis);

					this.Food_and_drink = readInteger(dis);

					this.Gate_location = readInteger(dis);

					this.Inflight_wifi_service = readInteger(dis);

					this.Inflight_entertainment = readInteger(dis);

					this.Online_support = readInteger(dis);

					this.Ease_of_Online_booking = readInteger(dis);

					this.On_board_service = readInteger(dis);

					this.Leg_room_service = readInteger(dis);

					this.Baggage_handling = readInteger(dis);

					this.Checkin_service = readInteger(dis);

					this.Cleanliness = readInteger(dis);

					this.Online_boarding = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Departure_Delay_in_Minutes = null;
					} else {
						this.Departure_Delay_in_Minutes = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Arrival_Delay_in_Minutes = null;
					} else {
						this.Arrival_Delay_in_Minutes = dis.readLong();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Long

				if (this.id == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.id);
				}

				// String

				writeString(this.satisfaction_v2, dos);

				// String

				writeString(this.Gender, dos);

				// String

				writeString(this.Customer_Type, dos);

				// Integer

				writeInteger(this.Age, dos);

				// String

				writeString(this.Type_of_Travel, dos);

				// String

				writeString(this.Flight_Class, dos);

				// Long

				if (this.Flight_Distance == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.Flight_Distance);
				}

				// Integer

				writeInteger(this.Seat_comfort, dos);

				// Integer

				writeInteger(this.Departure_Arrival_time_convenient, dos);

				// Integer

				writeInteger(this.Food_and_drink, dos);

				// Integer

				writeInteger(this.Gate_location, dos);

				// Integer

				writeInteger(this.Inflight_wifi_service, dos);

				// Integer

				writeInteger(this.Inflight_entertainment, dos);

				// Integer

				writeInteger(this.Online_support, dos);

				// Integer

				writeInteger(this.Ease_of_Online_booking, dos);

				// Integer

				writeInteger(this.On_board_service, dos);

				// Integer

				writeInteger(this.Leg_room_service, dos);

				// Integer

				writeInteger(this.Baggage_handling, dos);

				// Integer

				writeInteger(this.Checkin_service, dos);

				// Integer

				writeInteger(this.Cleanliness, dos);

				// Integer

				writeInteger(this.Online_boarding, dos);

				// Long

				if (this.Departure_Delay_in_Minutes == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.Departure_Delay_in_Minutes);
				}

				// Long

				if (this.Arrival_Delay_in_Minutes == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.Arrival_Delay_in_Minutes);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id=" + String.valueOf(id));
			sb.append(",satisfaction_v2=" + satisfaction_v2);
			sb.append(",Gender=" + Gender);
			sb.append(",Customer_Type=" + Customer_Type);
			sb.append(",Age=" + String.valueOf(Age));
			sb.append(",Type_of_Travel=" + Type_of_Travel);
			sb.append(",Flight_Class=" + Flight_Class);
			sb.append(",Flight_Distance=" + String.valueOf(Flight_Distance));
			sb.append(",Seat_comfort=" + String.valueOf(Seat_comfort));
			sb.append(",Departure_Arrival_time_convenient=" + String.valueOf(Departure_Arrival_time_convenient));
			sb.append(",Food_and_drink=" + String.valueOf(Food_and_drink));
			sb.append(",Gate_location=" + String.valueOf(Gate_location));
			sb.append(",Inflight_wifi_service=" + String.valueOf(Inflight_wifi_service));
			sb.append(",Inflight_entertainment=" + String.valueOf(Inflight_entertainment));
			sb.append(",Online_support=" + String.valueOf(Online_support));
			sb.append(",Ease_of_Online_booking=" + String.valueOf(Ease_of_Online_booking));
			sb.append(",On_board_service=" + String.valueOf(On_board_service));
			sb.append(",Leg_room_service=" + String.valueOf(Leg_room_service));
			sb.append(",Baggage_handling=" + String.valueOf(Baggage_handling));
			sb.append(",Checkin_service=" + String.valueOf(Checkin_service));
			sb.append(",Cleanliness=" + String.valueOf(Cleanliness));
			sb.append(",Online_boarding=" + String.valueOf(Online_boarding));
			sb.append(",Departure_Delay_in_Minutes=" + String.valueOf(Departure_Delay_in_Minutes));
			sb.append(",Arrival_Delay_in_Minutes=" + String.valueOf(Arrival_Delay_in_Minutes));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tFileInputDelimited_1Struct
			implements routines.system.IPersistableRow<after_tFileInputDelimited_1Struct> {
		final static byte[] commonByteArrayLock_BI_Fact_Table_Creation = new byte[0];
		static byte[] commonByteArray_BI_Fact_Table_Creation = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Long id;

		public Long getId() {
			return this.id;
		}

		public String satisfaction_v2;

		public String getSatisfaction_v2() {
			return this.satisfaction_v2;
		}

		public String Gender;

		public String getGender() {
			return this.Gender;
		}

		public String Customer_Type;

		public String getCustomer_Type() {
			return this.Customer_Type;
		}

		public Integer Age;

		public Integer getAge() {
			return this.Age;
		}

		public String Type_of_Travel;

		public String getType_of_Travel() {
			return this.Type_of_Travel;
		}

		public String Flight_Class;

		public String getFlight_Class() {
			return this.Flight_Class;
		}

		public Long Flight_Distance;

		public Long getFlight_Distance() {
			return this.Flight_Distance;
		}

		public Integer Seat_comfort;

		public Integer getSeat_comfort() {
			return this.Seat_comfort;
		}

		public Integer Departure_Arrival_time_convenient;

		public Integer getDeparture_Arrival_time_convenient() {
			return this.Departure_Arrival_time_convenient;
		}

		public Integer Food_and_drink;

		public Integer getFood_and_drink() {
			return this.Food_and_drink;
		}

		public Integer Gate_location;

		public Integer getGate_location() {
			return this.Gate_location;
		}

		public Integer Inflight_wifi_service;

		public Integer getInflight_wifi_service() {
			return this.Inflight_wifi_service;
		}

		public Integer Inflight_entertainment;

		public Integer getInflight_entertainment() {
			return this.Inflight_entertainment;
		}

		public Integer Online_support;

		public Integer getOnline_support() {
			return this.Online_support;
		}

		public Integer Ease_of_Online_booking;

		public Integer getEase_of_Online_booking() {
			return this.Ease_of_Online_booking;
		}

		public Integer On_board_service;

		public Integer getOn_board_service() {
			return this.On_board_service;
		}

		public Integer Leg_room_service;

		public Integer getLeg_room_service() {
			return this.Leg_room_service;
		}

		public Integer Baggage_handling;

		public Integer getBaggage_handling() {
			return this.Baggage_handling;
		}

		public Integer Checkin_service;

		public Integer getCheckin_service() {
			return this.Checkin_service;
		}

		public Integer Cleanliness;

		public Integer getCleanliness() {
			return this.Cleanliness;
		}

		public Integer Online_boarding;

		public Integer getOnline_boarding() {
			return this.Online_boarding;
		}

		public Long Departure_Delay_in_Minutes;

		public Long getDeparture_Delay_in_Minutes() {
			return this.Departure_Delay_in_Minutes;
		}

		public Long Arrival_Delay_in_Minutes;

		public Long getArrival_Delay_in_Minutes() {
			return this.Arrival_Delay_in_Minutes;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.id == null) ? 0 : this.id.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final after_tFileInputDelimited_1Struct other = (after_tFileInputDelimited_1Struct) obj;

			if (this.id == null) {
				if (other.id != null)
					return false;

			} else if (!this.id.equals(other.id))

				return false;

			return true;
		}

		public void copyDataTo(after_tFileInputDelimited_1Struct other) {

			other.id = this.id;
			other.satisfaction_v2 = this.satisfaction_v2;
			other.Gender = this.Gender;
			other.Customer_Type = this.Customer_Type;
			other.Age = this.Age;
			other.Type_of_Travel = this.Type_of_Travel;
			other.Flight_Class = this.Flight_Class;
			other.Flight_Distance = this.Flight_Distance;
			other.Seat_comfort = this.Seat_comfort;
			other.Departure_Arrival_time_convenient = this.Departure_Arrival_time_convenient;
			other.Food_and_drink = this.Food_and_drink;
			other.Gate_location = this.Gate_location;
			other.Inflight_wifi_service = this.Inflight_wifi_service;
			other.Inflight_entertainment = this.Inflight_entertainment;
			other.Online_support = this.Online_support;
			other.Ease_of_Online_booking = this.Ease_of_Online_booking;
			other.On_board_service = this.On_board_service;
			other.Leg_room_service = this.Leg_room_service;
			other.Baggage_handling = this.Baggage_handling;
			other.Checkin_service = this.Checkin_service;
			other.Cleanliness = this.Cleanliness;
			other.Online_boarding = this.Online_boarding;
			other.Departure_Delay_in_Minutes = this.Departure_Delay_in_Minutes;
			other.Arrival_Delay_in_Minutes = this.Arrival_Delay_in_Minutes;

		}

		public void copyKeysDataTo(after_tFileInputDelimited_1Struct other) {

			other.id = this.id;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_BI_Fact_Table_Creation.length) {
					if (length < 1024 && commonByteArray_BI_Fact_Table_Creation.length == 0) {
						commonByteArray_BI_Fact_Table_Creation = new byte[1024];
					} else {
						commonByteArray_BI_Fact_Table_Creation = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_BI_Fact_Table_Creation, 0, length);
				strReturn = new String(commonByteArray_BI_Fact_Table_Creation, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_BI_Fact_Table_Creation) {

				try {

					int length = 0;

					length = dis.readByte();
					if (length == -1) {
						this.id = null;
					} else {
						this.id = dis.readLong();
					}

					this.satisfaction_v2 = readString(dis);

					this.Gender = readString(dis);

					this.Customer_Type = readString(dis);

					this.Age = readInteger(dis);

					this.Type_of_Travel = readString(dis);

					this.Flight_Class = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Flight_Distance = null;
					} else {
						this.Flight_Distance = dis.readLong();
					}

					this.Seat_comfort = readInteger(dis);

					this.Departure_Arrival_time_convenient = readInteger(dis);

					this.Food_and_drink = readInteger(dis);

					this.Gate_location = readInteger(dis);

					this.Inflight_wifi_service = readInteger(dis);

					this.Inflight_entertainment = readInteger(dis);

					this.Online_support = readInteger(dis);

					this.Ease_of_Online_booking = readInteger(dis);

					this.On_board_service = readInteger(dis);

					this.Leg_room_service = readInteger(dis);

					this.Baggage_handling = readInteger(dis);

					this.Checkin_service = readInteger(dis);

					this.Cleanliness = readInteger(dis);

					this.Online_boarding = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Departure_Delay_in_Minutes = null;
					} else {
						this.Departure_Delay_in_Minutes = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Arrival_Delay_in_Minutes = null;
					} else {
						this.Arrival_Delay_in_Minutes = dis.readLong();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Long

				if (this.id == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.id);
				}

				// String

				writeString(this.satisfaction_v2, dos);

				// String

				writeString(this.Gender, dos);

				// String

				writeString(this.Customer_Type, dos);

				// Integer

				writeInteger(this.Age, dos);

				// String

				writeString(this.Type_of_Travel, dos);

				// String

				writeString(this.Flight_Class, dos);

				// Long

				if (this.Flight_Distance == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.Flight_Distance);
				}

				// Integer

				writeInteger(this.Seat_comfort, dos);

				// Integer

				writeInteger(this.Departure_Arrival_time_convenient, dos);

				// Integer

				writeInteger(this.Food_and_drink, dos);

				// Integer

				writeInteger(this.Gate_location, dos);

				// Integer

				writeInteger(this.Inflight_wifi_service, dos);

				// Integer

				writeInteger(this.Inflight_entertainment, dos);

				// Integer

				writeInteger(this.Online_support, dos);

				// Integer

				writeInteger(this.Ease_of_Online_booking, dos);

				// Integer

				writeInteger(this.On_board_service, dos);

				// Integer

				writeInteger(this.Leg_room_service, dos);

				// Integer

				writeInteger(this.Baggage_handling, dos);

				// Integer

				writeInteger(this.Checkin_service, dos);

				// Integer

				writeInteger(this.Cleanliness, dos);

				// Integer

				writeInteger(this.Online_boarding, dos);

				// Long

				if (this.Departure_Delay_in_Minutes == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.Departure_Delay_in_Minutes);
				}

				// Long

				if (this.Arrival_Delay_in_Minutes == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.Arrival_Delay_in_Minutes);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id=" + String.valueOf(id));
			sb.append(",satisfaction_v2=" + satisfaction_v2);
			sb.append(",Gender=" + Gender);
			sb.append(",Customer_Type=" + Customer_Type);
			sb.append(",Age=" + String.valueOf(Age));
			sb.append(",Type_of_Travel=" + Type_of_Travel);
			sb.append(",Flight_Class=" + Flight_Class);
			sb.append(",Flight_Distance=" + String.valueOf(Flight_Distance));
			sb.append(",Seat_comfort=" + String.valueOf(Seat_comfort));
			sb.append(",Departure_Arrival_time_convenient=" + String.valueOf(Departure_Arrival_time_convenient));
			sb.append(",Food_and_drink=" + String.valueOf(Food_and_drink));
			sb.append(",Gate_location=" + String.valueOf(Gate_location));
			sb.append(",Inflight_wifi_service=" + String.valueOf(Inflight_wifi_service));
			sb.append(",Inflight_entertainment=" + String.valueOf(Inflight_entertainment));
			sb.append(",Online_support=" + String.valueOf(Online_support));
			sb.append(",Ease_of_Online_booking=" + String.valueOf(Ease_of_Online_booking));
			sb.append(",On_board_service=" + String.valueOf(On_board_service));
			sb.append(",Leg_room_service=" + String.valueOf(Leg_room_service));
			sb.append(",Baggage_handling=" + String.valueOf(Baggage_handling));
			sb.append(",Checkin_service=" + String.valueOf(Checkin_service));
			sb.append(",Cleanliness=" + String.valueOf(Cleanliness));
			sb.append(",Online_boarding=" + String.valueOf(Online_boarding));
			sb.append(",Departure_Delay_in_Minutes=" + String.valueOf(Departure_Delay_in_Minutes));
			sb.append(",Arrival_Delay_in_Minutes=" + String.valueOf(Arrival_Delay_in_Minutes));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tFileInputDelimited_1Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.id, other.id);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				tDBInput_1Process(globalMap);
				tDBInput_2Process(globalMap);
				tDBInput_3Process(globalMap);
				tDBInput_4Process(globalMap);

				row1Struct row1 = new row1Struct();
				factStruct fact = new factStruct();

				/**
				 * [tDBOutput_1 begin ] start
				 */

				ok_Hash.put("tDBOutput_1", false);
				start_Hash.put("tDBOutput_1", System.currentTimeMillis());

				currentComponent = "tDBOutput_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "fact");
				}

				int tos_count_tDBOutput_1 = 0;

				String dbschema_tDBOutput_1 = null;
				dbschema_tDBOutput_1 = (String) globalMap.get("schema_" + "tDBConnection_1");

				String tableName_tDBOutput_1 = null;
				if (dbschema_tDBOutput_1 == null || dbschema_tDBOutput_1.trim().length() == 0) {
					tableName_tDBOutput_1 = ("fact");
				} else {
					tableName_tDBOutput_1 = dbschema_tDBOutput_1 + "\".\"" + ("fact");
				}

				int nb_line_tDBOutput_1 = 0;
				int nb_line_update_tDBOutput_1 = 0;
				int nb_line_inserted_tDBOutput_1 = 0;
				int nb_line_deleted_tDBOutput_1 = 0;
				int nb_line_rejected_tDBOutput_1 = 0;

				int deletedCount_tDBOutput_1 = 0;
				int updatedCount_tDBOutput_1 = 0;
				int insertedCount_tDBOutput_1 = 0;
				int rejectedCount_tDBOutput_1 = 0;

				boolean whetherReject_tDBOutput_1 = false;

				java.sql.Connection conn_tDBOutput_1 = null;
				String dbUser_tDBOutput_1 = null;

				conn_tDBOutput_1 = (java.sql.Connection) globalMap.get("conn_tDBConnection_1");

				int batchSize_tDBOutput_1 = 10000;
				int batchSizeCounter_tDBOutput_1 = 0;

				int count_tDBOutput_1 = 0;
				String insert_tDBOutput_1 = "INSERT INTO \"" + tableName_tDBOutput_1
						+ "\" (\"person_id\",\"flight_id\",\"satisfaction_id\",\"ticket_id\",\"overall_satisfaction\") VALUES (?,?,?,?,?)";

				java.sql.PreparedStatement pstmt_tDBOutput_1 = conn_tDBOutput_1.prepareStatement(insert_tDBOutput_1);
				resourceMap.put("pstmt_tDBOutput_1", pstmt_tDBOutput_1);

				/**
				 * [tDBOutput_1 begin ] stop
				 */

				/**
				 * [tMap_1 begin ] start
				 */

				ok_Hash.put("tMap_1", false);
				start_Hash.put("tMap_1", System.currentTimeMillis());

				currentComponent = "tMap_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row1");
				}

				int tos_count_tMap_1 = 0;

// ###############################
// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<personStruct> tHash_Lookup_person = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<personStruct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<personStruct>) globalMap
						.get("tHash_Lookup_person"));

				personStruct personHashKey = new personStruct();
				personStruct personDefault = new personStruct();

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<flightStruct> tHash_Lookup_flight = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<flightStruct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<flightStruct>) globalMap
						.get("tHash_Lookup_flight"));

				flightStruct flightHashKey = new flightStruct();
				flightStruct flightDefault = new flightStruct();

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ticketStruct> tHash_Lookup_ticket = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ticketStruct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ticketStruct>) globalMap
						.get("tHash_Lookup_ticket"));

				ticketStruct ticketHashKey = new ticketStruct();
				ticketStruct ticketDefault = new ticketStruct();

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<satisfactionStruct> tHash_Lookup_satisfaction = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<satisfactionStruct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<satisfactionStruct>) globalMap
						.get("tHash_Lookup_satisfaction"));

				satisfactionStruct satisfactionHashKey = new satisfactionStruct();
				satisfactionStruct satisfactionDefault = new satisfactionStruct();
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_1__Struct {
				}
				Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
				factStruct fact_tmp = new factStruct();
// ###############################

				/**
				 * [tMap_1 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_1 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_1", false);
				start_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_1";

				int tos_count_tFileInputDelimited_1 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_1 = new routines.system.RowState();

				int nb_line_tFileInputDelimited_1 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_1 = null;
				int limit_tFileInputDelimited_1 = -1;
				try {

					Object filename_tFileInputDelimited_1 = "/Users/dylanperdigao/Library/CloudStorage/OneDrive-dei.uc.pt/UC/UC-Cadeiras_do_Curso/Mestrado/Semestre_2/Business_Intelligence/BI-Project/Dataset/satisfaction.csv";
					if (filename_tFileInputDelimited_1 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_1 = 0, random_value_tFileInputDelimited_1 = -1;
						if (footer_value_tFileInputDelimited_1 > 0 || random_value_tFileInputDelimited_1 > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_1 = new org.talend.fileprocess.FileInputDelimited(
								"/Users/dylanperdigao/Library/CloudStorage/OneDrive-dei.uc.pt/UC/UC-Cadeiras_do_Curso/Mestrado/Semestre_2/Business_Intelligence/BI-Project/Dataset/satisfaction.csv",
								"UTF-8", ";", "\n", false, 1, 0, limit_tFileInputDelimited_1, -1, false);
					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_1 != null && fid_tFileInputDelimited_1.nextRecord()) {
						rowstate_tFileInputDelimited_1.reset();

						row1 = null;

						boolean whetherReject_tFileInputDelimited_1 = false;
						row1 = new row1Struct();
						try {

							int columnIndexWithD_tFileInputDelimited_1 = 0;

							String temp = "";

							columnIndexWithD_tFileInputDelimited_1 = 0;

							temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row1.id = ParserUtils.parseTo_Long(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"id", "row1", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}

							} else {

								row1.id = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 1;

							row1.satisfaction_v2 = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 2;

							row1.Gender = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 3;

							row1.Customer_Type = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 4;

							temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row1.Age = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"Age", "row1", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}

							} else {

								row1.Age = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 5;

							row1.Type_of_Travel = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 6;

							row1.Flight_Class = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 7;

							temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row1.Flight_Distance = ParserUtils.parseTo_Long(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"Flight_Distance", "row1", temp, ex_tFileInputDelimited_1),
											ex_tFileInputDelimited_1));
								}

							} else {

								row1.Flight_Distance = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 8;

							temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row1.Seat_comfort = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"Seat_comfort", "row1", temp, ex_tFileInputDelimited_1),
											ex_tFileInputDelimited_1));
								}

							} else {

								row1.Seat_comfort = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 9;

							temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row1.Departure_Arrival_time_convenient = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"Departure_Arrival_time_convenient", "row1", temp,
											ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}

							} else {

								row1.Departure_Arrival_time_convenient = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 10;

							temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row1.Food_and_drink = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"Food_and_drink", "row1", temp, ex_tFileInputDelimited_1),
											ex_tFileInputDelimited_1));
								}

							} else {

								row1.Food_and_drink = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 11;

							temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row1.Gate_location = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"Gate_location", "row1", temp, ex_tFileInputDelimited_1),
											ex_tFileInputDelimited_1));
								}

							} else {

								row1.Gate_location = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 12;

							temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row1.Inflight_wifi_service = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"Inflight_wifi_service", "row1", temp, ex_tFileInputDelimited_1),
											ex_tFileInputDelimited_1));
								}

							} else {

								row1.Inflight_wifi_service = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 13;

							temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row1.Inflight_entertainment = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"Inflight_entertainment", "row1", temp, ex_tFileInputDelimited_1),
											ex_tFileInputDelimited_1));
								}

							} else {

								row1.Inflight_entertainment = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 14;

							temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row1.Online_support = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"Online_support", "row1", temp, ex_tFileInputDelimited_1),
											ex_tFileInputDelimited_1));
								}

							} else {

								row1.Online_support = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 15;

							temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row1.Ease_of_Online_booking = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"Ease_of_Online_booking", "row1", temp, ex_tFileInputDelimited_1),
											ex_tFileInputDelimited_1));
								}

							} else {

								row1.Ease_of_Online_booking = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 16;

							temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row1.On_board_service = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"On_board_service", "row1", temp, ex_tFileInputDelimited_1),
											ex_tFileInputDelimited_1));
								}

							} else {

								row1.On_board_service = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 17;

							temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row1.Leg_room_service = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"Leg_room_service", "row1", temp, ex_tFileInputDelimited_1),
											ex_tFileInputDelimited_1));
								}

							} else {

								row1.Leg_room_service = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 18;

							temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row1.Baggage_handling = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"Baggage_handling", "row1", temp, ex_tFileInputDelimited_1),
											ex_tFileInputDelimited_1));
								}

							} else {

								row1.Baggage_handling = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 19;

							temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row1.Checkin_service = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"Checkin_service", "row1", temp, ex_tFileInputDelimited_1),
											ex_tFileInputDelimited_1));
								}

							} else {

								row1.Checkin_service = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 20;

							temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row1.Cleanliness = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"Cleanliness", "row1", temp, ex_tFileInputDelimited_1),
											ex_tFileInputDelimited_1));
								}

							} else {

								row1.Cleanliness = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 21;

							temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row1.Online_boarding = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"Online_boarding", "row1", temp, ex_tFileInputDelimited_1),
											ex_tFileInputDelimited_1));
								}

							} else {

								row1.Online_boarding = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 22;

							temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row1.Departure_Delay_in_Minutes = ParserUtils.parseTo_Long(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"Departure_Delay_in_Minutes", "row1", temp, ex_tFileInputDelimited_1),
											ex_tFileInputDelimited_1));
								}

							} else {

								row1.Departure_Delay_in_Minutes = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 23;

							temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row1.Arrival_Delay_in_Minutes = ParserUtils.parseTo_Long(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"Arrival_Delay_in_Minutes", "row1", temp, ex_tFileInputDelimited_1),
											ex_tFileInputDelimited_1));
								}

							} else {

								row1.Arrival_Delay_in_Minutes = null;

							}

							if (rowstate_tFileInputDelimited_1.getException() != null) {
								throw rowstate_tFileInputDelimited_1.getException();
							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_1 = true;

							System.err.println(e.getMessage());
							row1 = null;

						}

						/**
						 * [tFileInputDelimited_1 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_1 main ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						tos_count_tFileInputDelimited_1++;

						/**
						 * [tFileInputDelimited_1 main ] stop
						 */

						/**
						 * [tFileInputDelimited_1 process_data_begin ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						/**
						 * [tFileInputDelimited_1 process_data_begin ] stop
						 */
// Start of branch "row1"
						if (row1 != null) {

							/**
							 * [tMap_1 main ] start
							 */

							currentComponent = "tMap_1";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1, "row1");
							}

							boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_1 = false;
							boolean mainRowRejected_tMap_1 = false;

							///////////////////////////////////////////////
							// Starting Lookup Table "person"
							///////////////////////////////////////////////

							boolean forceLoopperson = false;

							personStruct personObjectFromLookup = null;

							if (!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								hasCasePrimitiveKeyWithNull_tMap_1 = false;

								Object exprKeyValue_person__age = row1.Age;
								if (exprKeyValue_person__age == null) {
									hasCasePrimitiveKeyWithNull_tMap_1 = true;
								} else {
									personHashKey.age = (int) (Integer) exprKeyValue_person__age;
								}

								personHashKey.gender = row1.Gender;

								personHashKey.loyalty = row1.Customer_Type;

								personHashKey.hashCodeDirty = true;

								if (!hasCasePrimitiveKeyWithNull_tMap_1) { // G_TM_M_091

									tHash_Lookup_person.lookup(personHashKey);

								} // G_TM_M_091

								if (hasCasePrimitiveKeyWithNull_tMap_1 || !tHash_Lookup_person.hasNext()) { // G_TM_M_090

									rejectedInnerJoin_tMap_1 = true;

								} // G_TM_M_090

							} // G_TM_M_020

							if (tHash_Lookup_person != null && tHash_Lookup_person.getCount(personHashKey) > 1) { // G
																													// 071

								// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup
								// 'person' and it contains more one result from keys : person.age = '" +
								// personHashKey.age + "', person.gender = '" + personHashKey.gender + "',
								// person.loyalty = '" + personHashKey.loyalty + "'");
							} // G 071

							personStruct person = null;

							personStruct fromLookup_person = null;
							person = personDefault;

							if (tHash_Lookup_person != null && tHash_Lookup_person.hasNext()) { // G 099

								fromLookup_person = tHash_Lookup_person.next();

							} // G 099

							if (fromLookup_person != null) {
								person = fromLookup_person;
							}

							///////////////////////////////////////////////
							// Starting Lookup Table "flight"
							///////////////////////////////////////////////

							boolean forceLoopflight = false;

							flightStruct flightObjectFromLookup = null;

							if (!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								hasCasePrimitiveKeyWithNull_tMap_1 = false;

								Object exprKeyValue_flight__distance = row1.Flight_Distance;
								if (exprKeyValue_flight__distance == null) {
									hasCasePrimitiveKeyWithNull_tMap_1 = true;
								} else {
									flightHashKey.distance = (long) (Long) exprKeyValue_flight__distance;
								}

								flightHashKey.departure_delay = row1.Departure_Delay_in_Minutes;

								flightHashKey.arrival_delay = row1.Arrival_Delay_in_Minutes;

								flightHashKey.hashCodeDirty = true;

								if (!hasCasePrimitiveKeyWithNull_tMap_1) { // G_TM_M_091

									tHash_Lookup_flight.lookup(flightHashKey);

								} // G_TM_M_091

								if (hasCasePrimitiveKeyWithNull_tMap_1 || !tHash_Lookup_flight.hasNext()) { // G_TM_M_090

									rejectedInnerJoin_tMap_1 = true;

								} // G_TM_M_090

							} // G_TM_M_020

							if (tHash_Lookup_flight != null && tHash_Lookup_flight.getCount(flightHashKey) > 1) { // G
																													// 071

								// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup
								// 'flight' and it contains more one result from keys : flight.distance = '" +
								// flightHashKey.distance + "', flight.departure_delay = '" +
								// flightHashKey.departure_delay + "', flight.arrival_delay = '" +
								// flightHashKey.arrival_delay + "'");
							} // G 071

							flightStruct flight = null;

							flightStruct fromLookup_flight = null;
							flight = flightDefault;

							if (tHash_Lookup_flight != null && tHash_Lookup_flight.hasNext()) { // G 099

								fromLookup_flight = tHash_Lookup_flight.next();

							} // G 099

							if (fromLookup_flight != null) {
								flight = fromLookup_flight;
							}

							///////////////////////////////////////////////
							// Starting Lookup Table "ticket"
							///////////////////////////////////////////////

							boolean forceLoopticket = false;

							ticketStruct ticketObjectFromLookup = null;

							if (!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								hasCasePrimitiveKeyWithNull_tMap_1 = false;

								ticketHashKey.flight_class = row1.Flight_Class;

								ticketHashKey.type_travel = row1.Type_of_Travel;

								ticketHashKey.hashCodeDirty = true;

								tHash_Lookup_ticket.lookup(ticketHashKey);

								if (!tHash_Lookup_ticket.hasNext()) { // G_TM_M_090

									rejectedInnerJoin_tMap_1 = true;

								} // G_TM_M_090

							} // G_TM_M_020

							if (tHash_Lookup_ticket != null && tHash_Lookup_ticket.getCount(ticketHashKey) > 1) { // G
																													// 071

								// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup
								// 'ticket' and it contains more one result from keys : ticket.flight_class = '"
								// + ticketHashKey.flight_class + "', ticket.type_travel = '" +
								// ticketHashKey.type_travel + "'");
							} // G 071

							ticketStruct ticket = null;

							ticketStruct fromLookup_ticket = null;
							ticket = ticketDefault;

							if (tHash_Lookup_ticket != null && tHash_Lookup_ticket.hasNext()) { // G 099

								fromLookup_ticket = tHash_Lookup_ticket.next();

							} // G 099

							if (fromLookup_ticket != null) {
								ticket = fromLookup_ticket;
							}

							///////////////////////////////////////////////
							// Starting Lookup Table "satisfaction"
							///////////////////////////////////////////////

							boolean forceLoopsatisfaction = false;

							satisfactionStruct satisfactionObjectFromLookup = null;

							if (!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								hasCasePrimitiveKeyWithNull_tMap_1 = false;

								Object exprKeyValue_satisfaction__seat_comfort = row1.Seat_comfort;
								if (exprKeyValue_satisfaction__seat_comfort == null) {
									hasCasePrimitiveKeyWithNull_tMap_1 = true;
								} else {
									satisfactionHashKey.seat_comfort = (int) (Integer) exprKeyValue_satisfaction__seat_comfort;
								}

								Object exprKeyValue_satisfaction__time_convenience = row1.Departure_Arrival_time_convenient;
								if (exprKeyValue_satisfaction__time_convenience == null) {
									hasCasePrimitiveKeyWithNull_tMap_1 = true;
								} else {
									satisfactionHashKey.time_convenience = (int) (Integer) exprKeyValue_satisfaction__time_convenience;
								}

								Object exprKeyValue_satisfaction__food = row1.Food_and_drink;
								if (exprKeyValue_satisfaction__food == null) {
									hasCasePrimitiveKeyWithNull_tMap_1 = true;
								} else {
									satisfactionHashKey.food = (int) (Integer) exprKeyValue_satisfaction__food;
								}

								Object exprKeyValue_satisfaction__gate_location = row1.Gate_location;
								if (exprKeyValue_satisfaction__gate_location == null) {
									hasCasePrimitiveKeyWithNull_tMap_1 = true;
								} else {
									satisfactionHashKey.gate_location = (int) (Integer) exprKeyValue_satisfaction__gate_location;
								}

								Object exprKeyValue_satisfaction__wifi_service = row1.Inflight_wifi_service;
								if (exprKeyValue_satisfaction__wifi_service == null) {
									hasCasePrimitiveKeyWithNull_tMap_1 = true;
								} else {
									satisfactionHashKey.wifi_service = (int) (Integer) exprKeyValue_satisfaction__wifi_service;
								}

								Object exprKeyValue_satisfaction__entertainment = row1.Inflight_entertainment;
								if (exprKeyValue_satisfaction__entertainment == null) {
									hasCasePrimitiveKeyWithNull_tMap_1 = true;
								} else {
									satisfactionHashKey.entertainment = (int) (Integer) exprKeyValue_satisfaction__entertainment;
								}

								Object exprKeyValue_satisfaction__booking = row1.Ease_of_Online_booking;
								if (exprKeyValue_satisfaction__booking == null) {
									hasCasePrimitiveKeyWithNull_tMap_1 = true;
								} else {
									satisfactionHashKey.booking = (int) (Integer) exprKeyValue_satisfaction__booking;
								}

								Object exprKeyValue_satisfaction__online_support = row1.Online_support;
								if (exprKeyValue_satisfaction__online_support == null) {
									hasCasePrimitiveKeyWithNull_tMap_1 = true;
								} else {
									satisfactionHashKey.online_support = (int) (Integer) exprKeyValue_satisfaction__online_support;
								}

								Object exprKeyValue_satisfaction__onboard_service = row1.On_board_service;
								if (exprKeyValue_satisfaction__onboard_service == null) {
									hasCasePrimitiveKeyWithNull_tMap_1 = true;
								} else {
									satisfactionHashKey.onboard_service = (int) (Integer) exprKeyValue_satisfaction__onboard_service;
								}

								Object exprKeyValue_satisfaction__leg_room_service = row1.Leg_room_service;
								if (exprKeyValue_satisfaction__leg_room_service == null) {
									hasCasePrimitiveKeyWithNull_tMap_1 = true;
								} else {
									satisfactionHashKey.leg_room_service = (int) (Integer) exprKeyValue_satisfaction__leg_room_service;
								}

								Object exprKeyValue_satisfaction__baggage_handling = row1.Baggage_handling;
								if (exprKeyValue_satisfaction__baggage_handling == null) {
									hasCasePrimitiveKeyWithNull_tMap_1 = true;
								} else {
									satisfactionHashKey.baggage_handling = (int) (Integer) exprKeyValue_satisfaction__baggage_handling;
								}

								Object exprKeyValue_satisfaction__checkin = row1.Checkin_service;
								if (exprKeyValue_satisfaction__checkin == null) {
									hasCasePrimitiveKeyWithNull_tMap_1 = true;
								} else {
									satisfactionHashKey.checkin = (int) (Integer) exprKeyValue_satisfaction__checkin;
								}

								Object exprKeyValue_satisfaction__cleanliness = row1.Cleanliness;
								if (exprKeyValue_satisfaction__cleanliness == null) {
									hasCasePrimitiveKeyWithNull_tMap_1 = true;
								} else {
									satisfactionHashKey.cleanliness = (int) (Integer) exprKeyValue_satisfaction__cleanliness;
								}

								satisfactionHashKey.hashCodeDirty = true;

								if (!hasCasePrimitiveKeyWithNull_tMap_1) { // G_TM_M_091

									tHash_Lookup_satisfaction.lookup(satisfactionHashKey);

								} // G_TM_M_091

								if (hasCasePrimitiveKeyWithNull_tMap_1 || !tHash_Lookup_satisfaction.hasNext()) { // G_TM_M_090

									rejectedInnerJoin_tMap_1 = true;

								} // G_TM_M_090

							} // G_TM_M_020

							if (tHash_Lookup_satisfaction != null
									&& tHash_Lookup_satisfaction.getCount(satisfactionHashKey) > 1) { // G 071

								// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup
								// 'satisfaction' and it contains more one result from keys :
								// satisfaction.seat_comfort = '" + satisfactionHashKey.seat_comfort + "',
								// satisfaction.time_convenience = '" + satisfactionHashKey.time_convenience +
								// "', satisfaction.food = '" + satisfactionHashKey.food + "',
								// satisfaction.gate_location = '" + satisfactionHashKey.gate_location + "',
								// satisfaction.wifi_service = '" + satisfactionHashKey.wifi_service + "',
								// satisfaction.entertainment = '" + satisfactionHashKey.entertainment + "',
								// satisfaction.booking = '" + satisfactionHashKey.booking + "',
								// satisfaction.online_support = '" + satisfactionHashKey.online_support + "',
								// satisfaction.onboard_service = '" + satisfactionHashKey.onboard_service + "',
								// satisfaction.leg_room_service = '" + satisfactionHashKey.leg_room_service +
								// "', satisfaction.baggage_handling = '" + satisfactionHashKey.baggage_handling
								// + "', satisfaction.checkin = '" + satisfactionHashKey.checkin + "',
								// satisfaction.cleanliness = '" + satisfactionHashKey.cleanliness + "'");
							} // G 071

							satisfactionStruct satisfaction = null;

							satisfactionStruct fromLookup_satisfaction = null;
							satisfaction = satisfactionDefault;

							if (tHash_Lookup_satisfaction != null && tHash_Lookup_satisfaction.hasNext()) { // G 099

								fromLookup_satisfaction = tHash_Lookup_satisfaction.next();

							} // G 099

							if (fromLookup_satisfaction != null) {
								satisfaction = fromLookup_satisfaction;
							}

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
								// ###############################
								// # Output tables

								fact = null;

								if (!rejectedInnerJoin_tMap_1) {

// # Output table : 'fact'
									fact_tmp.person_id = person.id;
									fact_tmp.flight_id = flight.id;
									fact_tmp.satisfaction_id = satisfaction.id;
									fact_tmp.ticket_id = ticket.id;
									fact_tmp.overall_satisfaction = row1.satisfaction_v2;
									fact = fact_tmp;
								} // closing inner join bracket (2)
// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_1 = false;

							tos_count_tMap_1++;

							/**
							 * [tMap_1 main ] stop
							 */

							/**
							 * [tMap_1 process_data_begin ] start
							 */

							currentComponent = "tMap_1";

							/**
							 * [tMap_1 process_data_begin ] stop
							 */
// Start of branch "fact"
							if (fact != null) {

								/**
								 * [tDBOutput_1 main ] start
								 */

								currentComponent = "tDBOutput_1";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1, "fact");
								}

								whetherReject_tDBOutput_1 = false;
								pstmt_tDBOutput_1.setLong(1, fact.person_id);

								pstmt_tDBOutput_1.setLong(2, fact.flight_id);

								pstmt_tDBOutput_1.setLong(3, fact.satisfaction_id);

								pstmt_tDBOutput_1.setLong(4, fact.ticket_id);

								if (fact.overall_satisfaction == null) {
									pstmt_tDBOutput_1.setNull(5, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_1.setString(5, fact.overall_satisfaction);
								}

								pstmt_tDBOutput_1.addBatch();
								nb_line_tDBOutput_1++;

								batchSizeCounter_tDBOutput_1++;

								if ((batchSize_tDBOutput_1 > 0)
										&& (batchSize_tDBOutput_1 <= batchSizeCounter_tDBOutput_1)) {
									try {
										int countSum_tDBOutput_1 = 0;

										for (int countEach_tDBOutput_1 : pstmt_tDBOutput_1.executeBatch()) {
											countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0
													: countEach_tDBOutput_1);
										}

										insertedCount_tDBOutput_1 += countSum_tDBOutput_1;

										batchSizeCounter_tDBOutput_1 = 0;
									} catch (java.sql.BatchUpdateException e_tDBOutput_1) {
										java.sql.SQLException ne_tDBOutput_1 = e_tDBOutput_1.getNextException(),
												sqle_tDBOutput_1 = null;
										String errormessage_tDBOutput_1;
										if (ne_tDBOutput_1 != null) {
											// build new exception to provide the original cause
											sqle_tDBOutput_1 = new java.sql.SQLException(
													e_tDBOutput_1.getMessage() + "\ncaused by: "
															+ ne_tDBOutput_1.getMessage(),
													ne_tDBOutput_1.getSQLState(), ne_tDBOutput_1.getErrorCode(),
													ne_tDBOutput_1);
											errormessage_tDBOutput_1 = sqle_tDBOutput_1.getMessage();
										} else {
											errormessage_tDBOutput_1 = e_tDBOutput_1.getMessage();
										}

										int countSum_tDBOutput_1 = 0;
										for (int countEach_tDBOutput_1 : e_tDBOutput_1.getUpdateCounts()) {
											countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0
													: countEach_tDBOutput_1);
										}

										insertedCount_tDBOutput_1 += countSum_tDBOutput_1;

										System.err.println(errormessage_tDBOutput_1);

									}
								}

								tos_count_tDBOutput_1++;

								/**
								 * [tDBOutput_1 main ] stop
								 */

								/**
								 * [tDBOutput_1 process_data_begin ] start
								 */

								currentComponent = "tDBOutput_1";

								/**
								 * [tDBOutput_1 process_data_begin ] stop
								 */

								/**
								 * [tDBOutput_1 process_data_end ] start
								 */

								currentComponent = "tDBOutput_1";

								/**
								 * [tDBOutput_1 process_data_end ] stop
								 */

							} // End of branch "fact"

							/**
							 * [tMap_1 process_data_end ] start
							 */

							currentComponent = "tMap_1";

							/**
							 * [tMap_1 process_data_end ] stop
							 */

						} // End of branch "row1"

						/**
						 * [tFileInputDelimited_1 process_data_end ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						/**
						 * [tFileInputDelimited_1 process_data_end ] stop
						 */

						/**
						 * [tFileInputDelimited_1 end ] start
						 */

						currentComponent = "tFileInputDelimited_1";

					}
				} finally {
					if (!((Object) ("/Users/dylanperdigao/Library/CloudStorage/OneDrive-dei.uc.pt/UC/UC-Cadeiras_do_Curso/Mestrado/Semestre_2/Business_Intelligence/BI-Project/Dataset/satisfaction.csv") instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_1 != null) {
							fid_tFileInputDelimited_1.close();
						}
					}
					if (fid_tFileInputDelimited_1 != null) {
						globalMap.put("tFileInputDelimited_1_NB_LINE", fid_tFileInputDelimited_1.getRowNumber());

					}
				}

				ok_Hash.put("tFileInputDelimited_1", true);
				end_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_1 end ] stop
				 */

				/**
				 * [tMap_1 end ] start
				 */

				currentComponent = "tMap_1";

// ###############################
// # Lookup hashes releasing
				if (tHash_Lookup_person != null) {
					tHash_Lookup_person.endGet();
				}
				globalMap.remove("tHash_Lookup_person");

				if (tHash_Lookup_flight != null) {
					tHash_Lookup_flight.endGet();
				}
				globalMap.remove("tHash_Lookup_flight");

				if (tHash_Lookup_ticket != null) {
					tHash_Lookup_ticket.endGet();
				}
				globalMap.remove("tHash_Lookup_ticket");

				if (tHash_Lookup_satisfaction != null) {
					tHash_Lookup_satisfaction.endGet();
				}
				globalMap.remove("tHash_Lookup_satisfaction");

// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row1");
				}

				ok_Hash.put("tMap_1", true);
				end_Hash.put("tMap_1", System.currentTimeMillis());

				/**
				 * [tMap_1 end ] stop
				 */

				/**
				 * [tDBOutput_1 end ] start
				 */

				currentComponent = "tDBOutput_1";

				try {
					int countSum_tDBOutput_1 = 0;
					if (pstmt_tDBOutput_1 != null && batchSizeCounter_tDBOutput_1 > 0) {

						for (int countEach_tDBOutput_1 : pstmt_tDBOutput_1.executeBatch()) {
							countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
						}

					}

					insertedCount_tDBOutput_1 += countSum_tDBOutput_1;

				} catch (java.sql.BatchUpdateException e_tDBOutput_1) {
					java.sql.SQLException ne_tDBOutput_1 = e_tDBOutput_1.getNextException(), sqle_tDBOutput_1 = null;
					String errormessage_tDBOutput_1;
					if (ne_tDBOutput_1 != null) {
						// build new exception to provide the original cause
						sqle_tDBOutput_1 = new java.sql.SQLException(
								e_tDBOutput_1.getMessage() + "\ncaused by: " + ne_tDBOutput_1.getMessage(),
								ne_tDBOutput_1.getSQLState(), ne_tDBOutput_1.getErrorCode(), ne_tDBOutput_1);
						errormessage_tDBOutput_1 = sqle_tDBOutput_1.getMessage();
					} else {
						errormessage_tDBOutput_1 = e_tDBOutput_1.getMessage();
					}

					int countSum_tDBOutput_1 = 0;
					for (int countEach_tDBOutput_1 : e_tDBOutput_1.getUpdateCounts()) {
						countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
					}

					insertedCount_tDBOutput_1 += countSum_tDBOutput_1;

					System.err.println(errormessage_tDBOutput_1);

				}

				if (pstmt_tDBOutput_1 != null) {

					pstmt_tDBOutput_1.close();
					resourceMap.remove("pstmt_tDBOutput_1");
				}
				resourceMap.put("statementClosed_tDBOutput_1", true);

				nb_line_deleted_tDBOutput_1 = nb_line_deleted_tDBOutput_1 + deletedCount_tDBOutput_1;
				nb_line_update_tDBOutput_1 = nb_line_update_tDBOutput_1 + updatedCount_tDBOutput_1;
				nb_line_inserted_tDBOutput_1 = nb_line_inserted_tDBOutput_1 + insertedCount_tDBOutput_1;
				nb_line_rejected_tDBOutput_1 = nb_line_rejected_tDBOutput_1 + rejectedCount_tDBOutput_1;

				globalMap.put("tDBOutput_1_NB_LINE", nb_line_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_UPDATED", nb_line_update_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_INSERTED", nb_line_inserted_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_DELETED", nb_line_deleted_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_1);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "fact");
				}

				ok_Hash.put("tDBOutput_1", true);
				end_Hash.put("tDBOutput_1", System.currentTimeMillis());

				/**
				 * [tDBOutput_1 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			// free memory for "tMap_1"
			globalMap.remove("tHash_Lookup_person");

			// free memory for "tMap_1"
			globalMap.remove("tHash_Lookup_flight");

			// free memory for "tMap_1"
			globalMap.remove("tHash_Lookup_satisfaction");

			// free memory for "tMap_1"
			globalMap.remove("tHash_Lookup_ticket");

			try {

				/**
				 * [tFileInputDelimited_1 finally ] start
				 */

				currentComponent = "tFileInputDelimited_1";

				/**
				 * [tFileInputDelimited_1 finally ] stop
				 */

				/**
				 * [tMap_1 finally ] start
				 */

				currentComponent = "tMap_1";

				/**
				 * [tMap_1 finally ] stop
				 */

				/**
				 * [tDBOutput_1 finally ] start
				 */

				currentComponent = "tDBOutput_1";

				if (resourceMap.get("statementClosed_tDBOutput_1") == null) {
					java.sql.PreparedStatement pstmtToClose_tDBOutput_1 = null;
					if ((pstmtToClose_tDBOutput_1 = (java.sql.PreparedStatement) resourceMap
							.remove("pstmt_tDBOutput_1")) != null) {
						pstmtToClose_tDBOutput_1.close();
					}
				}

				/**
				 * [tDBOutput_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 1);
	}

	public static class personStruct implements routines.system.IPersistableComparableLookupRow<personStruct> {
		final static byte[] commonByteArrayLock_BI_Fact_Table_Creation = new byte[0];
		static byte[] commonByteArray_BI_Fact_Table_Creation = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public long id;

		public long getId() {
			return this.id;
		}

		public Long old_id;

		public Long getOld_id() {
			return this.old_id;
		}

		public int age;

		public int getAge() {
			return this.age;
		}

		public String gender;

		public String getGender() {
			return this.gender;
		}

		public String loyalty;

		public String getLoyalty() {
			return this.loyalty;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.age;

				result = prime * result + ((this.gender == null) ? 0 : this.gender.hashCode());

				result = prime * result + ((this.loyalty == null) ? 0 : this.loyalty.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final personStruct other = (personStruct) obj;

			if (this.age != other.age)
				return false;

			if (this.gender == null) {
				if (other.gender != null)
					return false;

			} else if (!this.gender.equals(other.gender))

				return false;

			if (this.loyalty == null) {
				if (other.loyalty != null)
					return false;

			} else if (!this.loyalty.equals(other.loyalty))

				return false;

			return true;
		}

		public void copyDataTo(personStruct other) {

			other.id = this.id;
			other.old_id = this.old_id;
			other.age = this.age;
			other.gender = this.gender;
			other.loyalty = this.loyalty;

		}

		public void copyKeysDataTo(personStruct other) {

			other.age = this.age;
			other.gender = this.gender;
			other.loyalty = this.loyalty;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_BI_Fact_Table_Creation.length) {
					if (length < 1024 && commonByteArray_BI_Fact_Table_Creation.length == 0) {
						commonByteArray_BI_Fact_Table_Creation = new byte[1024];
					} else {
						commonByteArray_BI_Fact_Table_Creation = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_BI_Fact_Table_Creation, 0, length);
				strReturn = new String(commonByteArray_BI_Fact_Table_Creation, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_BI_Fact_Table_Creation) {

				try {

					int length = 0;

					this.age = dis.readInt();

					this.gender = readString(dis);

					this.loyalty = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.age);

				// String

				writeString(this.gender, dos);

				// String

				writeString(this.loyalty, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.id = dis.readLong();

				length = dis.readByte();
				if (length == -1) {
					this.old_id = null;
				} else {
					this.old_id = dis.readLong();
				}

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				dos.writeLong(this.id);

				if (this.old_id == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.old_id);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id=" + String.valueOf(id));
			sb.append(",old_id=" + String.valueOf(old_id));
			sb.append(",age=" + String.valueOf(age));
			sb.append(",gender=" + gender);
			sb.append(",loyalty=" + loyalty);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(personStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.age, other.age);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.gender, other.gender);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.loyalty, other.loyalty);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				personStruct person = new personStruct();

				/**
				 * [tAdvancedHash_person begin ] start
				 */

				ok_Hash.put("tAdvancedHash_person", false);
				start_Hash.put("tAdvancedHash_person", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_person";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "person");
				}

				int tos_count_tAdvancedHash_person = 0;

				// connection name:person
				// source node:tDBInput_1 - inputs:(after_tFileInputDelimited_1)
				// outputs:(person,person) | target node:tAdvancedHash_person - inputs:(person)
				// outputs:()
				// linked node: tMap_1 - inputs:(row1,person,flight,satisfaction,ticket)
				// outputs:(fact)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_person = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<personStruct> tHash_Lookup_person = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<personStruct>getLookup(matchingModeEnum_person);

				globalMap.put("tHash_Lookup_person", tHash_Lookup_person);

				/**
				 * [tAdvancedHash_person begin ] stop
				 */

				/**
				 * [tDBInput_1 begin ] start
				 */

				ok_Hash.put("tDBInput_1", false);
				start_Hash.put("tDBInput_1", System.currentTimeMillis());

				currentComponent = "tDBInput_1";

				int tos_count_tDBInput_1 = 0;

				int nb_line_tDBInput_1 = 0;
				java.sql.Connection conn_tDBInput_1 = null;
				conn_tDBInput_1 = (java.sql.Connection) globalMap.get("conn_tDBConnection_1");

				java.sql.Statement stmt_tDBInput_1 = conn_tDBInput_1.createStatement();

				String dbquery_tDBInput_1 = "select * from person;";

				globalMap.put("tDBInput_1_QUERY", dbquery_tDBInput_1);
				java.sql.ResultSet rs_tDBInput_1 = null;

				try {
					rs_tDBInput_1 = stmt_tDBInput_1.executeQuery(dbquery_tDBInput_1);
					java.sql.ResultSetMetaData rsmd_tDBInput_1 = rs_tDBInput_1.getMetaData();
					int colQtyInRs_tDBInput_1 = rsmd_tDBInput_1.getColumnCount();

					String tmpContent_tDBInput_1 = null;

					while (rs_tDBInput_1.next()) {
						nb_line_tDBInput_1++;

						if (colQtyInRs_tDBInput_1 < 1) {
							person.id = 0;
						} else {

							person.id = rs_tDBInput_1.getLong(1);
							if (rs_tDBInput_1.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 2) {
							person.old_id = null;
						} else {

							person.old_id = rs_tDBInput_1.getLong(2);
							if (rs_tDBInput_1.wasNull()) {
								person.old_id = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 3) {
							person.age = 0;
						} else {

							person.age = rs_tDBInput_1.getInt(3);
							if (rs_tDBInput_1.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 4) {
							person.gender = null;
						} else {

							person.gender = routines.system.JDBCUtil.getString(rs_tDBInput_1, 4, false);
						}
						if (colQtyInRs_tDBInput_1 < 5) {
							person.loyalty = null;
						} else {

							person.loyalty = routines.system.JDBCUtil.getString(rs_tDBInput_1, 5, false);
						}

						/**
						 * [tDBInput_1 begin ] stop
						 */

						/**
						 * [tDBInput_1 main ] start
						 */

						currentComponent = "tDBInput_1";

						tos_count_tDBInput_1++;

						/**
						 * [tDBInput_1 main ] stop
						 */

						/**
						 * [tDBInput_1 process_data_begin ] start
						 */

						currentComponent = "tDBInput_1";

						/**
						 * [tDBInput_1 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_person main ] start
						 */

						currentComponent = "tAdvancedHash_person";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1, "person");
						}

						personStruct person_HashRow = new personStruct();

						person_HashRow.id = person.id;

						person_HashRow.old_id = person.old_id;

						person_HashRow.age = person.age;

						person_HashRow.gender = person.gender;

						person_HashRow.loyalty = person.loyalty;

						tHash_Lookup_person.put(person_HashRow);

						tos_count_tAdvancedHash_person++;

						/**
						 * [tAdvancedHash_person main ] stop
						 */

						/**
						 * [tAdvancedHash_person process_data_begin ] start
						 */

						currentComponent = "tAdvancedHash_person";

						/**
						 * [tAdvancedHash_person process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_person process_data_end ] start
						 */

						currentComponent = "tAdvancedHash_person";

						/**
						 * [tAdvancedHash_person process_data_end ] stop
						 */

						/**
						 * [tDBInput_1 process_data_end ] start
						 */

						currentComponent = "tDBInput_1";

						/**
						 * [tDBInput_1 process_data_end ] stop
						 */

						/**
						 * [tDBInput_1 end ] start
						 */

						currentComponent = "tDBInput_1";

					}
				} finally {
					if (rs_tDBInput_1 != null) {
						rs_tDBInput_1.close();
					}
					if (stmt_tDBInput_1 != null) {
						stmt_tDBInput_1.close();
					}
				}
				globalMap.put("tDBInput_1_NB_LINE", nb_line_tDBInput_1);

				ok_Hash.put("tDBInput_1", true);
				end_Hash.put("tDBInput_1", System.currentTimeMillis());

				/**
				 * [tDBInput_1 end ] stop
				 */

				/**
				 * [tAdvancedHash_person end ] start
				 */

				currentComponent = "tAdvancedHash_person";

				tHash_Lookup_person.endPut();

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "person");
				}

				ok_Hash.put("tAdvancedHash_person", true);
				end_Hash.put("tAdvancedHash_person", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_person end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_1 finally ] start
				 */

				currentComponent = "tDBInput_1";

				/**
				 * [tDBInput_1 finally ] stop
				 */

				/**
				 * [tAdvancedHash_person finally ] start
				 */

				currentComponent = "tAdvancedHash_person";

				/**
				 * [tAdvancedHash_person finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_1_SUBPROCESS_STATE", 1);
	}

	public static class flightStruct implements routines.system.IPersistableComparableLookupRow<flightStruct> {
		final static byte[] commonByteArrayLock_BI_Fact_Table_Creation = new byte[0];
		static byte[] commonByteArray_BI_Fact_Table_Creation = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public long id;

		public long getId() {
			return this.id;
		}

		public Long old_id;

		public Long getOld_id() {
			return this.old_id;
		}

		public long distance;

		public long getDistance() {
			return this.distance;
		}

		public Long departure_delay;

		public Long getDeparture_delay() {
			return this.departure_delay;
		}

		public Long arrival_delay;

		public Long getArrival_delay() {
			return this.arrival_delay;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.distance;

				result = prime * result + ((this.departure_delay == null) ? 0 : this.departure_delay.hashCode());

				result = prime * result + ((this.arrival_delay == null) ? 0 : this.arrival_delay.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final flightStruct other = (flightStruct) obj;

			if (this.distance != other.distance)
				return false;

			if (this.departure_delay == null) {
				if (other.departure_delay != null)
					return false;

			} else if (!this.departure_delay.equals(other.departure_delay))

				return false;

			if (this.arrival_delay == null) {
				if (other.arrival_delay != null)
					return false;

			} else if (!this.arrival_delay.equals(other.arrival_delay))

				return false;

			return true;
		}

		public void copyDataTo(flightStruct other) {

			other.id = this.id;
			other.old_id = this.old_id;
			other.distance = this.distance;
			other.departure_delay = this.departure_delay;
			other.arrival_delay = this.arrival_delay;

		}

		public void copyKeysDataTo(flightStruct other) {

			other.distance = this.distance;
			other.departure_delay = this.departure_delay;
			other.arrival_delay = this.arrival_delay;

		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_BI_Fact_Table_Creation) {

				try {

					int length = 0;

					this.distance = dis.readLong();

					length = dis.readByte();
					if (length == -1) {
						this.departure_delay = null;
					} else {
						this.departure_delay = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.arrival_delay = null;
					} else {
						this.arrival_delay = dis.readLong();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// long

				dos.writeLong(this.distance);

				// Long

				if (this.departure_delay == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.departure_delay);
				}

				// Long

				if (this.arrival_delay == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.arrival_delay);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.id = dis.readLong();

				length = dis.readByte();
				if (length == -1) {
					this.old_id = null;
				} else {
					this.old_id = dis.readLong();
				}

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				dos.writeLong(this.id);

				if (this.old_id == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.old_id);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id=" + String.valueOf(id));
			sb.append(",old_id=" + String.valueOf(old_id));
			sb.append(",distance=" + String.valueOf(distance));
			sb.append(",departure_delay=" + String.valueOf(departure_delay));
			sb.append(",arrival_delay=" + String.valueOf(arrival_delay));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(flightStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.distance, other.distance);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.departure_delay, other.departure_delay);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.arrival_delay, other.arrival_delay);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				flightStruct flight = new flightStruct();

				/**
				 * [tAdvancedHash_flight begin ] start
				 */

				ok_Hash.put("tAdvancedHash_flight", false);
				start_Hash.put("tAdvancedHash_flight", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_flight";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "flight");
				}

				int tos_count_tAdvancedHash_flight = 0;

				// connection name:flight
				// source node:tDBInput_2 - inputs:(after_tFileInputDelimited_1)
				// outputs:(flight,flight) | target node:tAdvancedHash_flight - inputs:(flight)
				// outputs:()
				// linked node: tMap_1 - inputs:(row1,person,flight,satisfaction,ticket)
				// outputs:(fact)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_flight = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<flightStruct> tHash_Lookup_flight = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<flightStruct>getLookup(matchingModeEnum_flight);

				globalMap.put("tHash_Lookup_flight", tHash_Lookup_flight);

				/**
				 * [tAdvancedHash_flight begin ] stop
				 */

				/**
				 * [tDBInput_2 begin ] start
				 */

				ok_Hash.put("tDBInput_2", false);
				start_Hash.put("tDBInput_2", System.currentTimeMillis());

				currentComponent = "tDBInput_2";

				int tos_count_tDBInput_2 = 0;

				int nb_line_tDBInput_2 = 0;
				java.sql.Connection conn_tDBInput_2 = null;
				conn_tDBInput_2 = (java.sql.Connection) globalMap.get("conn_tDBConnection_1");

				java.sql.Statement stmt_tDBInput_2 = conn_tDBInput_2.createStatement();

				String dbquery_tDBInput_2 = "select * from flight;";

				globalMap.put("tDBInput_2_QUERY", dbquery_tDBInput_2);
				java.sql.ResultSet rs_tDBInput_2 = null;

				try {
					rs_tDBInput_2 = stmt_tDBInput_2.executeQuery(dbquery_tDBInput_2);
					java.sql.ResultSetMetaData rsmd_tDBInput_2 = rs_tDBInput_2.getMetaData();
					int colQtyInRs_tDBInput_2 = rsmd_tDBInput_2.getColumnCount();

					String tmpContent_tDBInput_2 = null;

					while (rs_tDBInput_2.next()) {
						nb_line_tDBInput_2++;

						if (colQtyInRs_tDBInput_2 < 1) {
							flight.id = 0;
						} else {

							flight.id = rs_tDBInput_2.getLong(1);
							if (rs_tDBInput_2.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_2 < 2) {
							flight.old_id = null;
						} else {

							flight.old_id = rs_tDBInput_2.getLong(2);
							if (rs_tDBInput_2.wasNull()) {
								flight.old_id = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 3) {
							flight.distance = 0;
						} else {

							flight.distance = rs_tDBInput_2.getLong(3);
							if (rs_tDBInput_2.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_2 < 4) {
							flight.departure_delay = null;
						} else {

							flight.departure_delay = rs_tDBInput_2.getLong(4);
							if (rs_tDBInput_2.wasNull()) {
								flight.departure_delay = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 5) {
							flight.arrival_delay = null;
						} else {

							flight.arrival_delay = rs_tDBInput_2.getLong(5);
							if (rs_tDBInput_2.wasNull()) {
								flight.arrival_delay = null;
							}
						}

						/**
						 * [tDBInput_2 begin ] stop
						 */

						/**
						 * [tDBInput_2 main ] start
						 */

						currentComponent = "tDBInput_2";

						tos_count_tDBInput_2++;

						/**
						 * [tDBInput_2 main ] stop
						 */

						/**
						 * [tDBInput_2 process_data_begin ] start
						 */

						currentComponent = "tDBInput_2";

						/**
						 * [tDBInput_2 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_flight main ] start
						 */

						currentComponent = "tAdvancedHash_flight";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1, "flight");
						}

						flightStruct flight_HashRow = new flightStruct();

						flight_HashRow.id = flight.id;

						flight_HashRow.old_id = flight.old_id;

						flight_HashRow.distance = flight.distance;

						flight_HashRow.departure_delay = flight.departure_delay;

						flight_HashRow.arrival_delay = flight.arrival_delay;

						tHash_Lookup_flight.put(flight_HashRow);

						tos_count_tAdvancedHash_flight++;

						/**
						 * [tAdvancedHash_flight main ] stop
						 */

						/**
						 * [tAdvancedHash_flight process_data_begin ] start
						 */

						currentComponent = "tAdvancedHash_flight";

						/**
						 * [tAdvancedHash_flight process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_flight process_data_end ] start
						 */

						currentComponent = "tAdvancedHash_flight";

						/**
						 * [tAdvancedHash_flight process_data_end ] stop
						 */

						/**
						 * [tDBInput_2 process_data_end ] start
						 */

						currentComponent = "tDBInput_2";

						/**
						 * [tDBInput_2 process_data_end ] stop
						 */

						/**
						 * [tDBInput_2 end ] start
						 */

						currentComponent = "tDBInput_2";

					}
				} finally {
					if (rs_tDBInput_2 != null) {
						rs_tDBInput_2.close();
					}
					if (stmt_tDBInput_2 != null) {
						stmt_tDBInput_2.close();
					}
				}
				globalMap.put("tDBInput_2_NB_LINE", nb_line_tDBInput_2);

				ok_Hash.put("tDBInput_2", true);
				end_Hash.put("tDBInput_2", System.currentTimeMillis());

				/**
				 * [tDBInput_2 end ] stop
				 */

				/**
				 * [tAdvancedHash_flight end ] start
				 */

				currentComponent = "tAdvancedHash_flight";

				tHash_Lookup_flight.endPut();

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "flight");
				}

				ok_Hash.put("tAdvancedHash_flight", true);
				end_Hash.put("tAdvancedHash_flight", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_flight end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_2 finally ] start
				 */

				currentComponent = "tDBInput_2";

				/**
				 * [tDBInput_2 finally ] stop
				 */

				/**
				 * [tAdvancedHash_flight finally ] start
				 */

				currentComponent = "tAdvancedHash_flight";

				/**
				 * [tAdvancedHash_flight finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_2_SUBPROCESS_STATE", 1);
	}

	public static class satisfactionStruct
			implements routines.system.IPersistableComparableLookupRow<satisfactionStruct> {
		final static byte[] commonByteArrayLock_BI_Fact_Table_Creation = new byte[0];
		static byte[] commonByteArray_BI_Fact_Table_Creation = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public long id;

		public long getId() {
			return this.id;
		}

		public Long old_id;

		public Long getOld_id() {
			return this.old_id;
		}

		public int seat_comfort;

		public int getSeat_comfort() {
			return this.seat_comfort;
		}

		public int time_convenience;

		public int getTime_convenience() {
			return this.time_convenience;
		}

		public int food;

		public int getFood() {
			return this.food;
		}

		public int gate_location;

		public int getGate_location() {
			return this.gate_location;
		}

		public int wifi_service;

		public int getWifi_service() {
			return this.wifi_service;
		}

		public int entertainment;

		public int getEntertainment() {
			return this.entertainment;
		}

		public int booking;

		public int getBooking() {
			return this.booking;
		}

		public int online_support;

		public int getOnline_support() {
			return this.online_support;
		}

		public int onboard_service;

		public int getOnboard_service() {
			return this.onboard_service;
		}

		public int leg_room_service;

		public int getLeg_room_service() {
			return this.leg_room_service;
		}

		public int baggage_handling;

		public int getBaggage_handling() {
			return this.baggage_handling;
		}

		public int checkin;

		public int getCheckin() {
			return this.checkin;
		}

		public int cleanliness;

		public int getCleanliness() {
			return this.cleanliness;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.seat_comfort;

				result = prime * result + (int) this.time_convenience;

				result = prime * result + (int) this.food;

				result = prime * result + (int) this.gate_location;

				result = prime * result + (int) this.wifi_service;

				result = prime * result + (int) this.entertainment;

				result = prime * result + (int) this.booking;

				result = prime * result + (int) this.online_support;

				result = prime * result + (int) this.onboard_service;

				result = prime * result + (int) this.leg_room_service;

				result = prime * result + (int) this.baggage_handling;

				result = prime * result + (int) this.checkin;

				result = prime * result + (int) this.cleanliness;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final satisfactionStruct other = (satisfactionStruct) obj;

			if (this.seat_comfort != other.seat_comfort)
				return false;

			if (this.time_convenience != other.time_convenience)
				return false;

			if (this.food != other.food)
				return false;

			if (this.gate_location != other.gate_location)
				return false;

			if (this.wifi_service != other.wifi_service)
				return false;

			if (this.entertainment != other.entertainment)
				return false;

			if (this.booking != other.booking)
				return false;

			if (this.online_support != other.online_support)
				return false;

			if (this.onboard_service != other.onboard_service)
				return false;

			if (this.leg_room_service != other.leg_room_service)
				return false;

			if (this.baggage_handling != other.baggage_handling)
				return false;

			if (this.checkin != other.checkin)
				return false;

			if (this.cleanliness != other.cleanliness)
				return false;

			return true;
		}

		public void copyDataTo(satisfactionStruct other) {

			other.id = this.id;
			other.old_id = this.old_id;
			other.seat_comfort = this.seat_comfort;
			other.time_convenience = this.time_convenience;
			other.food = this.food;
			other.gate_location = this.gate_location;
			other.wifi_service = this.wifi_service;
			other.entertainment = this.entertainment;
			other.booking = this.booking;
			other.online_support = this.online_support;
			other.onboard_service = this.onboard_service;
			other.leg_room_service = this.leg_room_service;
			other.baggage_handling = this.baggage_handling;
			other.checkin = this.checkin;
			other.cleanliness = this.cleanliness;

		}

		public void copyKeysDataTo(satisfactionStruct other) {

			other.seat_comfort = this.seat_comfort;
			other.time_convenience = this.time_convenience;
			other.food = this.food;
			other.gate_location = this.gate_location;
			other.wifi_service = this.wifi_service;
			other.entertainment = this.entertainment;
			other.booking = this.booking;
			other.online_support = this.online_support;
			other.onboard_service = this.onboard_service;
			other.leg_room_service = this.leg_room_service;
			other.baggage_handling = this.baggage_handling;
			other.checkin = this.checkin;
			other.cleanliness = this.cleanliness;

		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_BI_Fact_Table_Creation) {

				try {

					int length = 0;

					this.seat_comfort = dis.readInt();

					this.time_convenience = dis.readInt();

					this.food = dis.readInt();

					this.gate_location = dis.readInt();

					this.wifi_service = dis.readInt();

					this.entertainment = dis.readInt();

					this.booking = dis.readInt();

					this.online_support = dis.readInt();

					this.onboard_service = dis.readInt();

					this.leg_room_service = dis.readInt();

					this.baggage_handling = dis.readInt();

					this.checkin = dis.readInt();

					this.cleanliness = dis.readInt();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.seat_comfort);

				// int

				dos.writeInt(this.time_convenience);

				// int

				dos.writeInt(this.food);

				// int

				dos.writeInt(this.gate_location);

				// int

				dos.writeInt(this.wifi_service);

				// int

				dos.writeInt(this.entertainment);

				// int

				dos.writeInt(this.booking);

				// int

				dos.writeInt(this.online_support);

				// int

				dos.writeInt(this.onboard_service);

				// int

				dos.writeInt(this.leg_room_service);

				// int

				dos.writeInt(this.baggage_handling);

				// int

				dos.writeInt(this.checkin);

				// int

				dos.writeInt(this.cleanliness);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.id = dis.readLong();

				length = dis.readByte();
				if (length == -1) {
					this.old_id = null;
				} else {
					this.old_id = dis.readLong();
				}

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				dos.writeLong(this.id);

				if (this.old_id == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.old_id);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id=" + String.valueOf(id));
			sb.append(",old_id=" + String.valueOf(old_id));
			sb.append(",seat_comfort=" + String.valueOf(seat_comfort));
			sb.append(",time_convenience=" + String.valueOf(time_convenience));
			sb.append(",food=" + String.valueOf(food));
			sb.append(",gate_location=" + String.valueOf(gate_location));
			sb.append(",wifi_service=" + String.valueOf(wifi_service));
			sb.append(",entertainment=" + String.valueOf(entertainment));
			sb.append(",booking=" + String.valueOf(booking));
			sb.append(",online_support=" + String.valueOf(online_support));
			sb.append(",onboard_service=" + String.valueOf(onboard_service));
			sb.append(",leg_room_service=" + String.valueOf(leg_room_service));
			sb.append(",baggage_handling=" + String.valueOf(baggage_handling));
			sb.append(",checkin=" + String.valueOf(checkin));
			sb.append(",cleanliness=" + String.valueOf(cleanliness));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(satisfactionStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.seat_comfort, other.seat_comfort);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.time_convenience, other.time_convenience);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.food, other.food);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.gate_location, other.gate_location);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.wifi_service, other.wifi_service);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.entertainment, other.entertainment);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.booking, other.booking);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.online_support, other.online_support);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.onboard_service, other.onboard_service);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.leg_room_service, other.leg_room_service);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.baggage_handling, other.baggage_handling);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.checkin, other.checkin);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.cleanliness, other.cleanliness);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				satisfactionStruct satisfaction = new satisfactionStruct();

				/**
				 * [tAdvancedHash_satisfaction begin ] start
				 */

				ok_Hash.put("tAdvancedHash_satisfaction", false);
				start_Hash.put("tAdvancedHash_satisfaction", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_satisfaction";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "satisfaction");
				}

				int tos_count_tAdvancedHash_satisfaction = 0;

				// connection name:satisfaction
				// source node:tDBInput_3 - inputs:(after_tFileInputDelimited_1)
				// outputs:(satisfaction,satisfaction) | target node:tAdvancedHash_satisfaction
				// - inputs:(satisfaction) outputs:()
				// linked node: tMap_1 - inputs:(row1,person,flight,satisfaction,ticket)
				// outputs:(fact)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_satisfaction = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<satisfactionStruct> tHash_Lookup_satisfaction = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<satisfactionStruct>getLookup(matchingModeEnum_satisfaction);

				globalMap.put("tHash_Lookup_satisfaction", tHash_Lookup_satisfaction);

				/**
				 * [tAdvancedHash_satisfaction begin ] stop
				 */

				/**
				 * [tDBInput_3 begin ] start
				 */

				ok_Hash.put("tDBInput_3", false);
				start_Hash.put("tDBInput_3", System.currentTimeMillis());

				currentComponent = "tDBInput_3";

				int tos_count_tDBInput_3 = 0;

				int nb_line_tDBInput_3 = 0;
				java.sql.Connection conn_tDBInput_3 = null;
				conn_tDBInput_3 = (java.sql.Connection) globalMap.get("conn_tDBConnection_1");

				java.sql.Statement stmt_tDBInput_3 = conn_tDBInput_3.createStatement();

				String dbquery_tDBInput_3 = "select * from satisfaction;";

				globalMap.put("tDBInput_3_QUERY", dbquery_tDBInput_3);
				java.sql.ResultSet rs_tDBInput_3 = null;

				try {
					rs_tDBInput_3 = stmt_tDBInput_3.executeQuery(dbquery_tDBInput_3);
					java.sql.ResultSetMetaData rsmd_tDBInput_3 = rs_tDBInput_3.getMetaData();
					int colQtyInRs_tDBInput_3 = rsmd_tDBInput_3.getColumnCount();

					String tmpContent_tDBInput_3 = null;

					while (rs_tDBInput_3.next()) {
						nb_line_tDBInput_3++;

						if (colQtyInRs_tDBInput_3 < 1) {
							satisfaction.id = 0;
						} else {

							satisfaction.id = rs_tDBInput_3.getLong(1);
							if (rs_tDBInput_3.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_3 < 2) {
							satisfaction.old_id = null;
						} else {

							satisfaction.old_id = rs_tDBInput_3.getLong(2);
							if (rs_tDBInput_3.wasNull()) {
								satisfaction.old_id = null;
							}
						}
						if (colQtyInRs_tDBInput_3 < 3) {
							satisfaction.seat_comfort = 0;
						} else {

							satisfaction.seat_comfort = rs_tDBInput_3.getInt(3);
							if (rs_tDBInput_3.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_3 < 4) {
							satisfaction.time_convenience = 0;
						} else {

							satisfaction.time_convenience = rs_tDBInput_3.getInt(4);
							if (rs_tDBInput_3.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_3 < 5) {
							satisfaction.food = 0;
						} else {

							satisfaction.food = rs_tDBInput_3.getInt(5);
							if (rs_tDBInput_3.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_3 < 6) {
							satisfaction.gate_location = 0;
						} else {

							satisfaction.gate_location = rs_tDBInput_3.getInt(6);
							if (rs_tDBInput_3.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_3 < 7) {
							satisfaction.wifi_service = 0;
						} else {

							satisfaction.wifi_service = rs_tDBInput_3.getInt(7);
							if (rs_tDBInput_3.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_3 < 8) {
							satisfaction.entertainment = 0;
						} else {

							satisfaction.entertainment = rs_tDBInput_3.getInt(8);
							if (rs_tDBInput_3.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_3 < 9) {
							satisfaction.booking = 0;
						} else {

							satisfaction.booking = rs_tDBInput_3.getInt(9);
							if (rs_tDBInput_3.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_3 < 10) {
							satisfaction.online_support = 0;
						} else {

							satisfaction.online_support = rs_tDBInput_3.getInt(10);
							if (rs_tDBInput_3.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_3 < 11) {
							satisfaction.onboard_service = 0;
						} else {

							satisfaction.onboard_service = rs_tDBInput_3.getInt(11);
							if (rs_tDBInput_3.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_3 < 12) {
							satisfaction.leg_room_service = 0;
						} else {

							satisfaction.leg_room_service = rs_tDBInput_3.getInt(12);
							if (rs_tDBInput_3.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_3 < 13) {
							satisfaction.baggage_handling = 0;
						} else {

							satisfaction.baggage_handling = rs_tDBInput_3.getInt(13);
							if (rs_tDBInput_3.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_3 < 14) {
							satisfaction.checkin = 0;
						} else {

							satisfaction.checkin = rs_tDBInput_3.getInt(14);
							if (rs_tDBInput_3.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_3 < 15) {
							satisfaction.cleanliness = 0;
						} else {

							satisfaction.cleanliness = rs_tDBInput_3.getInt(15);
							if (rs_tDBInput_3.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}

						/**
						 * [tDBInput_3 begin ] stop
						 */

						/**
						 * [tDBInput_3 main ] start
						 */

						currentComponent = "tDBInput_3";

						tos_count_tDBInput_3++;

						/**
						 * [tDBInput_3 main ] stop
						 */

						/**
						 * [tDBInput_3 process_data_begin ] start
						 */

						currentComponent = "tDBInput_3";

						/**
						 * [tDBInput_3 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_satisfaction main ] start
						 */

						currentComponent = "tAdvancedHash_satisfaction";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1, "satisfaction");
						}

						satisfactionStruct satisfaction_HashRow = new satisfactionStruct();

						satisfaction_HashRow.id = satisfaction.id;

						satisfaction_HashRow.old_id = satisfaction.old_id;

						satisfaction_HashRow.seat_comfort = satisfaction.seat_comfort;

						satisfaction_HashRow.time_convenience = satisfaction.time_convenience;

						satisfaction_HashRow.food = satisfaction.food;

						satisfaction_HashRow.gate_location = satisfaction.gate_location;

						satisfaction_HashRow.wifi_service = satisfaction.wifi_service;

						satisfaction_HashRow.entertainment = satisfaction.entertainment;

						satisfaction_HashRow.booking = satisfaction.booking;

						satisfaction_HashRow.online_support = satisfaction.online_support;

						satisfaction_HashRow.onboard_service = satisfaction.onboard_service;

						satisfaction_HashRow.leg_room_service = satisfaction.leg_room_service;

						satisfaction_HashRow.baggage_handling = satisfaction.baggage_handling;

						satisfaction_HashRow.checkin = satisfaction.checkin;

						satisfaction_HashRow.cleanliness = satisfaction.cleanliness;

						tHash_Lookup_satisfaction.put(satisfaction_HashRow);

						tos_count_tAdvancedHash_satisfaction++;

						/**
						 * [tAdvancedHash_satisfaction main ] stop
						 */

						/**
						 * [tAdvancedHash_satisfaction process_data_begin ] start
						 */

						currentComponent = "tAdvancedHash_satisfaction";

						/**
						 * [tAdvancedHash_satisfaction process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_satisfaction process_data_end ] start
						 */

						currentComponent = "tAdvancedHash_satisfaction";

						/**
						 * [tAdvancedHash_satisfaction process_data_end ] stop
						 */

						/**
						 * [tDBInput_3 process_data_end ] start
						 */

						currentComponent = "tDBInput_3";

						/**
						 * [tDBInput_3 process_data_end ] stop
						 */

						/**
						 * [tDBInput_3 end ] start
						 */

						currentComponent = "tDBInput_3";

					}
				} finally {
					if (rs_tDBInput_3 != null) {
						rs_tDBInput_3.close();
					}
					if (stmt_tDBInput_3 != null) {
						stmt_tDBInput_3.close();
					}
				}
				globalMap.put("tDBInput_3_NB_LINE", nb_line_tDBInput_3);

				ok_Hash.put("tDBInput_3", true);
				end_Hash.put("tDBInput_3", System.currentTimeMillis());

				/**
				 * [tDBInput_3 end ] stop
				 */

				/**
				 * [tAdvancedHash_satisfaction end ] start
				 */

				currentComponent = "tAdvancedHash_satisfaction";

				tHash_Lookup_satisfaction.endPut();

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "satisfaction");
				}

				ok_Hash.put("tAdvancedHash_satisfaction", true);
				end_Hash.put("tAdvancedHash_satisfaction", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_satisfaction end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_3 finally ] start
				 */

				currentComponent = "tDBInput_3";

				/**
				 * [tDBInput_3 finally ] stop
				 */

				/**
				 * [tAdvancedHash_satisfaction finally ] start
				 */

				currentComponent = "tAdvancedHash_satisfaction";

				/**
				 * [tAdvancedHash_satisfaction finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_3_SUBPROCESS_STATE", 1);
	}

	public static class ticketStruct implements routines.system.IPersistableComparableLookupRow<ticketStruct> {
		final static byte[] commonByteArrayLock_BI_Fact_Table_Creation = new byte[0];
		static byte[] commonByteArray_BI_Fact_Table_Creation = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public long id;

		public long getId() {
			return this.id;
		}

		public Long old_id;

		public Long getOld_id() {
			return this.old_id;
		}

		public String flight_class;

		public String getFlight_class() {
			return this.flight_class;
		}

		public String type_travel;

		public String getType_travel() {
			return this.type_travel;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.flight_class == null) ? 0 : this.flight_class.hashCode());

				result = prime * result + ((this.type_travel == null) ? 0 : this.type_travel.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final ticketStruct other = (ticketStruct) obj;

			if (this.flight_class == null) {
				if (other.flight_class != null)
					return false;

			} else if (!this.flight_class.equals(other.flight_class))

				return false;

			if (this.type_travel == null) {
				if (other.type_travel != null)
					return false;

			} else if (!this.type_travel.equals(other.type_travel))

				return false;

			return true;
		}

		public void copyDataTo(ticketStruct other) {

			other.id = this.id;
			other.old_id = this.old_id;
			other.flight_class = this.flight_class;
			other.type_travel = this.type_travel;

		}

		public void copyKeysDataTo(ticketStruct other) {

			other.flight_class = this.flight_class;
			other.type_travel = this.type_travel;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_BI_Fact_Table_Creation.length) {
					if (length < 1024 && commonByteArray_BI_Fact_Table_Creation.length == 0) {
						commonByteArray_BI_Fact_Table_Creation = new byte[1024];
					} else {
						commonByteArray_BI_Fact_Table_Creation = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_BI_Fact_Table_Creation, 0, length);
				strReturn = new String(commonByteArray_BI_Fact_Table_Creation, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_BI_Fact_Table_Creation) {

				try {

					int length = 0;

					this.flight_class = readString(dis);

					this.type_travel = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.flight_class, dos);

				// String

				writeString(this.type_travel, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.id = dis.readLong();

				length = dis.readByte();
				if (length == -1) {
					this.old_id = null;
				} else {
					this.old_id = dis.readLong();
				}

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				dos.writeLong(this.id);

				if (this.old_id == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.old_id);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id=" + String.valueOf(id));
			sb.append(",old_id=" + String.valueOf(old_id));
			sb.append(",flight_class=" + flight_class);
			sb.append(",type_travel=" + type_travel);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(ticketStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.flight_class, other.flight_class);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.type_travel, other.type_travel);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_4_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				ticketStruct ticket = new ticketStruct();

				/**
				 * [tAdvancedHash_ticket begin ] start
				 */

				ok_Hash.put("tAdvancedHash_ticket", false);
				start_Hash.put("tAdvancedHash_ticket", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_ticket";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "ticket");
				}

				int tos_count_tAdvancedHash_ticket = 0;

				// connection name:ticket
				// source node:tDBInput_4 - inputs:(after_tFileInputDelimited_1)
				// outputs:(ticket,ticket) | target node:tAdvancedHash_ticket - inputs:(ticket)
				// outputs:()
				// linked node: tMap_1 - inputs:(row1,person,flight,satisfaction,ticket)
				// outputs:(fact)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_ticket = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ticketStruct> tHash_Lookup_ticket = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<ticketStruct>getLookup(matchingModeEnum_ticket);

				globalMap.put("tHash_Lookup_ticket", tHash_Lookup_ticket);

				/**
				 * [tAdvancedHash_ticket begin ] stop
				 */

				/**
				 * [tDBInput_4 begin ] start
				 */

				ok_Hash.put("tDBInput_4", false);
				start_Hash.put("tDBInput_4", System.currentTimeMillis());

				currentComponent = "tDBInput_4";

				int tos_count_tDBInput_4 = 0;

				int nb_line_tDBInput_4 = 0;
				java.sql.Connection conn_tDBInput_4 = null;
				conn_tDBInput_4 = (java.sql.Connection) globalMap.get("conn_tDBConnection_1");

				java.sql.Statement stmt_tDBInput_4 = conn_tDBInput_4.createStatement();

				String dbquery_tDBInput_4 = "select * from ticket;";

				globalMap.put("tDBInput_4_QUERY", dbquery_tDBInput_4);
				java.sql.ResultSet rs_tDBInput_4 = null;

				try {
					rs_tDBInput_4 = stmt_tDBInput_4.executeQuery(dbquery_tDBInput_4);
					java.sql.ResultSetMetaData rsmd_tDBInput_4 = rs_tDBInput_4.getMetaData();
					int colQtyInRs_tDBInput_4 = rsmd_tDBInput_4.getColumnCount();

					String tmpContent_tDBInput_4 = null;

					while (rs_tDBInput_4.next()) {
						nb_line_tDBInput_4++;

						if (colQtyInRs_tDBInput_4 < 1) {
							ticket.id = 0;
						} else {

							ticket.id = rs_tDBInput_4.getLong(1);
							if (rs_tDBInput_4.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_4 < 2) {
							ticket.old_id = null;
						} else {

							ticket.old_id = rs_tDBInput_4.getLong(2);
							if (rs_tDBInput_4.wasNull()) {
								ticket.old_id = null;
							}
						}
						if (colQtyInRs_tDBInput_4 < 3) {
							ticket.flight_class = null;
						} else {

							ticket.flight_class = routines.system.JDBCUtil.getString(rs_tDBInput_4, 3, false);
						}
						if (colQtyInRs_tDBInput_4 < 4) {
							ticket.type_travel = null;
						} else {

							ticket.type_travel = routines.system.JDBCUtil.getString(rs_tDBInput_4, 4, false);
						}

						/**
						 * [tDBInput_4 begin ] stop
						 */

						/**
						 * [tDBInput_4 main ] start
						 */

						currentComponent = "tDBInput_4";

						tos_count_tDBInput_4++;

						/**
						 * [tDBInput_4 main ] stop
						 */

						/**
						 * [tDBInput_4 process_data_begin ] start
						 */

						currentComponent = "tDBInput_4";

						/**
						 * [tDBInput_4 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_ticket main ] start
						 */

						currentComponent = "tAdvancedHash_ticket";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1, "ticket");
						}

						ticketStruct ticket_HashRow = new ticketStruct();

						ticket_HashRow.id = ticket.id;

						ticket_HashRow.old_id = ticket.old_id;

						ticket_HashRow.flight_class = ticket.flight_class;

						ticket_HashRow.type_travel = ticket.type_travel;

						tHash_Lookup_ticket.put(ticket_HashRow);

						tos_count_tAdvancedHash_ticket++;

						/**
						 * [tAdvancedHash_ticket main ] stop
						 */

						/**
						 * [tAdvancedHash_ticket process_data_begin ] start
						 */

						currentComponent = "tAdvancedHash_ticket";

						/**
						 * [tAdvancedHash_ticket process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_ticket process_data_end ] start
						 */

						currentComponent = "tAdvancedHash_ticket";

						/**
						 * [tAdvancedHash_ticket process_data_end ] stop
						 */

						/**
						 * [tDBInput_4 process_data_end ] start
						 */

						currentComponent = "tDBInput_4";

						/**
						 * [tDBInput_4 process_data_end ] stop
						 */

						/**
						 * [tDBInput_4 end ] start
						 */

						currentComponent = "tDBInput_4";

					}
				} finally {
					if (rs_tDBInput_4 != null) {
						rs_tDBInput_4.close();
					}
					if (stmt_tDBInput_4 != null) {
						stmt_tDBInput_4.close();
					}
				}
				globalMap.put("tDBInput_4_NB_LINE", nb_line_tDBInput_4);

				ok_Hash.put("tDBInput_4", true);
				end_Hash.put("tDBInput_4", System.currentTimeMillis());

				/**
				 * [tDBInput_4 end ] stop
				 */

				/**
				 * [tAdvancedHash_ticket end ] start
				 */

				currentComponent = "tAdvancedHash_ticket";

				tHash_Lookup_ticket.endPut();

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "ticket");
				}

				ok_Hash.put("tAdvancedHash_ticket", true);
				end_Hash.put("tAdvancedHash_ticket", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_ticket end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_4 finally ] start
				 */

				currentComponent = "tDBInput_4";

				/**
				 * [tDBInput_4 finally ] stop
				 */

				/**
				 * [tAdvancedHash_ticket finally ] start
				 */

				currentComponent = "tAdvancedHash_ticket";

				/**
				 * [tAdvancedHash_ticket finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_4_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean enableLogStash;

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private SyncInt runningThreadCount = new SyncInt();

	private class SyncInt {
		private int count = 0;

		public synchronized void add(int i) {
			count += i;
		}

		public synchronized int getCount() {
			return count;
		}
	}

	private PropertiesWithType context_param = new PropertiesWithType();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final Fact_Table_Creation Fact_Table_CreationClass = new Fact_Table_Creation();

		int exitCode = Fact_Table_CreationClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}
		enableLogStash = "true".equalsIgnoreCase(System.getProperty("monitoring"));

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		if (portStats != null) {
			// portStats = -1; //for testing
			if (portStats < 0 || portStats > 65535) {
				// issue:10869, the portStats is invalid, so this client socket can't open
				System.err.println("The statistics socket port " + portStats + " is invalid.");
				execStat = false;
			}
		} else {
			execStat = false;
		}

		try {
			// call job/subjob with an existing context, like: --context=production. if
			// without this parameter, there will use the default context instead.
			java.io.InputStream inContext = Fact_Table_Creation.class.getClassLoader()
					.getResourceAsStream("bi/fact_table_creation_0_3/contexts/" + contextStr + ".properties");
			if (inContext == null) {
				inContext = Fact_Table_Creation.class.getClassLoader()
						.getResourceAsStream("config/contexts/" + contextStr + ".properties");
			}
			if (inContext != null) {
				// defaultProps is in order to keep the original context value
				if (context != null && context.isEmpty()) {
					defaultProps.load(inContext);
					context = new ContextProperties(defaultProps);
				}

				inContext.close();
			} else if (!isDefaultContext) {
				// print info and job continue to run, for case: context_param is not empty.
				System.err.println("Could not find the context " + contextStr);
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
				// set types for params from parentJobs
				for (Object key : context_param.keySet()) {
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
			}
			class ContextProcessing {
				private void processContext_0() {
				}

				public void processAllContext() {
					processContext_0();
				}
			}

			new ContextProcessing().processAllContext();
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "",
				"", "", "", "", resumeUtil.convertToJsonText(context, parametersToEncrypt));

		if (execStat) {
			try {
				runStat.openSocket(!isChildJob);
				runStat.setAllPID(rootPid, fatherPid, pid, jobName);
				runStat.startThreadStat(clientHost, portStats);
				runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
			} catch (java.io.IOException ioException) {
				ioException.printStackTrace();
			}
		}

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs
		final Thread launchingThread = Thread.currentThread();
		runningThreadCount.add(1);
		new Thread() {
			public void run() {
				java.util.Map threadRunResultMap = new java.util.HashMap();
				threadRunResultMap.put("errorCode", null);
				threadRunResultMap.put("status", "");
				threadLocal.set(threadRunResultMap);

				try {
					((java.util.Map) threadLocal.get()).put("errorCode", null);
					tDBConnection_1Process(globalMap);
					if (!"failure".equals(((java.util.Map) threadLocal.get()).get("status"))) {
						((java.util.Map) threadLocal.get()).put("status", "end");
					}
				} catch (TalendException e_tDBConnection_1) {
					globalMap.put("tDBConnection_1_SUBPROCESS_STATE", -1);

					e_tDBConnection_1.printStackTrace();

				} catch (java.lang.Error e_tDBConnection_1) {
					globalMap.put("tDBConnection_1_SUBPROCESS_STATE", -1);
					((java.util.Map) threadLocal.get()).put("status", "failure");
					throw e_tDBConnection_1;

				} finally {
					Integer localErrorCode = (Integer) (((java.util.Map) threadLocal.get()).get("errorCode"));
					String localStatus = (String) (((java.util.Map) threadLocal.get()).get("status"));
					if (localErrorCode != null) {
						if (errorCode == null || localErrorCode.compareTo(errorCode) > 0) {
							errorCode = localErrorCode;
						}
					}
					if (!status.equals("failure")) {
						status = localStatus;
					}

					if ("true".equals(((java.util.Map) threadLocal.get()).get("JobInterrupted"))) {
						launchingThread.interrupt();
					}

					runningThreadCount.add(-1);
				}
			}
		}.start();

		boolean interrupted = false;
		while (runningThreadCount.getCount() > 0) {
			try {
				Thread.sleep(10);
			} catch (java.lang.InterruptedException e) {
				interrupted = true;
			} catch (java.lang.Exception e) {
				e.printStackTrace();
			}
		}

		if (interrupted) {
			Thread.currentThread().interrupt();
		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		if (false) {
			System.out.println(
					(endUsedMemory - startUsedMemory) + " bytes memory increase when running : Fact_Table_Creation");
		}

		if (execStat) {
			runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
			runStat.stopThreadStat();
		}
		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "",
				"" + returnCode, "", "", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {
		closeSqlDbConnections();

	}

	private void closeSqlDbConnections() {
		try {
			Object obj_conn;
			obj_conn = globalMap.remove("conn_tDBConnection_1");
			if (null != obj_conn) {
				((java.sql.Connection) obj_conn).close();
			}
		} catch (java.lang.Exception e) {
		}
	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
		connections.put("conn_tDBConnection_1", globalMap.get("conn_tDBConnection_1"));

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_type")) {
			String keyValue = arg.substring(15);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.setContextType(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1));
				}

			}

		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--monitoring") && arg.contains("=")) {// for trunjob call
			final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
	}

	private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" }, { "\\'", "\'" }, { "\\r", "\r" },
			{ "\\f", "\f" }, { "\\b", "\b" }, { "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the
			// result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 189746 characters generated by Talend Open Studio for Data Integration on the
 * May 5, 2022 7:28:35 PM WEST
 ************************************************************************************************/