// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package bi.data_integration_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

@SuppressWarnings("unused")

/**
 * Job: Data_Integration Purpose: <br>
 * Description: <br>
 * 
 * @author user@talend.com
 * @version 7.3.1.20200219_1130
 * @status
 */
public class Data_Integration implements TalendJob {

	protected static void logIgnoredError(String message, Throwable cause) {
		System.err.println(message);
		if (cause != null) {
			cause.printStackTrace();
		}

	}

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String, String> propertyTypes = new java.util.HashMap<>();

		public PropertiesWithType(java.util.Properties properties) {
			super(properties);
		}

		public PropertiesWithType() {
			super();
		}

		public void setContextType(String key, String type) {
			propertyTypes.put(key, type);
		}

		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

		}

	}

	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "Data_Integration";
	private final String projectName = "BI";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null && currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					Data_Integration.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(Data_Integration.this, new Object[] { e, currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tFileInputDelimited_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAddCRCRow_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tUniqRow_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAddCRCRow_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tUniqRow_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAddCRCRow_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tUniqRow_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_4_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAddCRCRow_4_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tUniqRow_4_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_5_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public static class row9Struct implements routines.system.IPersistableRow<row9Struct> {
		final static byte[] commonByteArrayLock_BI_Data_Integration = new byte[0];
		static byte[] commonByteArray_BI_Data_Integration = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public long ticket_id;

		public long getTicket_id() {
			return this.ticket_id;
		}

		public String type_travel;

		public String getType_travel() {
			return this.type_travel;
		}

		public String flight_class;

		public String getFlight_class() {
			return this.flight_class;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.ticket_id;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row9Struct other = (row9Struct) obj;

			if (this.ticket_id != other.ticket_id)
				return false;

			return true;
		}

		public void copyDataTo(row9Struct other) {

			other.ticket_id = this.ticket_id;
			other.type_travel = this.type_travel;
			other.flight_class = this.flight_class;

		}

		public void copyKeysDataTo(row9Struct other) {

			other.ticket_id = this.ticket_id;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_BI_Data_Integration.length) {
					if (length < 1024 && commonByteArray_BI_Data_Integration.length == 0) {
						commonByteArray_BI_Data_Integration = new byte[1024];
					} else {
						commonByteArray_BI_Data_Integration = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_BI_Data_Integration, 0, length);
				strReturn = new String(commonByteArray_BI_Data_Integration, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_BI_Data_Integration) {

				try {

					int length = 0;

					this.ticket_id = dis.readLong();

					this.type_travel = readString(dis);

					this.flight_class = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// long

				dos.writeLong(this.ticket_id);

				// String

				writeString(this.type_travel, dos);

				// String

				writeString(this.flight_class, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ticket_id=" + String.valueOf(ticket_id));
			sb.append(",type_travel=" + type_travel);
			sb.append(",flight_class=" + flight_class);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row9Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.ticket_id, other.ticket_id);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class tStruct implements routines.system.IPersistableRow<tStruct> {
		final static byte[] commonByteArrayLock_BI_Data_Integration = new byte[0];
		static byte[] commonByteArray_BI_Data_Integration = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public long ticket_id;

		public long getTicket_id() {
			return this.ticket_id;
		}

		public String type_travel;

		public String getType_travel() {
			return this.type_travel;
		}

		public String flight_class;

		public String getFlight_class() {
			return this.flight_class;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.ticket_id;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final tStruct other = (tStruct) obj;

			if (this.ticket_id != other.ticket_id)
				return false;

			return true;
		}

		public void copyDataTo(tStruct other) {

			other.ticket_id = this.ticket_id;
			other.type_travel = this.type_travel;
			other.flight_class = this.flight_class;

		}

		public void copyKeysDataTo(tStruct other) {

			other.ticket_id = this.ticket_id;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_BI_Data_Integration.length) {
					if (length < 1024 && commonByteArray_BI_Data_Integration.length == 0) {
						commonByteArray_BI_Data_Integration = new byte[1024];
					} else {
						commonByteArray_BI_Data_Integration = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_BI_Data_Integration, 0, length);
				strReturn = new String(commonByteArray_BI_Data_Integration, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_BI_Data_Integration) {

				try {

					int length = 0;

					this.ticket_id = dis.readLong();

					this.type_travel = readString(dis);

					this.flight_class = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// long

				dos.writeLong(this.ticket_id);

				// String

				writeString(this.type_travel, dos);

				// String

				writeString(this.flight_class, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ticket_id=" + String.valueOf(ticket_id));
			sb.append(",type_travel=" + type_travel);
			sb.append(",flight_class=" + flight_class);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(tStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.ticket_id, other.ticket_id);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row7Struct implements routines.system.IPersistableRow<row7Struct> {
		final static byte[] commonByteArrayLock_BI_Data_Integration = new byte[0];
		static byte[] commonByteArray_BI_Data_Integration = new byte[0];

		public int id;

		public int getId() {
			return this.id;
		}

		public String type_travel;

		public String getType_travel() {
			return this.type_travel;
		}

		public String flight_class;

		public String getFlight_class() {
			return this.flight_class;
		}

		public Long CRC;

		public Long getCRC() {
			return this.CRC;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_BI_Data_Integration.length) {
					if (length < 1024 && commonByteArray_BI_Data_Integration.length == 0) {
						commonByteArray_BI_Data_Integration = new byte[1024];
					} else {
						commonByteArray_BI_Data_Integration = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_BI_Data_Integration, 0, length);
				strReturn = new String(commonByteArray_BI_Data_Integration, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_BI_Data_Integration) {

				try {

					int length = 0;

					this.id = dis.readInt();

					this.type_travel = readString(dis);

					this.flight_class = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.CRC = null;
					} else {
						this.CRC = dis.readLong();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.id);

				// String

				writeString(this.type_travel, dos);

				// String

				writeString(this.flight_class, dos);

				// Long

				if (this.CRC == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.CRC);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id=" + String.valueOf(id));
			sb.append(",type_travel=" + type_travel);
			sb.append(",flight_class=" + flight_class);
			sb.append(",CRC=" + String.valueOf(CRC));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row7Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row8Struct implements routines.system.IPersistableRow<row8Struct> {
		final static byte[] commonByteArrayLock_BI_Data_Integration = new byte[0];
		static byte[] commonByteArray_BI_Data_Integration = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public long satisfaction_id;

		public long getSatisfaction_id() {
			return this.satisfaction_id;
		}

		public Integer seat_comfort;

		public Integer getSeat_comfort() {
			return this.seat_comfort;
		}

		public Integer time_convenience;

		public Integer getTime_convenience() {
			return this.time_convenience;
		}

		public Integer food;

		public Integer getFood() {
			return this.food;
		}

		public Integer gate_location;

		public Integer getGate_location() {
			return this.gate_location;
		}

		public Integer wifi_service;

		public Integer getWifi_service() {
			return this.wifi_service;
		}

		public Integer entertainment;

		public Integer getEntertainment() {
			return this.entertainment;
		}

		public Integer online_support;

		public Integer getOnline_support() {
			return this.online_support;
		}

		public Integer booking;

		public Integer getBooking() {
			return this.booking;
		}

		public Integer onboard_service;

		public Integer getOnboard_service() {
			return this.onboard_service;
		}

		public Integer leg_room_service;

		public Integer getLeg_room_service() {
			return this.leg_room_service;
		}

		public Integer baggage_handling;

		public Integer getBaggage_handling() {
			return this.baggage_handling;
		}

		public Integer checkin;

		public Integer getCheckin() {
			return this.checkin;
		}

		public Integer cleanliness;

		public Integer getCleanliness() {
			return this.cleanliness;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.satisfaction_id;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row8Struct other = (row8Struct) obj;

			if (this.satisfaction_id != other.satisfaction_id)
				return false;

			return true;
		}

		public void copyDataTo(row8Struct other) {

			other.satisfaction_id = this.satisfaction_id;
			other.seat_comfort = this.seat_comfort;
			other.time_convenience = this.time_convenience;
			other.food = this.food;
			other.gate_location = this.gate_location;
			other.wifi_service = this.wifi_service;
			other.entertainment = this.entertainment;
			other.online_support = this.online_support;
			other.booking = this.booking;
			other.onboard_service = this.onboard_service;
			other.leg_room_service = this.leg_room_service;
			other.baggage_handling = this.baggage_handling;
			other.checkin = this.checkin;
			other.cleanliness = this.cleanliness;

		}

		public void copyKeysDataTo(row8Struct other) {

			other.satisfaction_id = this.satisfaction_id;

		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_BI_Data_Integration) {

				try {

					int length = 0;

					this.satisfaction_id = dis.readLong();

					this.seat_comfort = readInteger(dis);

					this.time_convenience = readInteger(dis);

					this.food = readInteger(dis);

					this.gate_location = readInteger(dis);

					this.wifi_service = readInteger(dis);

					this.entertainment = readInteger(dis);

					this.online_support = readInteger(dis);

					this.booking = readInteger(dis);

					this.onboard_service = readInteger(dis);

					this.leg_room_service = readInteger(dis);

					this.baggage_handling = readInteger(dis);

					this.checkin = readInteger(dis);

					this.cleanliness = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// long

				dos.writeLong(this.satisfaction_id);

				// Integer

				writeInteger(this.seat_comfort, dos);

				// Integer

				writeInteger(this.time_convenience, dos);

				// Integer

				writeInteger(this.food, dos);

				// Integer

				writeInteger(this.gate_location, dos);

				// Integer

				writeInteger(this.wifi_service, dos);

				// Integer

				writeInteger(this.entertainment, dos);

				// Integer

				writeInteger(this.online_support, dos);

				// Integer

				writeInteger(this.booking, dos);

				// Integer

				writeInteger(this.onboard_service, dos);

				// Integer

				writeInteger(this.leg_room_service, dos);

				// Integer

				writeInteger(this.baggage_handling, dos);

				// Integer

				writeInteger(this.checkin, dos);

				// Integer

				writeInteger(this.cleanliness, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("satisfaction_id=" + String.valueOf(satisfaction_id));
			sb.append(",seat_comfort=" + String.valueOf(seat_comfort));
			sb.append(",time_convenience=" + String.valueOf(time_convenience));
			sb.append(",food=" + String.valueOf(food));
			sb.append(",gate_location=" + String.valueOf(gate_location));
			sb.append(",wifi_service=" + String.valueOf(wifi_service));
			sb.append(",entertainment=" + String.valueOf(entertainment));
			sb.append(",online_support=" + String.valueOf(online_support));
			sb.append(",booking=" + String.valueOf(booking));
			sb.append(",onboard_service=" + String.valueOf(onboard_service));
			sb.append(",leg_room_service=" + String.valueOf(leg_room_service));
			sb.append(",baggage_handling=" + String.valueOf(baggage_handling));
			sb.append(",checkin=" + String.valueOf(checkin));
			sb.append(",cleanliness=" + String.valueOf(cleanliness));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row8Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.satisfaction_id, other.satisfaction_id);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class sStruct implements routines.system.IPersistableRow<sStruct> {
		final static byte[] commonByteArrayLock_BI_Data_Integration = new byte[0];
		static byte[] commonByteArray_BI_Data_Integration = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public long satisfaction_id;

		public long getSatisfaction_id() {
			return this.satisfaction_id;
		}

		public Integer seat_comfort;

		public Integer getSeat_comfort() {
			return this.seat_comfort;
		}

		public Integer time_convenience;

		public Integer getTime_convenience() {
			return this.time_convenience;
		}

		public Integer food;

		public Integer getFood() {
			return this.food;
		}

		public Integer gate_location;

		public Integer getGate_location() {
			return this.gate_location;
		}

		public Integer wifi_service;

		public Integer getWifi_service() {
			return this.wifi_service;
		}

		public Integer entertainment;

		public Integer getEntertainment() {
			return this.entertainment;
		}

		public Integer online_support;

		public Integer getOnline_support() {
			return this.online_support;
		}

		public Integer booking;

		public Integer getBooking() {
			return this.booking;
		}

		public Integer onboard_service;

		public Integer getOnboard_service() {
			return this.onboard_service;
		}

		public Integer leg_room_service;

		public Integer getLeg_room_service() {
			return this.leg_room_service;
		}

		public Integer baggage_handling;

		public Integer getBaggage_handling() {
			return this.baggage_handling;
		}

		public Integer checkin;

		public Integer getCheckin() {
			return this.checkin;
		}

		public Integer cleanliness;

		public Integer getCleanliness() {
			return this.cleanliness;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.satisfaction_id;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final sStruct other = (sStruct) obj;

			if (this.satisfaction_id != other.satisfaction_id)
				return false;

			return true;
		}

		public void copyDataTo(sStruct other) {

			other.satisfaction_id = this.satisfaction_id;
			other.seat_comfort = this.seat_comfort;
			other.time_convenience = this.time_convenience;
			other.food = this.food;
			other.gate_location = this.gate_location;
			other.wifi_service = this.wifi_service;
			other.entertainment = this.entertainment;
			other.online_support = this.online_support;
			other.booking = this.booking;
			other.onboard_service = this.onboard_service;
			other.leg_room_service = this.leg_room_service;
			other.baggage_handling = this.baggage_handling;
			other.checkin = this.checkin;
			other.cleanliness = this.cleanliness;

		}

		public void copyKeysDataTo(sStruct other) {

			other.satisfaction_id = this.satisfaction_id;

		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_BI_Data_Integration) {

				try {

					int length = 0;

					this.satisfaction_id = dis.readLong();

					this.seat_comfort = readInteger(dis);

					this.time_convenience = readInteger(dis);

					this.food = readInteger(dis);

					this.gate_location = readInteger(dis);

					this.wifi_service = readInteger(dis);

					this.entertainment = readInteger(dis);

					this.online_support = readInteger(dis);

					this.booking = readInteger(dis);

					this.onboard_service = readInteger(dis);

					this.leg_room_service = readInteger(dis);

					this.baggage_handling = readInteger(dis);

					this.checkin = readInteger(dis);

					this.cleanliness = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// long

				dos.writeLong(this.satisfaction_id);

				// Integer

				writeInteger(this.seat_comfort, dos);

				// Integer

				writeInteger(this.time_convenience, dos);

				// Integer

				writeInteger(this.food, dos);

				// Integer

				writeInteger(this.gate_location, dos);

				// Integer

				writeInteger(this.wifi_service, dos);

				// Integer

				writeInteger(this.entertainment, dos);

				// Integer

				writeInteger(this.online_support, dos);

				// Integer

				writeInteger(this.booking, dos);

				// Integer

				writeInteger(this.onboard_service, dos);

				// Integer

				writeInteger(this.leg_room_service, dos);

				// Integer

				writeInteger(this.baggage_handling, dos);

				// Integer

				writeInteger(this.checkin, dos);

				// Integer

				writeInteger(this.cleanliness, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("satisfaction_id=" + String.valueOf(satisfaction_id));
			sb.append(",seat_comfort=" + String.valueOf(seat_comfort));
			sb.append(",time_convenience=" + String.valueOf(time_convenience));
			sb.append(",food=" + String.valueOf(food));
			sb.append(",gate_location=" + String.valueOf(gate_location));
			sb.append(",wifi_service=" + String.valueOf(wifi_service));
			sb.append(",entertainment=" + String.valueOf(entertainment));
			sb.append(",online_support=" + String.valueOf(online_support));
			sb.append(",booking=" + String.valueOf(booking));
			sb.append(",onboard_service=" + String.valueOf(onboard_service));
			sb.append(",leg_room_service=" + String.valueOf(leg_room_service));
			sb.append(",baggage_handling=" + String.valueOf(baggage_handling));
			sb.append(",checkin=" + String.valueOf(checkin));
			sb.append(",cleanliness=" + String.valueOf(cleanliness));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(sStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.satisfaction_id, other.satisfaction_id);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row6Struct implements routines.system.IPersistableRow<row6Struct> {
		final static byte[] commonByteArrayLock_BI_Data_Integration = new byte[0];
		static byte[] commonByteArray_BI_Data_Integration = new byte[0];

		public int id;

		public int getId() {
			return this.id;
		}

		public Integer seat_comfort;

		public Integer getSeat_comfort() {
			return this.seat_comfort;
		}

		public Integer time_convenience;

		public Integer getTime_convenience() {
			return this.time_convenience;
		}

		public Integer food;

		public Integer getFood() {
			return this.food;
		}

		public Integer gate_location;

		public Integer getGate_location() {
			return this.gate_location;
		}

		public Integer wifi_service;

		public Integer getWifi_service() {
			return this.wifi_service;
		}

		public Integer entertainment;

		public Integer getEntertainment() {
			return this.entertainment;
		}

		public Integer online_support;

		public Integer getOnline_support() {
			return this.online_support;
		}

		public Integer booking;

		public Integer getBooking() {
			return this.booking;
		}

		public Integer onboard_service;

		public Integer getOnboard_service() {
			return this.onboard_service;
		}

		public Integer leg_room_service;

		public Integer getLeg_room_service() {
			return this.leg_room_service;
		}

		public Integer baggage_handling;

		public Integer getBaggage_handling() {
			return this.baggage_handling;
		}

		public Integer checkin;

		public Integer getCheckin() {
			return this.checkin;
		}

		public Integer cleanliness;

		public Integer getCleanliness() {
			return this.cleanliness;
		}

		public Long CRC;

		public Long getCRC() {
			return this.CRC;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_BI_Data_Integration) {

				try {

					int length = 0;

					this.id = dis.readInt();

					this.seat_comfort = readInteger(dis);

					this.time_convenience = readInteger(dis);

					this.food = readInteger(dis);

					this.gate_location = readInteger(dis);

					this.wifi_service = readInteger(dis);

					this.entertainment = readInteger(dis);

					this.online_support = readInteger(dis);

					this.booking = readInteger(dis);

					this.onboard_service = readInteger(dis);

					this.leg_room_service = readInteger(dis);

					this.baggage_handling = readInteger(dis);

					this.checkin = readInteger(dis);

					this.cleanliness = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.CRC = null;
					} else {
						this.CRC = dis.readLong();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.id);

				// Integer

				writeInteger(this.seat_comfort, dos);

				// Integer

				writeInteger(this.time_convenience, dos);

				// Integer

				writeInteger(this.food, dos);

				// Integer

				writeInteger(this.gate_location, dos);

				// Integer

				writeInteger(this.wifi_service, dos);

				// Integer

				writeInteger(this.entertainment, dos);

				// Integer

				writeInteger(this.online_support, dos);

				// Integer

				writeInteger(this.booking, dos);

				// Integer

				writeInteger(this.onboard_service, dos);

				// Integer

				writeInteger(this.leg_room_service, dos);

				// Integer

				writeInteger(this.baggage_handling, dos);

				// Integer

				writeInteger(this.checkin, dos);

				// Integer

				writeInteger(this.cleanliness, dos);

				// Long

				if (this.CRC == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.CRC);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id=" + String.valueOf(id));
			sb.append(",seat_comfort=" + String.valueOf(seat_comfort));
			sb.append(",time_convenience=" + String.valueOf(time_convenience));
			sb.append(",food=" + String.valueOf(food));
			sb.append(",gate_location=" + String.valueOf(gate_location));
			sb.append(",wifi_service=" + String.valueOf(wifi_service));
			sb.append(",entertainment=" + String.valueOf(entertainment));
			sb.append(",online_support=" + String.valueOf(online_support));
			sb.append(",booking=" + String.valueOf(booking));
			sb.append(",onboard_service=" + String.valueOf(onboard_service));
			sb.append(",leg_room_service=" + String.valueOf(leg_room_service));
			sb.append(",baggage_handling=" + String.valueOf(baggage_handling));
			sb.append(",checkin=" + String.valueOf(checkin));
			sb.append(",cleanliness=" + String.valueOf(cleanliness));
			sb.append(",CRC=" + String.valueOf(CRC));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row6Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row5Struct implements routines.system.IPersistableRow<row5Struct> {
		final static byte[] commonByteArrayLock_BI_Data_Integration = new byte[0];
		static byte[] commonByteArray_BI_Data_Integration = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public long flight_id;

		public long getFlight_id() {
			return this.flight_id;
		}

		public Integer distance;

		public Integer getDistance() {
			return this.distance;
		}

		public Integer departure_delay;

		public Integer getDeparture_delay() {
			return this.departure_delay;
		}

		public Integer arrival_delay;

		public Integer getArrival_delay() {
			return this.arrival_delay;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.flight_id;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row5Struct other = (row5Struct) obj;

			if (this.flight_id != other.flight_id)
				return false;

			return true;
		}

		public void copyDataTo(row5Struct other) {

			other.flight_id = this.flight_id;
			other.distance = this.distance;
			other.departure_delay = this.departure_delay;
			other.arrival_delay = this.arrival_delay;

		}

		public void copyKeysDataTo(row5Struct other) {

			other.flight_id = this.flight_id;

		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_BI_Data_Integration) {

				try {

					int length = 0;

					this.flight_id = dis.readLong();

					this.distance = readInteger(dis);

					this.departure_delay = readInteger(dis);

					this.arrival_delay = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// long

				dos.writeLong(this.flight_id);

				// Integer

				writeInteger(this.distance, dos);

				// Integer

				writeInteger(this.departure_delay, dos);

				// Integer

				writeInteger(this.arrival_delay, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("flight_id=" + String.valueOf(flight_id));
			sb.append(",distance=" + String.valueOf(distance));
			sb.append(",departure_delay=" + String.valueOf(departure_delay));
			sb.append(",arrival_delay=" + String.valueOf(arrival_delay));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row5Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.flight_id, other.flight_id);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class fStruct implements routines.system.IPersistableRow<fStruct> {
		final static byte[] commonByteArrayLock_BI_Data_Integration = new byte[0];
		static byte[] commonByteArray_BI_Data_Integration = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public long flight_id;

		public long getFlight_id() {
			return this.flight_id;
		}

		public Integer distance;

		public Integer getDistance() {
			return this.distance;
		}

		public Integer departure_delay;

		public Integer getDeparture_delay() {
			return this.departure_delay;
		}

		public Integer arrival_delay;

		public Integer getArrival_delay() {
			return this.arrival_delay;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.flight_id;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final fStruct other = (fStruct) obj;

			if (this.flight_id != other.flight_id)
				return false;

			return true;
		}

		public void copyDataTo(fStruct other) {

			other.flight_id = this.flight_id;
			other.distance = this.distance;
			other.departure_delay = this.departure_delay;
			other.arrival_delay = this.arrival_delay;

		}

		public void copyKeysDataTo(fStruct other) {

			other.flight_id = this.flight_id;

		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_BI_Data_Integration) {

				try {

					int length = 0;

					this.flight_id = dis.readLong();

					this.distance = readInteger(dis);

					this.departure_delay = readInteger(dis);

					this.arrival_delay = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// long

				dos.writeLong(this.flight_id);

				// Integer

				writeInteger(this.distance, dos);

				// Integer

				writeInteger(this.departure_delay, dos);

				// Integer

				writeInteger(this.arrival_delay, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("flight_id=" + String.valueOf(flight_id));
			sb.append(",distance=" + String.valueOf(distance));
			sb.append(",departure_delay=" + String.valueOf(departure_delay));
			sb.append(",arrival_delay=" + String.valueOf(arrival_delay));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(fStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.flight_id, other.flight_id);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row4Struct implements routines.system.IPersistableRow<row4Struct> {
		final static byte[] commonByteArrayLock_BI_Data_Integration = new byte[0];
		static byte[] commonByteArray_BI_Data_Integration = new byte[0];

		public int id;

		public int getId() {
			return this.id;
		}

		public Integer distance;

		public Integer getDistance() {
			return this.distance;
		}

		public Integer departure_delay;

		public Integer getDeparture_delay() {
			return this.departure_delay;
		}

		public Integer arrival_delay;

		public Integer getArrival_delay() {
			return this.arrival_delay;
		}

		public Long CRC;

		public Long getCRC() {
			return this.CRC;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_BI_Data_Integration) {

				try {

					int length = 0;

					this.id = dis.readInt();

					this.distance = readInteger(dis);

					this.departure_delay = readInteger(dis);

					this.arrival_delay = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.CRC = null;
					} else {
						this.CRC = dis.readLong();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.id);

				// Integer

				writeInteger(this.distance, dos);

				// Integer

				writeInteger(this.departure_delay, dos);

				// Integer

				writeInteger(this.arrival_delay, dos);

				// Long

				if (this.CRC == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.CRC);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id=" + String.valueOf(id));
			sb.append(",distance=" + String.valueOf(distance));
			sb.append(",departure_delay=" + String.valueOf(departure_delay));
			sb.append(",arrival_delay=" + String.valueOf(arrival_delay));
			sb.append(",CRC=" + String.valueOf(CRC));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row4Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row3Struct implements routines.system.IPersistableRow<row3Struct> {
		final static byte[] commonByteArrayLock_BI_Data_Integration = new byte[0];
		static byte[] commonByteArray_BI_Data_Integration = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public long person_id;

		public long getPerson_id() {
			return this.person_id;
		}

		public String gender;

		public String getGender() {
			return this.gender;
		}

		public String loyalty;

		public String getLoyalty() {
			return this.loyalty;
		}

		public Integer age;

		public Integer getAge() {
			return this.age;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.person_id;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row3Struct other = (row3Struct) obj;

			if (this.person_id != other.person_id)
				return false;

			return true;
		}

		public void copyDataTo(row3Struct other) {

			other.person_id = this.person_id;
			other.gender = this.gender;
			other.loyalty = this.loyalty;
			other.age = this.age;

		}

		public void copyKeysDataTo(row3Struct other) {

			other.person_id = this.person_id;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_BI_Data_Integration.length) {
					if (length < 1024 && commonByteArray_BI_Data_Integration.length == 0) {
						commonByteArray_BI_Data_Integration = new byte[1024];
					} else {
						commonByteArray_BI_Data_Integration = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_BI_Data_Integration, 0, length);
				strReturn = new String(commonByteArray_BI_Data_Integration, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_BI_Data_Integration) {

				try {

					int length = 0;

					this.person_id = dis.readLong();

					this.gender = readString(dis);

					this.loyalty = readString(dis);

					this.age = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// long

				dos.writeLong(this.person_id);

				// String

				writeString(this.gender, dos);

				// String

				writeString(this.loyalty, dos);

				// Integer

				writeInteger(this.age, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("person_id=" + String.valueOf(person_id));
			sb.append(",gender=" + gender);
			sb.append(",loyalty=" + loyalty);
			sb.append(",age=" + String.valueOf(age));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row3Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.person_id, other.person_id);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class pStruct implements routines.system.IPersistableRow<pStruct> {
		final static byte[] commonByteArrayLock_BI_Data_Integration = new byte[0];
		static byte[] commonByteArray_BI_Data_Integration = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public long person_id;

		public long getPerson_id() {
			return this.person_id;
		}

		public String gender;

		public String getGender() {
			return this.gender;
		}

		public String loyalty;

		public String getLoyalty() {
			return this.loyalty;
		}

		public Integer age;

		public Integer getAge() {
			return this.age;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.person_id;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final pStruct other = (pStruct) obj;

			if (this.person_id != other.person_id)
				return false;

			return true;
		}

		public void copyDataTo(pStruct other) {

			other.person_id = this.person_id;
			other.gender = this.gender;
			other.loyalty = this.loyalty;
			other.age = this.age;

		}

		public void copyKeysDataTo(pStruct other) {

			other.person_id = this.person_id;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_BI_Data_Integration.length) {
					if (length < 1024 && commonByteArray_BI_Data_Integration.length == 0) {
						commonByteArray_BI_Data_Integration = new byte[1024];
					} else {
						commonByteArray_BI_Data_Integration = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_BI_Data_Integration, 0, length);
				strReturn = new String(commonByteArray_BI_Data_Integration, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_BI_Data_Integration) {

				try {

					int length = 0;

					this.person_id = dis.readLong();

					this.gender = readString(dis);

					this.loyalty = readString(dis);

					this.age = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// long

				dos.writeLong(this.person_id);

				// String

				writeString(this.gender, dos);

				// String

				writeString(this.loyalty, dos);

				// Integer

				writeInteger(this.age, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("person_id=" + String.valueOf(person_id));
			sb.append(",gender=" + gender);
			sb.append(",loyalty=" + loyalty);
			sb.append(",age=" + String.valueOf(age));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(pStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.person_id, other.person_id);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row2Struct implements routines.system.IPersistableRow<row2Struct> {
		final static byte[] commonByteArrayLock_BI_Data_Integration = new byte[0];
		static byte[] commonByteArray_BI_Data_Integration = new byte[0];

		public int id;

		public int getId() {
			return this.id;
		}

		public String gender;

		public String getGender() {
			return this.gender;
		}

		public String loyalty;

		public String getLoyalty() {
			return this.loyalty;
		}

		public Integer age;

		public Integer getAge() {
			return this.age;
		}

		public Long CRC;

		public Long getCRC() {
			return this.CRC;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_BI_Data_Integration.length) {
					if (length < 1024 && commonByteArray_BI_Data_Integration.length == 0) {
						commonByteArray_BI_Data_Integration = new byte[1024];
					} else {
						commonByteArray_BI_Data_Integration = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_BI_Data_Integration, 0, length);
				strReturn = new String(commonByteArray_BI_Data_Integration, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_BI_Data_Integration) {

				try {

					int length = 0;

					this.id = dis.readInt();

					this.gender = readString(dis);

					this.loyalty = readString(dis);

					this.age = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.CRC = null;
					} else {
						this.CRC = dis.readLong();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.id);

				// String

				writeString(this.gender, dos);

				// String

				writeString(this.loyalty, dos);

				// Integer

				writeInteger(this.age, dos);

				// Long

				if (this.CRC == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.CRC);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id=" + String.valueOf(id));
			sb.append(",gender=" + gender);
			sb.append(",loyalty=" + loyalty);
			sb.append(",age=" + String.valueOf(age));
			sb.append(",CRC=" + String.valueOf(CRC));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class personStruct implements routines.system.IPersistableRow<personStruct> {
		final static byte[] commonByteArrayLock_BI_Data_Integration = new byte[0];
		static byte[] commonByteArray_BI_Data_Integration = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int id;

		public int getId() {
			return this.id;
		}

		public String gender;

		public String getGender() {
			return this.gender;
		}

		public String loyalty;

		public String getLoyalty() {
			return this.loyalty;
		}

		public Integer age;

		public Integer getAge() {
			return this.age;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.id;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final personStruct other = (personStruct) obj;

			if (this.id != other.id)
				return false;

			return true;
		}

		public void copyDataTo(personStruct other) {

			other.id = this.id;
			other.gender = this.gender;
			other.loyalty = this.loyalty;
			other.age = this.age;

		}

		public void copyKeysDataTo(personStruct other) {

			other.id = this.id;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_BI_Data_Integration.length) {
					if (length < 1024 && commonByteArray_BI_Data_Integration.length == 0) {
						commonByteArray_BI_Data_Integration = new byte[1024];
					} else {
						commonByteArray_BI_Data_Integration = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_BI_Data_Integration, 0, length);
				strReturn = new String(commonByteArray_BI_Data_Integration, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_BI_Data_Integration) {

				try {

					int length = 0;

					this.id = dis.readInt();

					this.gender = readString(dis);

					this.loyalty = readString(dis);

					this.age = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.id);

				// String

				writeString(this.gender, dos);

				// String

				writeString(this.loyalty, dos);

				// Integer

				writeInteger(this.age, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id=" + String.valueOf(id));
			sb.append(",gender=" + gender);
			sb.append(",loyalty=" + loyalty);
			sb.append(",age=" + String.valueOf(age));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(personStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.id, other.id);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class flightStruct implements routines.system.IPersistableRow<flightStruct> {
		final static byte[] commonByteArrayLock_BI_Data_Integration = new byte[0];
		static byte[] commonByteArray_BI_Data_Integration = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int id;

		public int getId() {
			return this.id;
		}

		public Integer distance;

		public Integer getDistance() {
			return this.distance;
		}

		public Integer departure_delay;

		public Integer getDeparture_delay() {
			return this.departure_delay;
		}

		public Integer arrival_delay;

		public Integer getArrival_delay() {
			return this.arrival_delay;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.id;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final flightStruct other = (flightStruct) obj;

			if (this.id != other.id)
				return false;

			return true;
		}

		public void copyDataTo(flightStruct other) {

			other.id = this.id;
			other.distance = this.distance;
			other.departure_delay = this.departure_delay;
			other.arrival_delay = this.arrival_delay;

		}

		public void copyKeysDataTo(flightStruct other) {

			other.id = this.id;

		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_BI_Data_Integration) {

				try {

					int length = 0;

					this.id = dis.readInt();

					this.distance = readInteger(dis);

					this.departure_delay = readInteger(dis);

					this.arrival_delay = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.id);

				// Integer

				writeInteger(this.distance, dos);

				// Integer

				writeInteger(this.departure_delay, dos);

				// Integer

				writeInteger(this.arrival_delay, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id=" + String.valueOf(id));
			sb.append(",distance=" + String.valueOf(distance));
			sb.append(",departure_delay=" + String.valueOf(departure_delay));
			sb.append(",arrival_delay=" + String.valueOf(arrival_delay));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(flightStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.id, other.id);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class satisfactionStruct implements routines.system.IPersistableRow<satisfactionStruct> {
		final static byte[] commonByteArrayLock_BI_Data_Integration = new byte[0];
		static byte[] commonByteArray_BI_Data_Integration = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int id;

		public int getId() {
			return this.id;
		}

		public Integer seat_comfort;

		public Integer getSeat_comfort() {
			return this.seat_comfort;
		}

		public Integer time_convenience;

		public Integer getTime_convenience() {
			return this.time_convenience;
		}

		public Integer food;

		public Integer getFood() {
			return this.food;
		}

		public Integer gate_location;

		public Integer getGate_location() {
			return this.gate_location;
		}

		public Integer wifi_service;

		public Integer getWifi_service() {
			return this.wifi_service;
		}

		public Integer entertainment;

		public Integer getEntertainment() {
			return this.entertainment;
		}

		public Integer online_support;

		public Integer getOnline_support() {
			return this.online_support;
		}

		public Integer booking;

		public Integer getBooking() {
			return this.booking;
		}

		public Integer onboard_service;

		public Integer getOnboard_service() {
			return this.onboard_service;
		}

		public Integer leg_room_service;

		public Integer getLeg_room_service() {
			return this.leg_room_service;
		}

		public Integer baggage_handling;

		public Integer getBaggage_handling() {
			return this.baggage_handling;
		}

		public Integer checkin;

		public Integer getCheckin() {
			return this.checkin;
		}

		public Integer cleanliness;

		public Integer getCleanliness() {
			return this.cleanliness;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.id;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final satisfactionStruct other = (satisfactionStruct) obj;

			if (this.id != other.id)
				return false;

			return true;
		}

		public void copyDataTo(satisfactionStruct other) {

			other.id = this.id;
			other.seat_comfort = this.seat_comfort;
			other.time_convenience = this.time_convenience;
			other.food = this.food;
			other.gate_location = this.gate_location;
			other.wifi_service = this.wifi_service;
			other.entertainment = this.entertainment;
			other.online_support = this.online_support;
			other.booking = this.booking;
			other.onboard_service = this.onboard_service;
			other.leg_room_service = this.leg_room_service;
			other.baggage_handling = this.baggage_handling;
			other.checkin = this.checkin;
			other.cleanliness = this.cleanliness;

		}

		public void copyKeysDataTo(satisfactionStruct other) {

			other.id = this.id;

		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_BI_Data_Integration) {

				try {

					int length = 0;

					this.id = dis.readInt();

					this.seat_comfort = readInteger(dis);

					this.time_convenience = readInteger(dis);

					this.food = readInteger(dis);

					this.gate_location = readInteger(dis);

					this.wifi_service = readInteger(dis);

					this.entertainment = readInteger(dis);

					this.online_support = readInteger(dis);

					this.booking = readInteger(dis);

					this.onboard_service = readInteger(dis);

					this.leg_room_service = readInteger(dis);

					this.baggage_handling = readInteger(dis);

					this.checkin = readInteger(dis);

					this.cleanliness = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.id);

				// Integer

				writeInteger(this.seat_comfort, dos);

				// Integer

				writeInteger(this.time_convenience, dos);

				// Integer

				writeInteger(this.food, dos);

				// Integer

				writeInteger(this.gate_location, dos);

				// Integer

				writeInteger(this.wifi_service, dos);

				// Integer

				writeInteger(this.entertainment, dos);

				// Integer

				writeInteger(this.online_support, dos);

				// Integer

				writeInteger(this.booking, dos);

				// Integer

				writeInteger(this.onboard_service, dos);

				// Integer

				writeInteger(this.leg_room_service, dos);

				// Integer

				writeInteger(this.baggage_handling, dos);

				// Integer

				writeInteger(this.checkin, dos);

				// Integer

				writeInteger(this.cleanliness, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id=" + String.valueOf(id));
			sb.append(",seat_comfort=" + String.valueOf(seat_comfort));
			sb.append(",time_convenience=" + String.valueOf(time_convenience));
			sb.append(",food=" + String.valueOf(food));
			sb.append(",gate_location=" + String.valueOf(gate_location));
			sb.append(",wifi_service=" + String.valueOf(wifi_service));
			sb.append(",entertainment=" + String.valueOf(entertainment));
			sb.append(",online_support=" + String.valueOf(online_support));
			sb.append(",booking=" + String.valueOf(booking));
			sb.append(",onboard_service=" + String.valueOf(onboard_service));
			sb.append(",leg_room_service=" + String.valueOf(leg_room_service));
			sb.append(",baggage_handling=" + String.valueOf(baggage_handling));
			sb.append(",checkin=" + String.valueOf(checkin));
			sb.append(",cleanliness=" + String.valueOf(cleanliness));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(satisfactionStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.id, other.id);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class ticketStruct implements routines.system.IPersistableRow<ticketStruct> {
		final static byte[] commonByteArrayLock_BI_Data_Integration = new byte[0];
		static byte[] commonByteArray_BI_Data_Integration = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int id;

		public int getId() {
			return this.id;
		}

		public String type_travel;

		public String getType_travel() {
			return this.type_travel;
		}

		public String flight_class;

		public String getFlight_class() {
			return this.flight_class;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.id;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final ticketStruct other = (ticketStruct) obj;

			if (this.id != other.id)
				return false;

			return true;
		}

		public void copyDataTo(ticketStruct other) {

			other.id = this.id;
			other.type_travel = this.type_travel;
			other.flight_class = this.flight_class;

		}

		public void copyKeysDataTo(ticketStruct other) {

			other.id = this.id;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_BI_Data_Integration.length) {
					if (length < 1024 && commonByteArray_BI_Data_Integration.length == 0) {
						commonByteArray_BI_Data_Integration = new byte[1024];
					} else {
						commonByteArray_BI_Data_Integration = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_BI_Data_Integration, 0, length);
				strReturn = new String(commonByteArray_BI_Data_Integration, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_BI_Data_Integration) {

				try {

					int length = 0;

					this.id = dis.readInt();

					this.type_travel = readString(dis);

					this.flight_class = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.id);

				// String

				writeString(this.type_travel, dos);

				// String

				writeString(this.flight_class, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id=" + String.valueOf(id));
			sb.append(",type_travel=" + type_travel);
			sb.append(",flight_class=" + flight_class);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(ticketStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.id, other.id);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_BI_Data_Integration = new byte[0];
		static byte[] commonByteArray_BI_Data_Integration = new byte[0];

		public Integer id;

		public Integer getId() {
			return this.id;
		}

		public String satisfaction_v2;

		public String getSatisfaction_v2() {
			return this.satisfaction_v2;
		}

		public String Gender;

		public String getGender() {
			return this.Gender;
		}

		public String Customer_Type;

		public String getCustomer_Type() {
			return this.Customer_Type;
		}

		public Integer Age;

		public Integer getAge() {
			return this.Age;
		}

		public String Type_of_Travel;

		public String getType_of_Travel() {
			return this.Type_of_Travel;
		}

		public String Flight_Class;

		public String getFlight_Class() {
			return this.Flight_Class;
		}

		public Integer Flight_Distance;

		public Integer getFlight_Distance() {
			return this.Flight_Distance;
		}

		public Integer Seat_comfort;

		public Integer getSeat_comfort() {
			return this.Seat_comfort;
		}

		public Integer Departure_Arrival_time_convenient;

		public Integer getDeparture_Arrival_time_convenient() {
			return this.Departure_Arrival_time_convenient;
		}

		public Integer Food_and_drink;

		public Integer getFood_and_drink() {
			return this.Food_and_drink;
		}

		public Integer Gate_location;

		public Integer getGate_location() {
			return this.Gate_location;
		}

		public Integer Inflight_wifi_service;

		public Integer getInflight_wifi_service() {
			return this.Inflight_wifi_service;
		}

		public Integer Inflight_entertainment;

		public Integer getInflight_entertainment() {
			return this.Inflight_entertainment;
		}

		public Integer Online_support;

		public Integer getOnline_support() {
			return this.Online_support;
		}

		public Integer Ease_of_Online_booking;

		public Integer getEase_of_Online_booking() {
			return this.Ease_of_Online_booking;
		}

		public Integer On_board_service;

		public Integer getOn_board_service() {
			return this.On_board_service;
		}

		public Integer Leg_room_service;

		public Integer getLeg_room_service() {
			return this.Leg_room_service;
		}

		public Integer Baggage_handling;

		public Integer getBaggage_handling() {
			return this.Baggage_handling;
		}

		public Integer Checkin_service;

		public Integer getCheckin_service() {
			return this.Checkin_service;
		}

		public Integer Cleanliness;

		public Integer getCleanliness() {
			return this.Cleanliness;
		}

		public Integer Online_boarding;

		public Integer getOnline_boarding() {
			return this.Online_boarding;
		}

		public Integer Departure_Delay_in_Minutes;

		public Integer getDeparture_Delay_in_Minutes() {
			return this.Departure_Delay_in_Minutes;
		}

		public Integer Arrival_Delay_in_Minutes;

		public Integer getArrival_Delay_in_Minutes() {
			return this.Arrival_Delay_in_Minutes;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_BI_Data_Integration.length) {
					if (length < 1024 && commonByteArray_BI_Data_Integration.length == 0) {
						commonByteArray_BI_Data_Integration = new byte[1024];
					} else {
						commonByteArray_BI_Data_Integration = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_BI_Data_Integration, 0, length);
				strReturn = new String(commonByteArray_BI_Data_Integration, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_BI_Data_Integration) {

				try {

					int length = 0;

					this.id = readInteger(dis);

					this.satisfaction_v2 = readString(dis);

					this.Gender = readString(dis);

					this.Customer_Type = readString(dis);

					this.Age = readInteger(dis);

					this.Type_of_Travel = readString(dis);

					this.Flight_Class = readString(dis);

					this.Flight_Distance = readInteger(dis);

					this.Seat_comfort = readInteger(dis);

					this.Departure_Arrival_time_convenient = readInteger(dis);

					this.Food_and_drink = readInteger(dis);

					this.Gate_location = readInteger(dis);

					this.Inflight_wifi_service = readInteger(dis);

					this.Inflight_entertainment = readInteger(dis);

					this.Online_support = readInteger(dis);

					this.Ease_of_Online_booking = readInteger(dis);

					this.On_board_service = readInteger(dis);

					this.Leg_room_service = readInteger(dis);

					this.Baggage_handling = readInteger(dis);

					this.Checkin_service = readInteger(dis);

					this.Cleanliness = readInteger(dis);

					this.Online_boarding = readInteger(dis);

					this.Departure_Delay_in_Minutes = readInteger(dis);

					this.Arrival_Delay_in_Minutes = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.id, dos);

				// String

				writeString(this.satisfaction_v2, dos);

				// String

				writeString(this.Gender, dos);

				// String

				writeString(this.Customer_Type, dos);

				// Integer

				writeInteger(this.Age, dos);

				// String

				writeString(this.Type_of_Travel, dos);

				// String

				writeString(this.Flight_Class, dos);

				// Integer

				writeInteger(this.Flight_Distance, dos);

				// Integer

				writeInteger(this.Seat_comfort, dos);

				// Integer

				writeInteger(this.Departure_Arrival_time_convenient, dos);

				// Integer

				writeInteger(this.Food_and_drink, dos);

				// Integer

				writeInteger(this.Gate_location, dos);

				// Integer

				writeInteger(this.Inflight_wifi_service, dos);

				// Integer

				writeInteger(this.Inflight_entertainment, dos);

				// Integer

				writeInteger(this.Online_support, dos);

				// Integer

				writeInteger(this.Ease_of_Online_booking, dos);

				// Integer

				writeInteger(this.On_board_service, dos);

				// Integer

				writeInteger(this.Leg_room_service, dos);

				// Integer

				writeInteger(this.Baggage_handling, dos);

				// Integer

				writeInteger(this.Checkin_service, dos);

				// Integer

				writeInteger(this.Cleanliness, dos);

				// Integer

				writeInteger(this.Online_boarding, dos);

				// Integer

				writeInteger(this.Departure_Delay_in_Minutes, dos);

				// Integer

				writeInteger(this.Arrival_Delay_in_Minutes, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id=" + String.valueOf(id));
			sb.append(",satisfaction_v2=" + satisfaction_v2);
			sb.append(",Gender=" + Gender);
			sb.append(",Customer_Type=" + Customer_Type);
			sb.append(",Age=" + String.valueOf(Age));
			sb.append(",Type_of_Travel=" + Type_of_Travel);
			sb.append(",Flight_Class=" + Flight_Class);
			sb.append(",Flight_Distance=" + String.valueOf(Flight_Distance));
			sb.append(",Seat_comfort=" + String.valueOf(Seat_comfort));
			sb.append(",Departure_Arrival_time_convenient=" + String.valueOf(Departure_Arrival_time_convenient));
			sb.append(",Food_and_drink=" + String.valueOf(Food_and_drink));
			sb.append(",Gate_location=" + String.valueOf(Gate_location));
			sb.append(",Inflight_wifi_service=" + String.valueOf(Inflight_wifi_service));
			sb.append(",Inflight_entertainment=" + String.valueOf(Inflight_entertainment));
			sb.append(",Online_support=" + String.valueOf(Online_support));
			sb.append(",Ease_of_Online_booking=" + String.valueOf(Ease_of_Online_booking));
			sb.append(",On_board_service=" + String.valueOf(On_board_service));
			sb.append(",Leg_room_service=" + String.valueOf(Leg_room_service));
			sb.append(",Baggage_handling=" + String.valueOf(Baggage_handling));
			sb.append(",Checkin_service=" + String.valueOf(Checkin_service));
			sb.append(",Cleanliness=" + String.valueOf(Cleanliness));
			sb.append(",Online_boarding=" + String.valueOf(Online_boarding));
			sb.append(",Departure_Delay_in_Minutes=" + String.valueOf(Departure_Delay_in_Minutes));
			sb.append(",Arrival_Delay_in_Minutes=" + String.valueOf(Arrival_Delay_in_Minutes));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row1Struct row1 = new row1Struct();
				personStruct person = new personStruct();
				row2Struct row2 = new row2Struct();
				pStruct p = new pStruct();
				row3Struct row3 = new row3Struct();
				flightStruct flight = new flightStruct();
				row4Struct row4 = new row4Struct();
				fStruct f = new fStruct();
				row5Struct row5 = new row5Struct();
				satisfactionStruct satisfaction = new satisfactionStruct();
				row6Struct row6 = new row6Struct();
				sStruct s = new sStruct();
				row8Struct row8 = new row8Struct();
				ticketStruct ticket = new ticketStruct();
				row7Struct row7 = new row7Struct();
				tStruct t = new tStruct();
				row9Struct row9 = new row9Struct();

				/**
				 * [tDBOutput_3 begin ] start
				 */

				ok_Hash.put("tDBOutput_3", false);
				start_Hash.put("tDBOutput_3", System.currentTimeMillis());

				currentComponent = "tDBOutput_3";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row3");
				}

				int tos_count_tDBOutput_3 = 0;

				String dbschema_tDBOutput_3 = null;
				dbschema_tDBOutput_3 = "";

				String tableName_tDBOutput_3 = null;
				if (dbschema_tDBOutput_3 == null || dbschema_tDBOutput_3.trim().length() == 0) {
					tableName_tDBOutput_3 = ("person");
				} else {
					tableName_tDBOutput_3 = dbschema_tDBOutput_3 + "\".\"" + ("person");
				}

				int nb_line_tDBOutput_3 = 0;
				int nb_line_update_tDBOutput_3 = 0;
				int nb_line_inserted_tDBOutput_3 = 0;
				int nb_line_deleted_tDBOutput_3 = 0;
				int nb_line_rejected_tDBOutput_3 = 0;

				int deletedCount_tDBOutput_3 = 0;
				int updatedCount_tDBOutput_3 = 0;
				int insertedCount_tDBOutput_3 = 0;
				int rejectedCount_tDBOutput_3 = 0;

				boolean whetherReject_tDBOutput_3 = false;

				java.sql.Connection conn_tDBOutput_3 = null;
				String dbUser_tDBOutput_3 = null;

				java.lang.Class.forName("org.postgresql.Driver");

				String url_tDBOutput_3 = "jdbc:postgresql://" + "localhost" + ":" + "5432" + "/" + "talend";
				dbUser_tDBOutput_3 = "postgres";

				final String decryptedPassword_tDBOutput_3 = routines.system.PasswordEncryptUtil
						.decryptPassword("enc:routine.encryption.key.v1:t54CLsOeBN7mmP8ne3/AKogy1gFsxeY7dpdhPw==");

				String dbPwd_tDBOutput_3 = decryptedPassword_tDBOutput_3;

				conn_tDBOutput_3 = java.sql.DriverManager.getConnection(url_tDBOutput_3, dbUser_tDBOutput_3,
						dbPwd_tDBOutput_3);

				resourceMap.put("conn_tDBOutput_3", conn_tDBOutput_3);
				conn_tDBOutput_3.setAutoCommit(false);
				int commitEvery_tDBOutput_3 = 10000;
				int commitCounter_tDBOutput_3 = 0;

				int batchSize_tDBOutput_3 = 10000;
				int batchSizeCounter_tDBOutput_3 = 0;

				int count_tDBOutput_3 = 0;
				java.sql.DatabaseMetaData dbMetaData_tDBOutput_3 = conn_tDBOutput_3.getMetaData();
				boolean whetherExist_tDBOutput_3 = false;
				try (java.sql.ResultSet rsTable_tDBOutput_3 = dbMetaData_tDBOutput_3.getTables(null, null, null,
						new String[] { "TABLE" })) {
					String defaultSchema_tDBOutput_3 = "public";
					if (dbschema_tDBOutput_3 == null || dbschema_tDBOutput_3.trim().length() == 0) {
						try (java.sql.Statement stmtSchema_tDBOutput_3 = conn_tDBOutput_3.createStatement();
								java.sql.ResultSet rsSchema_tDBOutput_3 = stmtSchema_tDBOutput_3
										.executeQuery("select current_schema() ")) {
							while (rsSchema_tDBOutput_3.next()) {
								defaultSchema_tDBOutput_3 = rsSchema_tDBOutput_3.getString("current_schema");
							}
						}
					}
					while (rsTable_tDBOutput_3.next()) {
						String table_tDBOutput_3 = rsTable_tDBOutput_3.getString("TABLE_NAME");
						String schema_tDBOutput_3 = rsTable_tDBOutput_3.getString("TABLE_SCHEM");
						if (table_tDBOutput_3.equals(("person")) && (schema_tDBOutput_3.equals(dbschema_tDBOutput_3)
								|| ((dbschema_tDBOutput_3 == null || dbschema_tDBOutput_3.trim().length() == 0)
										&& defaultSchema_tDBOutput_3.equals(schema_tDBOutput_3)))) {
							whetherExist_tDBOutput_3 = true;
							break;
						}
					}
				}
				if (whetherExist_tDBOutput_3) {
					try (java.sql.Statement stmtDrop_tDBOutput_3 = conn_tDBOutput_3.createStatement()) {
						stmtDrop_tDBOutput_3.execute("DROP TABLE \"" + tableName_tDBOutput_3 + "\"");
					}
				}
				try (java.sql.Statement stmtCreate_tDBOutput_3 = conn_tDBOutput_3.createStatement()) {
					stmtCreate_tDBOutput_3.execute("CREATE TABLE \"" + tableName_tDBOutput_3
							+ "\"(\"person_id\" INT8  not null ,\"gender\" VARCHAR(20)  ,\"loyalty\" VARCHAR(20)  ,\"age\" INT4 ,primary key(\"person_id\"))");
				}
				String insert_tDBOutput_3 = "INSERT INTO \"" + tableName_tDBOutput_3
						+ "\" (\"person_id\",\"gender\",\"loyalty\",\"age\") VALUES (?,?,?,?)";

				java.sql.PreparedStatement pstmt_tDBOutput_3 = conn_tDBOutput_3.prepareStatement(insert_tDBOutput_3);
				resourceMap.put("pstmt_tDBOutput_3", pstmt_tDBOutput_3);

				/**
				 * [tDBOutput_3 begin ] stop
				 */

				/**
				 * [tUniqRow_1 begin ] start
				 */

				ok_Hash.put("tUniqRow_1", false);
				start_Hash.put("tUniqRow_1", System.currentTimeMillis());

				currentComponent = "tUniqRow_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "p");
				}

				int tos_count_tUniqRow_1 = 0;

				class KeyStruct_tUniqRow_1 {

					private static final int DEFAULT_HASHCODE = 1;
					private static final int PRIME = 31;
					private int hashCode = DEFAULT_HASHCODE;
					public boolean hashCodeDirty = true;

					String gender;
					String loyalty;
					Integer age;

					@Override
					public int hashCode() {
						if (this.hashCodeDirty) {
							final int prime = PRIME;
							int result = DEFAULT_HASHCODE;

							result = prime * result + ((this.gender == null) ? 0 : this.gender.hashCode());

							result = prime * result + ((this.loyalty == null) ? 0 : this.loyalty.hashCode());

							result = prime * result + ((this.age == null) ? 0 : this.age.hashCode());

							this.hashCode = result;
							this.hashCodeDirty = false;
						}
						return this.hashCode;
					}

					@Override
					public boolean equals(Object obj) {
						if (this == obj)
							return true;
						if (obj == null)
							return false;
						if (getClass() != obj.getClass())
							return false;
						final KeyStruct_tUniqRow_1 other = (KeyStruct_tUniqRow_1) obj;

						if (this.gender == null) {
							if (other.gender != null)
								return false;

						} else if (!this.gender.equals(other.gender))

							return false;

						if (this.loyalty == null) {
							if (other.loyalty != null)
								return false;

						} else if (!this.loyalty.equals(other.loyalty))

							return false;

						if (this.age == null) {
							if (other.age != null)
								return false;

						} else if (!this.age.equals(other.age))

							return false;

						return true;
					}

				}

				int nb_uniques_tUniqRow_1 = 0;
				int nb_duplicates_tUniqRow_1 = 0;
				KeyStruct_tUniqRow_1 finder_tUniqRow_1 = new KeyStruct_tUniqRow_1();
				java.util.Set<KeyStruct_tUniqRow_1> keystUniqRow_1 = new java.util.HashSet<KeyStruct_tUniqRow_1>();

				/**
				 * [tUniqRow_1 begin ] stop
				 */

				/**
				 * [tMap_2 begin ] start
				 */

				ok_Hash.put("tMap_2", false);
				start_Hash.put("tMap_2", System.currentTimeMillis());

				currentComponent = "tMap_2";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row2");
				}

				int tos_count_tMap_2 = 0;

// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_2__Struct {
				}
				Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
// ###############################

// ###############################
// # Outputs initialization
				pStruct p_tmp = new pStruct();
// ###############################

				/**
				 * [tMap_2 begin ] stop
				 */

				/**
				 * [tAddCRCRow_1 begin ] start
				 */

				ok_Hash.put("tAddCRCRow_1", false);
				start_Hash.put("tAddCRCRow_1", System.currentTimeMillis());

				currentComponent = "tAddCRCRow_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "person");
				}

				int tos_count_tAddCRCRow_1 = 0;

				int nb_line_tAddCRCRow_1 = 0;

				/**
				 * [tAddCRCRow_1 begin ] stop
				 */

				/**
				 * [tDBOutput_2 begin ] start
				 */

				ok_Hash.put("tDBOutput_2", false);
				start_Hash.put("tDBOutput_2", System.currentTimeMillis());

				currentComponent = "tDBOutput_2";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row5");
				}

				int tos_count_tDBOutput_2 = 0;

				String dbschema_tDBOutput_2 = null;
				dbschema_tDBOutput_2 = "";

				String tableName_tDBOutput_2 = null;
				if (dbschema_tDBOutput_2 == null || dbschema_tDBOutput_2.trim().length() == 0) {
					tableName_tDBOutput_2 = ("flight");
				} else {
					tableName_tDBOutput_2 = dbschema_tDBOutput_2 + "\".\"" + ("flight");
				}

				int nb_line_tDBOutput_2 = 0;
				int nb_line_update_tDBOutput_2 = 0;
				int nb_line_inserted_tDBOutput_2 = 0;
				int nb_line_deleted_tDBOutput_2 = 0;
				int nb_line_rejected_tDBOutput_2 = 0;

				int deletedCount_tDBOutput_2 = 0;
				int updatedCount_tDBOutput_2 = 0;
				int insertedCount_tDBOutput_2 = 0;
				int rejectedCount_tDBOutput_2 = 0;

				boolean whetherReject_tDBOutput_2 = false;

				java.sql.Connection conn_tDBOutput_2 = null;
				String dbUser_tDBOutput_2 = null;

				java.lang.Class.forName("org.postgresql.Driver");

				String url_tDBOutput_2 = "jdbc:postgresql://" + "localhost" + ":" + "5432" + "/" + "talend";
				dbUser_tDBOutput_2 = "postgres";

				final String decryptedPassword_tDBOutput_2 = routines.system.PasswordEncryptUtil
						.decryptPassword("enc:routine.encryption.key.v1:FI8HhUSOB52w5scsKNWVOJN+iIDXCSQHmCBHHA==");

				String dbPwd_tDBOutput_2 = decryptedPassword_tDBOutput_2;

				conn_tDBOutput_2 = java.sql.DriverManager.getConnection(url_tDBOutput_2, dbUser_tDBOutput_2,
						dbPwd_tDBOutput_2);

				resourceMap.put("conn_tDBOutput_2", conn_tDBOutput_2);
				conn_tDBOutput_2.setAutoCommit(false);
				int commitEvery_tDBOutput_2 = 10000;
				int commitCounter_tDBOutput_2 = 0;

				int batchSize_tDBOutput_2 = 10000;
				int batchSizeCounter_tDBOutput_2 = 0;

				int count_tDBOutput_2 = 0;
				java.sql.DatabaseMetaData dbMetaData_tDBOutput_2 = conn_tDBOutput_2.getMetaData();
				boolean whetherExist_tDBOutput_2 = false;
				try (java.sql.ResultSet rsTable_tDBOutput_2 = dbMetaData_tDBOutput_2.getTables(null, null, null,
						new String[] { "TABLE" })) {
					String defaultSchema_tDBOutput_2 = "public";
					if (dbschema_tDBOutput_2 == null || dbschema_tDBOutput_2.trim().length() == 0) {
						try (java.sql.Statement stmtSchema_tDBOutput_2 = conn_tDBOutput_2.createStatement();
								java.sql.ResultSet rsSchema_tDBOutput_2 = stmtSchema_tDBOutput_2
										.executeQuery("select current_schema() ")) {
							while (rsSchema_tDBOutput_2.next()) {
								defaultSchema_tDBOutput_2 = rsSchema_tDBOutput_2.getString("current_schema");
							}
						}
					}
					while (rsTable_tDBOutput_2.next()) {
						String table_tDBOutput_2 = rsTable_tDBOutput_2.getString("TABLE_NAME");
						String schema_tDBOutput_2 = rsTable_tDBOutput_2.getString("TABLE_SCHEM");
						if (table_tDBOutput_2.equals(("flight")) && (schema_tDBOutput_2.equals(dbschema_tDBOutput_2)
								|| ((dbschema_tDBOutput_2 == null || dbschema_tDBOutput_2.trim().length() == 0)
										&& defaultSchema_tDBOutput_2.equals(schema_tDBOutput_2)))) {
							whetherExist_tDBOutput_2 = true;
							break;
						}
					}
				}
				if (whetherExist_tDBOutput_2) {
					try (java.sql.Statement stmtDrop_tDBOutput_2 = conn_tDBOutput_2.createStatement()) {
						stmtDrop_tDBOutput_2.execute("DROP TABLE \"" + tableName_tDBOutput_2 + "\"");
					}
				}
				try (java.sql.Statement stmtCreate_tDBOutput_2 = conn_tDBOutput_2.createStatement()) {
					stmtCreate_tDBOutput_2.execute("CREATE TABLE \"" + tableName_tDBOutput_2
							+ "\"(\"flight_id\" INT8  not null ,\"distance\" INT4 ,\"departure_delay\" INT4 ,\"arrival_delay\" INT4 ,primary key(\"flight_id\"))");
				}
				String insert_tDBOutput_2 = "INSERT INTO \"" + tableName_tDBOutput_2
						+ "\" (\"flight_id\",\"distance\",\"departure_delay\",\"arrival_delay\") VALUES (?,?,?,?)";

				java.sql.PreparedStatement pstmt_tDBOutput_2 = conn_tDBOutput_2.prepareStatement(insert_tDBOutput_2);
				resourceMap.put("pstmt_tDBOutput_2", pstmt_tDBOutput_2);

				/**
				 * [tDBOutput_2 begin ] stop
				 */

				/**
				 * [tUniqRow_2 begin ] start
				 */

				ok_Hash.put("tUniqRow_2", false);
				start_Hash.put("tUniqRow_2", System.currentTimeMillis());

				currentComponent = "tUniqRow_2";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "f");
				}

				int tos_count_tUniqRow_2 = 0;

				class KeyStruct_tUniqRow_2 {

					private static final int DEFAULT_HASHCODE = 1;
					private static final int PRIME = 31;
					private int hashCode = DEFAULT_HASHCODE;
					public boolean hashCodeDirty = true;

					Integer distance;
					Integer departure_delay;
					Integer arrival_delay;

					@Override
					public int hashCode() {
						if (this.hashCodeDirty) {
							final int prime = PRIME;
							int result = DEFAULT_HASHCODE;

							result = prime * result + ((this.distance == null) ? 0 : this.distance.hashCode());

							result = prime * result
									+ ((this.departure_delay == null) ? 0 : this.departure_delay.hashCode());

							result = prime * result
									+ ((this.arrival_delay == null) ? 0 : this.arrival_delay.hashCode());

							this.hashCode = result;
							this.hashCodeDirty = false;
						}
						return this.hashCode;
					}

					@Override
					public boolean equals(Object obj) {
						if (this == obj)
							return true;
						if (obj == null)
							return false;
						if (getClass() != obj.getClass())
							return false;
						final KeyStruct_tUniqRow_2 other = (KeyStruct_tUniqRow_2) obj;

						if (this.distance == null) {
							if (other.distance != null)
								return false;

						} else if (!this.distance.equals(other.distance))

							return false;

						if (this.departure_delay == null) {
							if (other.departure_delay != null)
								return false;

						} else if (!this.departure_delay.equals(other.departure_delay))

							return false;

						if (this.arrival_delay == null) {
							if (other.arrival_delay != null)
								return false;

						} else if (!this.arrival_delay.equals(other.arrival_delay))

							return false;

						return true;
					}

				}

				int nb_uniques_tUniqRow_2 = 0;
				int nb_duplicates_tUniqRow_2 = 0;
				KeyStruct_tUniqRow_2 finder_tUniqRow_2 = new KeyStruct_tUniqRow_2();
				java.util.Set<KeyStruct_tUniqRow_2> keystUniqRow_2 = new java.util.HashSet<KeyStruct_tUniqRow_2>();

				/**
				 * [tUniqRow_2 begin ] stop
				 */

				/**
				 * [tMap_3 begin ] start
				 */

				ok_Hash.put("tMap_3", false);
				start_Hash.put("tMap_3", System.currentTimeMillis());

				currentComponent = "tMap_3";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row4");
				}

				int tos_count_tMap_3 = 0;

// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_3__Struct {
				}
				Var__tMap_3__Struct Var__tMap_3 = new Var__tMap_3__Struct();
// ###############################

// ###############################
// # Outputs initialization
				fStruct f_tmp = new fStruct();
// ###############################

				/**
				 * [tMap_3 begin ] stop
				 */

				/**
				 * [tAddCRCRow_2 begin ] start
				 */

				ok_Hash.put("tAddCRCRow_2", false);
				start_Hash.put("tAddCRCRow_2", System.currentTimeMillis());

				currentComponent = "tAddCRCRow_2";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "flight");
				}

				int tos_count_tAddCRCRow_2 = 0;

				int nb_line_tAddCRCRow_2 = 0;

				/**
				 * [tAddCRCRow_2 begin ] stop
				 */

				/**
				 * [tDBOutput_4 begin ] start
				 */

				ok_Hash.put("tDBOutput_4", false);
				start_Hash.put("tDBOutput_4", System.currentTimeMillis());

				currentComponent = "tDBOutput_4";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row8");
				}

				int tos_count_tDBOutput_4 = 0;

				String dbschema_tDBOutput_4 = null;
				dbschema_tDBOutput_4 = "";

				String tableName_tDBOutput_4 = null;
				if (dbschema_tDBOutput_4 == null || dbschema_tDBOutput_4.trim().length() == 0) {
					tableName_tDBOutput_4 = ("satisfaction");
				} else {
					tableName_tDBOutput_4 = dbschema_tDBOutput_4 + "\".\"" + ("satisfaction");
				}

				int nb_line_tDBOutput_4 = 0;
				int nb_line_update_tDBOutput_4 = 0;
				int nb_line_inserted_tDBOutput_4 = 0;
				int nb_line_deleted_tDBOutput_4 = 0;
				int nb_line_rejected_tDBOutput_4 = 0;

				int deletedCount_tDBOutput_4 = 0;
				int updatedCount_tDBOutput_4 = 0;
				int insertedCount_tDBOutput_4 = 0;
				int rejectedCount_tDBOutput_4 = 0;

				boolean whetherReject_tDBOutput_4 = false;

				java.sql.Connection conn_tDBOutput_4 = null;
				String dbUser_tDBOutput_4 = null;

				java.lang.Class.forName("org.postgresql.Driver");

				String url_tDBOutput_4 = "jdbc:postgresql://" + "localhost" + ":" + "5432" + "/" + "talend";
				dbUser_tDBOutput_4 = "postgres";

				final String decryptedPassword_tDBOutput_4 = routines.system.PasswordEncryptUtil
						.decryptPassword("enc:routine.encryption.key.v1:ul72g+xsDeaiULkTrdyhCb+LxzI/Eq7ZEzWS0w==");

				String dbPwd_tDBOutput_4 = decryptedPassword_tDBOutput_4;

				conn_tDBOutput_4 = java.sql.DriverManager.getConnection(url_tDBOutput_4, dbUser_tDBOutput_4,
						dbPwd_tDBOutput_4);

				resourceMap.put("conn_tDBOutput_4", conn_tDBOutput_4);
				conn_tDBOutput_4.setAutoCommit(false);
				int commitEvery_tDBOutput_4 = 10000;
				int commitCounter_tDBOutput_4 = 0;

				int batchSize_tDBOutput_4 = 10000;
				int batchSizeCounter_tDBOutput_4 = 0;

				int count_tDBOutput_4 = 0;
				java.sql.DatabaseMetaData dbMetaData_tDBOutput_4 = conn_tDBOutput_4.getMetaData();
				boolean whetherExist_tDBOutput_4 = false;
				try (java.sql.ResultSet rsTable_tDBOutput_4 = dbMetaData_tDBOutput_4.getTables(null, null, null,
						new String[] { "TABLE" })) {
					String defaultSchema_tDBOutput_4 = "public";
					if (dbschema_tDBOutput_4 == null || dbschema_tDBOutput_4.trim().length() == 0) {
						try (java.sql.Statement stmtSchema_tDBOutput_4 = conn_tDBOutput_4.createStatement();
								java.sql.ResultSet rsSchema_tDBOutput_4 = stmtSchema_tDBOutput_4
										.executeQuery("select current_schema() ")) {
							while (rsSchema_tDBOutput_4.next()) {
								defaultSchema_tDBOutput_4 = rsSchema_tDBOutput_4.getString("current_schema");
							}
						}
					}
					while (rsTable_tDBOutput_4.next()) {
						String table_tDBOutput_4 = rsTable_tDBOutput_4.getString("TABLE_NAME");
						String schema_tDBOutput_4 = rsTable_tDBOutput_4.getString("TABLE_SCHEM");
						if (table_tDBOutput_4.equals(("satisfaction"))
								&& (schema_tDBOutput_4.equals(dbschema_tDBOutput_4)
										|| ((dbschema_tDBOutput_4 == null || dbschema_tDBOutput_4.trim().length() == 0)
												&& defaultSchema_tDBOutput_4.equals(schema_tDBOutput_4)))) {
							whetherExist_tDBOutput_4 = true;
							break;
						}
					}
				}
				if (whetherExist_tDBOutput_4) {
					try (java.sql.Statement stmtDrop_tDBOutput_4 = conn_tDBOutput_4.createStatement()) {
						stmtDrop_tDBOutput_4.execute("DROP TABLE \"" + tableName_tDBOutput_4 + "\"");
					}
				}
				try (java.sql.Statement stmtCreate_tDBOutput_4 = conn_tDBOutput_4.createStatement()) {
					stmtCreate_tDBOutput_4.execute("CREATE TABLE \"" + tableName_tDBOutput_4
							+ "\"(\"satisfaction_id\" INT8  not null ,\"seat_comfort\" INT2 ,\"time_convenience\" INT2 ,\"food\" INT2 ,\"gate_location\" INT2 ,\"wifi_service\" INT2 ,\"entertainment\" INT2 ,\"online_support\" INT2 ,\"booking\" INT2 ,\"onboard_service\" INT2 ,\"leg_room_service\" INT2 ,\"baggage_handling\" INT2 ,\"checkin\" INT2 ,\"cleanliness\" INT2 ,primary key(\"satisfaction_id\"))");
				}
				String insert_tDBOutput_4 = "INSERT INTO \"" + tableName_tDBOutput_4
						+ "\" (\"satisfaction_id\",\"seat_comfort\",\"time_convenience\",\"food\",\"gate_location\",\"wifi_service\",\"entertainment\",\"online_support\",\"booking\",\"onboard_service\",\"leg_room_service\",\"baggage_handling\",\"checkin\",\"cleanliness\") VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?)";

				java.sql.PreparedStatement pstmt_tDBOutput_4 = conn_tDBOutput_4.prepareStatement(insert_tDBOutput_4);
				resourceMap.put("pstmt_tDBOutput_4", pstmt_tDBOutput_4);

				/**
				 * [tDBOutput_4 begin ] stop
				 */

				/**
				 * [tUniqRow_3 begin ] start
				 */

				ok_Hash.put("tUniqRow_3", false);
				start_Hash.put("tUniqRow_3", System.currentTimeMillis());

				currentComponent = "tUniqRow_3";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "s");
				}

				int tos_count_tUniqRow_3 = 0;

				class KeyStruct_tUniqRow_3 {

					private static final int DEFAULT_HASHCODE = 1;
					private static final int PRIME = 31;
					private int hashCode = DEFAULT_HASHCODE;
					public boolean hashCodeDirty = true;

					Integer seat_comfort;
					Integer time_convenience;
					Integer food;
					Integer gate_location;
					Integer wifi_service;
					Integer entertainment;
					Integer online_support;
					Integer booking;
					Integer onboard_service;
					Integer leg_room_service;
					Integer baggage_handling;
					Integer checkin;
					Integer cleanliness;

					@Override
					public int hashCode() {
						if (this.hashCodeDirty) {
							final int prime = PRIME;
							int result = DEFAULT_HASHCODE;

							result = prime * result + ((this.seat_comfort == null) ? 0 : this.seat_comfort.hashCode());

							result = prime * result
									+ ((this.time_convenience == null) ? 0 : this.time_convenience.hashCode());

							result = prime * result + ((this.food == null) ? 0 : this.food.hashCode());

							result = prime * result
									+ ((this.gate_location == null) ? 0 : this.gate_location.hashCode());

							result = prime * result + ((this.wifi_service == null) ? 0 : this.wifi_service.hashCode());

							result = prime * result
									+ ((this.entertainment == null) ? 0 : this.entertainment.hashCode());

							result = prime * result
									+ ((this.online_support == null) ? 0 : this.online_support.hashCode());

							result = prime * result + ((this.booking == null) ? 0 : this.booking.hashCode());

							result = prime * result
									+ ((this.onboard_service == null) ? 0 : this.onboard_service.hashCode());

							result = prime * result
									+ ((this.leg_room_service == null) ? 0 : this.leg_room_service.hashCode());

							result = prime * result
									+ ((this.baggage_handling == null) ? 0 : this.baggage_handling.hashCode());

							result = prime * result + ((this.checkin == null) ? 0 : this.checkin.hashCode());

							result = prime * result + ((this.cleanliness == null) ? 0 : this.cleanliness.hashCode());

							this.hashCode = result;
							this.hashCodeDirty = false;
						}
						return this.hashCode;
					}

					@Override
					public boolean equals(Object obj) {
						if (this == obj)
							return true;
						if (obj == null)
							return false;
						if (getClass() != obj.getClass())
							return false;
						final KeyStruct_tUniqRow_3 other = (KeyStruct_tUniqRow_3) obj;

						if (this.seat_comfort == null) {
							if (other.seat_comfort != null)
								return false;

						} else if (!this.seat_comfort.equals(other.seat_comfort))

							return false;

						if (this.time_convenience == null) {
							if (other.time_convenience != null)
								return false;

						} else if (!this.time_convenience.equals(other.time_convenience))

							return false;

						if (this.food == null) {
							if (other.food != null)
								return false;

						} else if (!this.food.equals(other.food))

							return false;

						if (this.gate_location == null) {
							if (other.gate_location != null)
								return false;

						} else if (!this.gate_location.equals(other.gate_location))

							return false;

						if (this.wifi_service == null) {
							if (other.wifi_service != null)
								return false;

						} else if (!this.wifi_service.equals(other.wifi_service))

							return false;

						if (this.entertainment == null) {
							if (other.entertainment != null)
								return false;

						} else if (!this.entertainment.equals(other.entertainment))

							return false;

						if (this.online_support == null) {
							if (other.online_support != null)
								return false;

						} else if (!this.online_support.equals(other.online_support))

							return false;

						if (this.booking == null) {
							if (other.booking != null)
								return false;

						} else if (!this.booking.equals(other.booking))

							return false;

						if (this.onboard_service == null) {
							if (other.onboard_service != null)
								return false;

						} else if (!this.onboard_service.equals(other.onboard_service))

							return false;

						if (this.leg_room_service == null) {
							if (other.leg_room_service != null)
								return false;

						} else if (!this.leg_room_service.equals(other.leg_room_service))

							return false;

						if (this.baggage_handling == null) {
							if (other.baggage_handling != null)
								return false;

						} else if (!this.baggage_handling.equals(other.baggage_handling))

							return false;

						if (this.checkin == null) {
							if (other.checkin != null)
								return false;

						} else if (!this.checkin.equals(other.checkin))

							return false;

						if (this.cleanliness == null) {
							if (other.cleanliness != null)
								return false;

						} else if (!this.cleanliness.equals(other.cleanliness))

							return false;

						return true;
					}

				}

				int nb_uniques_tUniqRow_3 = 0;
				int nb_duplicates_tUniqRow_3 = 0;
				KeyStruct_tUniqRow_3 finder_tUniqRow_3 = new KeyStruct_tUniqRow_3();
				java.util.Set<KeyStruct_tUniqRow_3> keystUniqRow_3 = new java.util.HashSet<KeyStruct_tUniqRow_3>();

				/**
				 * [tUniqRow_3 begin ] stop
				 */

				/**
				 * [tMap_4 begin ] start
				 */

				ok_Hash.put("tMap_4", false);
				start_Hash.put("tMap_4", System.currentTimeMillis());

				currentComponent = "tMap_4";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row6");
				}

				int tos_count_tMap_4 = 0;

// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_4__Struct {
				}
				Var__tMap_4__Struct Var__tMap_4 = new Var__tMap_4__Struct();
// ###############################

// ###############################
// # Outputs initialization
				sStruct s_tmp = new sStruct();
// ###############################

				/**
				 * [tMap_4 begin ] stop
				 */

				/**
				 * [tAddCRCRow_3 begin ] start
				 */

				ok_Hash.put("tAddCRCRow_3", false);
				start_Hash.put("tAddCRCRow_3", System.currentTimeMillis());

				currentComponent = "tAddCRCRow_3";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "satisfaction");
				}

				int tos_count_tAddCRCRow_3 = 0;

				int nb_line_tAddCRCRow_3 = 0;

				/**
				 * [tAddCRCRow_3 begin ] stop
				 */

				/**
				 * [tDBOutput_5 begin ] start
				 */

				ok_Hash.put("tDBOutput_5", false);
				start_Hash.put("tDBOutput_5", System.currentTimeMillis());

				currentComponent = "tDBOutput_5";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row9");
				}

				int tos_count_tDBOutput_5 = 0;

				String dbschema_tDBOutput_5 = null;
				dbschema_tDBOutput_5 = "";

				String tableName_tDBOutput_5 = null;
				if (dbschema_tDBOutput_5 == null || dbschema_tDBOutput_5.trim().length() == 0) {
					tableName_tDBOutput_5 = ("ticket");
				} else {
					tableName_tDBOutput_5 = dbschema_tDBOutput_5 + "\".\"" + ("ticket");
				}

				int nb_line_tDBOutput_5 = 0;
				int nb_line_update_tDBOutput_5 = 0;
				int nb_line_inserted_tDBOutput_5 = 0;
				int nb_line_deleted_tDBOutput_5 = 0;
				int nb_line_rejected_tDBOutput_5 = 0;

				int deletedCount_tDBOutput_5 = 0;
				int updatedCount_tDBOutput_5 = 0;
				int insertedCount_tDBOutput_5 = 0;
				int rejectedCount_tDBOutput_5 = 0;

				boolean whetherReject_tDBOutput_5 = false;

				java.sql.Connection conn_tDBOutput_5 = null;
				String dbUser_tDBOutput_5 = null;

				java.lang.Class.forName("org.postgresql.Driver");

				String url_tDBOutput_5 = "jdbc:postgresql://" + "localhost" + ":" + "5432" + "/" + "talend";
				dbUser_tDBOutput_5 = "postgres";

				final String decryptedPassword_tDBOutput_5 = routines.system.PasswordEncryptUtil
						.decryptPassword("enc:routine.encryption.key.v1:FwU4JHWYDIbCHIu8fb7B97PmAj/vhqHPGsG7hg==");

				String dbPwd_tDBOutput_5 = decryptedPassword_tDBOutput_5;

				conn_tDBOutput_5 = java.sql.DriverManager.getConnection(url_tDBOutput_5, dbUser_tDBOutput_5,
						dbPwd_tDBOutput_5);

				resourceMap.put("conn_tDBOutput_5", conn_tDBOutput_5);
				conn_tDBOutput_5.setAutoCommit(false);
				int commitEvery_tDBOutput_5 = 10000;
				int commitCounter_tDBOutput_5 = 0;

				int batchSize_tDBOutput_5 = 10000;
				int batchSizeCounter_tDBOutput_5 = 0;

				int count_tDBOutput_5 = 0;
				java.sql.DatabaseMetaData dbMetaData_tDBOutput_5 = conn_tDBOutput_5.getMetaData();
				boolean whetherExist_tDBOutput_5 = false;
				try (java.sql.ResultSet rsTable_tDBOutput_5 = dbMetaData_tDBOutput_5.getTables(null, null, null,
						new String[] { "TABLE" })) {
					String defaultSchema_tDBOutput_5 = "public";
					if (dbschema_tDBOutput_5 == null || dbschema_tDBOutput_5.trim().length() == 0) {
						try (java.sql.Statement stmtSchema_tDBOutput_5 = conn_tDBOutput_5.createStatement();
								java.sql.ResultSet rsSchema_tDBOutput_5 = stmtSchema_tDBOutput_5
										.executeQuery("select current_schema() ")) {
							while (rsSchema_tDBOutput_5.next()) {
								defaultSchema_tDBOutput_5 = rsSchema_tDBOutput_5.getString("current_schema");
							}
						}
					}
					while (rsTable_tDBOutput_5.next()) {
						String table_tDBOutput_5 = rsTable_tDBOutput_5.getString("TABLE_NAME");
						String schema_tDBOutput_5 = rsTable_tDBOutput_5.getString("TABLE_SCHEM");
						if (table_tDBOutput_5.equals(("ticket")) && (schema_tDBOutput_5.equals(dbschema_tDBOutput_5)
								|| ((dbschema_tDBOutput_5 == null || dbschema_tDBOutput_5.trim().length() == 0)
										&& defaultSchema_tDBOutput_5.equals(schema_tDBOutput_5)))) {
							whetherExist_tDBOutput_5 = true;
							break;
						}
					}
				}
				if (whetherExist_tDBOutput_5) {
					try (java.sql.Statement stmtDrop_tDBOutput_5 = conn_tDBOutput_5.createStatement()) {
						stmtDrop_tDBOutput_5.execute("DROP TABLE \"" + tableName_tDBOutput_5 + "\"");
					}
				}
				try (java.sql.Statement stmtCreate_tDBOutput_5 = conn_tDBOutput_5.createStatement()) {
					stmtCreate_tDBOutput_5.execute("CREATE TABLE \"" + tableName_tDBOutput_5
							+ "\"(\"ticket_id\" INT8  not null ,\"type_travel\" VARCHAR(20)  ,\"flight_class\" VARCHAR(20)  ,primary key(\"ticket_id\"))");
				}
				String insert_tDBOutput_5 = "INSERT INTO \"" + tableName_tDBOutput_5
						+ "\" (\"ticket_id\",\"type_travel\",\"flight_class\") VALUES (?,?,?)";

				java.sql.PreparedStatement pstmt_tDBOutput_5 = conn_tDBOutput_5.prepareStatement(insert_tDBOutput_5);
				resourceMap.put("pstmt_tDBOutput_5", pstmt_tDBOutput_5);

				/**
				 * [tDBOutput_5 begin ] stop
				 */

				/**
				 * [tUniqRow_4 begin ] start
				 */

				ok_Hash.put("tUniqRow_4", false);
				start_Hash.put("tUniqRow_4", System.currentTimeMillis());

				currentComponent = "tUniqRow_4";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "t");
				}

				int tos_count_tUniqRow_4 = 0;

				class KeyStruct_tUniqRow_4 {

					private static final int DEFAULT_HASHCODE = 1;
					private static final int PRIME = 31;
					private int hashCode = DEFAULT_HASHCODE;
					public boolean hashCodeDirty = true;

					String type_travel;
					String flight_class;

					@Override
					public int hashCode() {
						if (this.hashCodeDirty) {
							final int prime = PRIME;
							int result = DEFAULT_HASHCODE;

							result = prime * result + ((this.type_travel == null) ? 0 : this.type_travel.hashCode());

							result = prime * result + ((this.flight_class == null) ? 0 : this.flight_class.hashCode());

							this.hashCode = result;
							this.hashCodeDirty = false;
						}
						return this.hashCode;
					}

					@Override
					public boolean equals(Object obj) {
						if (this == obj)
							return true;
						if (obj == null)
							return false;
						if (getClass() != obj.getClass())
							return false;
						final KeyStruct_tUniqRow_4 other = (KeyStruct_tUniqRow_4) obj;

						if (this.type_travel == null) {
							if (other.type_travel != null)
								return false;

						} else if (!this.type_travel.equals(other.type_travel))

							return false;

						if (this.flight_class == null) {
							if (other.flight_class != null)
								return false;

						} else if (!this.flight_class.equals(other.flight_class))

							return false;

						return true;
					}

				}

				int nb_uniques_tUniqRow_4 = 0;
				int nb_duplicates_tUniqRow_4 = 0;
				KeyStruct_tUniqRow_4 finder_tUniqRow_4 = new KeyStruct_tUniqRow_4();
				java.util.Set<KeyStruct_tUniqRow_4> keystUniqRow_4 = new java.util.HashSet<KeyStruct_tUniqRow_4>();

				/**
				 * [tUniqRow_4 begin ] stop
				 */

				/**
				 * [tMap_5 begin ] start
				 */

				ok_Hash.put("tMap_5", false);
				start_Hash.put("tMap_5", System.currentTimeMillis());

				currentComponent = "tMap_5";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row7");
				}

				int tos_count_tMap_5 = 0;

// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_5__Struct {
				}
				Var__tMap_5__Struct Var__tMap_5 = new Var__tMap_5__Struct();
// ###############################

// ###############################
// # Outputs initialization
				tStruct t_tmp = new tStruct();
// ###############################

				/**
				 * [tMap_5 begin ] stop
				 */

				/**
				 * [tAddCRCRow_4 begin ] start
				 */

				ok_Hash.put("tAddCRCRow_4", false);
				start_Hash.put("tAddCRCRow_4", System.currentTimeMillis());

				currentComponent = "tAddCRCRow_4";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "ticket");
				}

				int tos_count_tAddCRCRow_4 = 0;

				int nb_line_tAddCRCRow_4 = 0;

				/**
				 * [tAddCRCRow_4 begin ] stop
				 */

				/**
				 * [tMap_1 begin ] start
				 */

				ok_Hash.put("tMap_1", false);
				start_Hash.put("tMap_1", System.currentTimeMillis());

				currentComponent = "tMap_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row1");
				}

				int tos_count_tMap_1 = 0;

// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_1__Struct {
				}
				Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
				personStruct person_tmp = new personStruct();
				flightStruct flight_tmp = new flightStruct();
				satisfactionStruct satisfaction_tmp = new satisfactionStruct();
				ticketStruct ticket_tmp = new ticketStruct();
// ###############################

				/**
				 * [tMap_1 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_1 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_1", false);
				start_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_1";

				int tos_count_tFileInputDelimited_1 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_1 = new routines.system.RowState();

				int nb_line_tFileInputDelimited_1 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_1 = null;
				int limit_tFileInputDelimited_1 = -1;
				try {

					Object filename_tFileInputDelimited_1 = "/Users/dylanperdigao/Library/CloudStorage/OneDrive-dei.uc.pt/UC/UC-Cadeiras_do_Curso/Mestrado/Semestre_2/Business_Intelligence/BI-Project/Dataset/satisfaction.csv";
					if (filename_tFileInputDelimited_1 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_1 = 0, random_value_tFileInputDelimited_1 = -1;
						if (footer_value_tFileInputDelimited_1 > 0 || random_value_tFileInputDelimited_1 > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_1 = new org.talend.fileprocess.FileInputDelimited(
								"/Users/dylanperdigao/Library/CloudStorage/OneDrive-dei.uc.pt/UC/UC-Cadeiras_do_Curso/Mestrado/Semestre_2/Business_Intelligence/BI-Project/Dataset/satisfaction.csv",
								"UTF-8", ";", "\n", false, 1, 0, limit_tFileInputDelimited_1, -1, false);
					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_1 != null && fid_tFileInputDelimited_1.nextRecord()) {
						rowstate_tFileInputDelimited_1.reset();

						row1 = null;

						boolean whetherReject_tFileInputDelimited_1 = false;
						row1 = new row1Struct();
						try {

							int columnIndexWithD_tFileInputDelimited_1 = 0;

							String temp = "";

							columnIndexWithD_tFileInputDelimited_1 = 0;

							temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row1.id = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"id", "row1", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}

							} else {

								row1.id = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 1;

							row1.satisfaction_v2 = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 2;

							row1.Gender = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 3;

							row1.Customer_Type = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 4;

							temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row1.Age = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"Age", "row1", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}

							} else {

								row1.Age = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 5;

							row1.Type_of_Travel = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 6;

							row1.Flight_Class = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 7;

							temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row1.Flight_Distance = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"Flight_Distance", "row1", temp, ex_tFileInputDelimited_1),
											ex_tFileInputDelimited_1));
								}

							} else {

								row1.Flight_Distance = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 8;

							temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row1.Seat_comfort = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"Seat_comfort", "row1", temp, ex_tFileInputDelimited_1),
											ex_tFileInputDelimited_1));
								}

							} else {

								row1.Seat_comfort = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 9;

							temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row1.Departure_Arrival_time_convenient = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"Departure_Arrival_time_convenient", "row1", temp,
											ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}

							} else {

								row1.Departure_Arrival_time_convenient = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 10;

							temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row1.Food_and_drink = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"Food_and_drink", "row1", temp, ex_tFileInputDelimited_1),
											ex_tFileInputDelimited_1));
								}

							} else {

								row1.Food_and_drink = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 11;

							temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row1.Gate_location = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"Gate_location", "row1", temp, ex_tFileInputDelimited_1),
											ex_tFileInputDelimited_1));
								}

							} else {

								row1.Gate_location = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 12;

							temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row1.Inflight_wifi_service = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"Inflight_wifi_service", "row1", temp, ex_tFileInputDelimited_1),
											ex_tFileInputDelimited_1));
								}

							} else {

								row1.Inflight_wifi_service = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 13;

							temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row1.Inflight_entertainment = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"Inflight_entertainment", "row1", temp, ex_tFileInputDelimited_1),
											ex_tFileInputDelimited_1));
								}

							} else {

								row1.Inflight_entertainment = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 14;

							temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row1.Online_support = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"Online_support", "row1", temp, ex_tFileInputDelimited_1),
											ex_tFileInputDelimited_1));
								}

							} else {

								row1.Online_support = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 15;

							temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row1.Ease_of_Online_booking = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"Ease_of_Online_booking", "row1", temp, ex_tFileInputDelimited_1),
											ex_tFileInputDelimited_1));
								}

							} else {

								row1.Ease_of_Online_booking = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 16;

							temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row1.On_board_service = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"On_board_service", "row1", temp, ex_tFileInputDelimited_1),
											ex_tFileInputDelimited_1));
								}

							} else {

								row1.On_board_service = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 17;

							temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row1.Leg_room_service = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"Leg_room_service", "row1", temp, ex_tFileInputDelimited_1),
											ex_tFileInputDelimited_1));
								}

							} else {

								row1.Leg_room_service = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 18;

							temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row1.Baggage_handling = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"Baggage_handling", "row1", temp, ex_tFileInputDelimited_1),
											ex_tFileInputDelimited_1));
								}

							} else {

								row1.Baggage_handling = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 19;

							temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row1.Checkin_service = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"Checkin_service", "row1", temp, ex_tFileInputDelimited_1),
											ex_tFileInputDelimited_1));
								}

							} else {

								row1.Checkin_service = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 20;

							temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row1.Cleanliness = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"Cleanliness", "row1", temp, ex_tFileInputDelimited_1),
											ex_tFileInputDelimited_1));
								}

							} else {

								row1.Cleanliness = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 21;

							temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row1.Online_boarding = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"Online_boarding", "row1", temp, ex_tFileInputDelimited_1),
											ex_tFileInputDelimited_1));
								}

							} else {

								row1.Online_boarding = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 22;

							temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row1.Departure_Delay_in_Minutes = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"Departure_Delay_in_Minutes", "row1", temp, ex_tFileInputDelimited_1),
											ex_tFileInputDelimited_1));
								}

							} else {

								row1.Departure_Delay_in_Minutes = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 23;

							temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row1.Arrival_Delay_in_Minutes = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"Arrival_Delay_in_Minutes", "row1", temp, ex_tFileInputDelimited_1),
											ex_tFileInputDelimited_1));
								}

							} else {

								row1.Arrival_Delay_in_Minutes = null;

							}

							if (rowstate_tFileInputDelimited_1.getException() != null) {
								throw rowstate_tFileInputDelimited_1.getException();
							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_1 = true;

							System.err.println(e.getMessage());
							row1 = null;

						}

						/**
						 * [tFileInputDelimited_1 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_1 main ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						tos_count_tFileInputDelimited_1++;

						/**
						 * [tFileInputDelimited_1 main ] stop
						 */

						/**
						 * [tFileInputDelimited_1 process_data_begin ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						/**
						 * [tFileInputDelimited_1 process_data_begin ] stop
						 */
// Start of branch "row1"
						if (row1 != null) {

							/**
							 * [tMap_1 main ] start
							 */

							currentComponent = "tMap_1";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1, "row1");
							}

							boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_1 = false;
							boolean mainRowRejected_tMap_1 = false;

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
								// ###############################
								// # Output tables

								person = null;
								flight = null;
								satisfaction = null;
								ticket = null;

// # Output table : 'person'
								person_tmp.id = row1.id;
								person_tmp.gender = row1.Gender;
								person_tmp.loyalty = row1.Customer_Type;
								person_tmp.age = row1.Age;
								person = person_tmp;

// # Output table : 'flight'
								flight_tmp.id = row1.id;
								flight_tmp.distance = row1.Flight_Distance;
								flight_tmp.departure_delay = row1.Departure_Delay_in_Minutes;
								flight_tmp.arrival_delay = row1.Arrival_Delay_in_Minutes;
								flight = flight_tmp;

// # Output table : 'satisfaction'
								satisfaction_tmp.id = row1.id;
								satisfaction_tmp.seat_comfort = row1.Seat_comfort;
								satisfaction_tmp.time_convenience = row1.Departure_Arrival_time_convenient;
								satisfaction_tmp.food = row1.Food_and_drink;
								satisfaction_tmp.gate_location = row1.Gate_location;
								satisfaction_tmp.wifi_service = row1.Inflight_wifi_service;
								satisfaction_tmp.entertainment = row1.Inflight_entertainment;
								satisfaction_tmp.online_support = row1.Online_support;
								satisfaction_tmp.booking = row1.Ease_of_Online_booking;
								satisfaction_tmp.onboard_service = row1.On_board_service;
								satisfaction_tmp.leg_room_service = row1.Leg_room_service;
								satisfaction_tmp.baggage_handling = row1.Baggage_handling;
								satisfaction_tmp.checkin = row1.Checkin_service;
								satisfaction_tmp.cleanliness = row1.Cleanliness;
								satisfaction = satisfaction_tmp;

// # Output table : 'ticket'
								ticket_tmp.id = row1.id;
								ticket_tmp.type_travel = row1.Type_of_Travel;
								ticket_tmp.flight_class = row1.Flight_Class;
								ticket = ticket_tmp;
// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_1 = false;

							tos_count_tMap_1++;

							/**
							 * [tMap_1 main ] stop
							 */

							/**
							 * [tMap_1 process_data_begin ] start
							 */

							currentComponent = "tMap_1";

							/**
							 * [tMap_1 process_data_begin ] stop
							 */
// Start of branch "person"
							if (person != null) {

								/**
								 * [tAddCRCRow_1 main ] start
								 */

								currentComponent = "tAddCRCRow_1";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1, "person");
								}

								Long crcComputedValuetAddCRCRow_1 = null;
								StringBuilder strBuffer_tAddCRCRow_1 = new StringBuilder();
								strBuffer_tAddCRCRow_1.append(

										String.valueOf(person.id)

								);

								java.util.zip.CRC32 crc32tAddCRCRow_1 = new java.util.zip.CRC32();
								crc32tAddCRCRow_1.update(strBuffer_tAddCRCRow_1.toString().getBytes());
								crcComputedValuetAddCRCRow_1 = new Long(crc32tAddCRCRow_1.getValue());
								row2.id = person.id;
								row2.gender = person.gender;
								row2.loyalty = person.loyalty;
								row2.age = person.age;
								row2.CRC = crcComputedValuetAddCRCRow_1;
								nb_line_tAddCRCRow_1++;

								tos_count_tAddCRCRow_1++;

								/**
								 * [tAddCRCRow_1 main ] stop
								 */

								/**
								 * [tAddCRCRow_1 process_data_begin ] start
								 */

								currentComponent = "tAddCRCRow_1";

								/**
								 * [tAddCRCRow_1 process_data_begin ] stop
								 */

								/**
								 * [tMap_2 main ] start
								 */

								currentComponent = "tMap_2";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1, "row2");
								}

								boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;

								// ###############################
								// # Input tables (lookups)
								boolean rejectedInnerJoin_tMap_2 = false;
								boolean mainRowRejected_tMap_2 = false;

								// ###############################
								{ // start of Var scope

									// ###############################
									// # Vars tables

									Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
									// ###############################
									// # Output tables

									p = null;

// # Output table : 'p'
									p_tmp.person_id = row2.CRC;
									p_tmp.gender = row2.gender;
									p_tmp.loyalty = row2.loyalty;
									p_tmp.age = row2.age;
									p = p_tmp;
// ###############################

								} // end of Var scope

								rejectedInnerJoin_tMap_2 = false;

								tos_count_tMap_2++;

								/**
								 * [tMap_2 main ] stop
								 */

								/**
								 * [tMap_2 process_data_begin ] start
								 */

								currentComponent = "tMap_2";

								/**
								 * [tMap_2 process_data_begin ] stop
								 */
// Start of branch "p"
								if (p != null) {

									/**
									 * [tUniqRow_1 main ] start
									 */

									currentComponent = "tUniqRow_1";

									if (execStat) {
										runStat.updateStatOnConnection(iterateId, 1, 1, "p");
									}

									row3 = null;
									if (p.gender == null) {
										finder_tUniqRow_1.gender = null;
									} else {
										finder_tUniqRow_1.gender = p.gender.toLowerCase();
									}
									if (p.loyalty == null) {
										finder_tUniqRow_1.loyalty = null;
									} else {
										finder_tUniqRow_1.loyalty = p.loyalty.toLowerCase();
									}
									finder_tUniqRow_1.age = p.age;
									finder_tUniqRow_1.hashCodeDirty = true;
									if (!keystUniqRow_1.contains(finder_tUniqRow_1)) {
										KeyStruct_tUniqRow_1 new_tUniqRow_1 = new KeyStruct_tUniqRow_1();

										if (p.gender == null) {
											new_tUniqRow_1.gender = null;
										} else {
											new_tUniqRow_1.gender = p.gender.toLowerCase();
										}
										if (p.loyalty == null) {
											new_tUniqRow_1.loyalty = null;
										} else {
											new_tUniqRow_1.loyalty = p.loyalty.toLowerCase();
										}
										new_tUniqRow_1.age = p.age;

										keystUniqRow_1.add(new_tUniqRow_1);
										if (row3 == null) {

											row3 = new row3Struct();
										}
										row3.person_id = p.person_id;
										row3.gender = p.gender;
										row3.loyalty = p.loyalty;
										row3.age = p.age;
										nb_uniques_tUniqRow_1++;
									} else {
										nb_duplicates_tUniqRow_1++;
									}

									tos_count_tUniqRow_1++;

									/**
									 * [tUniqRow_1 main ] stop
									 */

									/**
									 * [tUniqRow_1 process_data_begin ] start
									 */

									currentComponent = "tUniqRow_1";

									/**
									 * [tUniqRow_1 process_data_begin ] stop
									 */
// Start of branch "row3"
									if (row3 != null) {

										/**
										 * [tDBOutput_3 main ] start
										 */

										currentComponent = "tDBOutput_3";

										if (execStat) {
											runStat.updateStatOnConnection(iterateId, 1, 1, "row3");
										}

										whetherReject_tDBOutput_3 = false;
										pstmt_tDBOutput_3.setLong(1, row3.person_id);

										if (row3.gender == null) {
											pstmt_tDBOutput_3.setNull(2, java.sql.Types.VARCHAR);
										} else {
											pstmt_tDBOutput_3.setString(2, row3.gender);
										}

										if (row3.loyalty == null) {
											pstmt_tDBOutput_3.setNull(3, java.sql.Types.VARCHAR);
										} else {
											pstmt_tDBOutput_3.setString(3, row3.loyalty);
										}

										if (row3.age == null) {
											pstmt_tDBOutput_3.setNull(4, java.sql.Types.INTEGER);
										} else {
											pstmt_tDBOutput_3.setInt(4, row3.age);
										}

										pstmt_tDBOutput_3.addBatch();
										nb_line_tDBOutput_3++;

										batchSizeCounter_tDBOutput_3++;

										if ((batchSize_tDBOutput_3 > 0)
												&& (batchSize_tDBOutput_3 <= batchSizeCounter_tDBOutput_3)) {
											try {
												int countSum_tDBOutput_3 = 0;

												for (int countEach_tDBOutput_3 : pstmt_tDBOutput_3.executeBatch()) {
													countSum_tDBOutput_3 += (countEach_tDBOutput_3 < 0 ? 0
															: countEach_tDBOutput_3);
												}

												insertedCount_tDBOutput_3 += countSum_tDBOutput_3;

												batchSizeCounter_tDBOutput_3 = 0;
											} catch (java.sql.BatchUpdateException e_tDBOutput_3) {
												java.sql.SQLException ne_tDBOutput_3 = e_tDBOutput_3.getNextException(),
														sqle_tDBOutput_3 = null;
												String errormessage_tDBOutput_3;
												if (ne_tDBOutput_3 != null) {
													// build new exception to provide the original cause
													sqle_tDBOutput_3 = new java.sql.SQLException(
															e_tDBOutput_3.getMessage() + "\ncaused by: "
																	+ ne_tDBOutput_3.getMessage(),
															ne_tDBOutput_3.getSQLState(), ne_tDBOutput_3.getErrorCode(),
															ne_tDBOutput_3);
													errormessage_tDBOutput_3 = sqle_tDBOutput_3.getMessage();
												} else {
													errormessage_tDBOutput_3 = e_tDBOutput_3.getMessage();
												}

												int countSum_tDBOutput_3 = 0;
												for (int countEach_tDBOutput_3 : e_tDBOutput_3.getUpdateCounts()) {
													countSum_tDBOutput_3 += (countEach_tDBOutput_3 < 0 ? 0
															: countEach_tDBOutput_3);
												}

												insertedCount_tDBOutput_3 += countSum_tDBOutput_3;

												System.err.println(errormessage_tDBOutput_3);

											}
										}

										commitCounter_tDBOutput_3++;
										if (commitEvery_tDBOutput_3 <= commitCounter_tDBOutput_3) {
											if ((batchSize_tDBOutput_3 > 0) && (batchSizeCounter_tDBOutput_3 > 0)) {
												try {
													int countSum_tDBOutput_3 = 0;

													for (int countEach_tDBOutput_3 : pstmt_tDBOutput_3.executeBatch()) {
														countSum_tDBOutput_3 += (countEach_tDBOutput_3 < 0 ? 0
																: countEach_tDBOutput_3);
													}

													insertedCount_tDBOutput_3 += countSum_tDBOutput_3;

													batchSizeCounter_tDBOutput_3 = 0;
												} catch (java.sql.BatchUpdateException e_tDBOutput_3) {
													java.sql.SQLException ne_tDBOutput_3 = e_tDBOutput_3
															.getNextException(), sqle_tDBOutput_3 = null;
													String errormessage_tDBOutput_3;
													if (ne_tDBOutput_3 != null) {
														// build new exception to provide the original cause
														sqle_tDBOutput_3 = new java.sql.SQLException(
																e_tDBOutput_3.getMessage() + "\ncaused by: "
																		+ ne_tDBOutput_3.getMessage(),
																ne_tDBOutput_3.getSQLState(),
																ne_tDBOutput_3.getErrorCode(), ne_tDBOutput_3);
														errormessage_tDBOutput_3 = sqle_tDBOutput_3.getMessage();
													} else {
														errormessage_tDBOutput_3 = e_tDBOutput_3.getMessage();
													}

													int countSum_tDBOutput_3 = 0;
													for (int countEach_tDBOutput_3 : e_tDBOutput_3.getUpdateCounts()) {
														countSum_tDBOutput_3 += (countEach_tDBOutput_3 < 0 ? 0
																: countEach_tDBOutput_3);
													}

													insertedCount_tDBOutput_3 += countSum_tDBOutput_3;

													System.err.println(errormessage_tDBOutput_3);

												}
											}
											conn_tDBOutput_3.commit();

											commitCounter_tDBOutput_3 = 0;
										}

										tos_count_tDBOutput_3++;

										/**
										 * [tDBOutput_3 main ] stop
										 */

										/**
										 * [tDBOutput_3 process_data_begin ] start
										 */

										currentComponent = "tDBOutput_3";

										/**
										 * [tDBOutput_3 process_data_begin ] stop
										 */

										/**
										 * [tDBOutput_3 process_data_end ] start
										 */

										currentComponent = "tDBOutput_3";

										/**
										 * [tDBOutput_3 process_data_end ] stop
										 */

									} // End of branch "row3"

									/**
									 * [tUniqRow_1 process_data_end ] start
									 */

									currentComponent = "tUniqRow_1";

									/**
									 * [tUniqRow_1 process_data_end ] stop
									 */

								} // End of branch "p"

								/**
								 * [tMap_2 process_data_end ] start
								 */

								currentComponent = "tMap_2";

								/**
								 * [tMap_2 process_data_end ] stop
								 */

								/**
								 * [tAddCRCRow_1 process_data_end ] start
								 */

								currentComponent = "tAddCRCRow_1";

								/**
								 * [tAddCRCRow_1 process_data_end ] stop
								 */

							} // End of branch "person"

// Start of branch "flight"
							if (flight != null) {

								/**
								 * [tAddCRCRow_2 main ] start
								 */

								currentComponent = "tAddCRCRow_2";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1, "flight");
								}

								Long crcComputedValuetAddCRCRow_2 = null;
								StringBuilder strBuffer_tAddCRCRow_2 = new StringBuilder();
								strBuffer_tAddCRCRow_2.append(

										String.valueOf(flight.id)

								);

								java.util.zip.CRC32 crc32tAddCRCRow_2 = new java.util.zip.CRC32();
								crc32tAddCRCRow_2.update(strBuffer_tAddCRCRow_2.toString().getBytes());
								crcComputedValuetAddCRCRow_2 = new Long(crc32tAddCRCRow_2.getValue());
								row4.id = flight.id;
								row4.distance = flight.distance;
								row4.departure_delay = flight.departure_delay;
								row4.arrival_delay = flight.arrival_delay;
								row4.CRC = crcComputedValuetAddCRCRow_2;
								nb_line_tAddCRCRow_2++;

								tos_count_tAddCRCRow_2++;

								/**
								 * [tAddCRCRow_2 main ] stop
								 */

								/**
								 * [tAddCRCRow_2 process_data_begin ] start
								 */

								currentComponent = "tAddCRCRow_2";

								/**
								 * [tAddCRCRow_2 process_data_begin ] stop
								 */

								/**
								 * [tMap_3 main ] start
								 */

								currentComponent = "tMap_3";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1, "row4");
								}

								boolean hasCasePrimitiveKeyWithNull_tMap_3 = false;

								// ###############################
								// # Input tables (lookups)
								boolean rejectedInnerJoin_tMap_3 = false;
								boolean mainRowRejected_tMap_3 = false;

								// ###############################
								{ // start of Var scope

									// ###############################
									// # Vars tables

									Var__tMap_3__Struct Var = Var__tMap_3;// ###############################
									// ###############################
									// # Output tables

									f = null;

// # Output table : 'f'
									f_tmp.flight_id = row4.CRC;
									f_tmp.distance = row4.distance;
									f_tmp.departure_delay = row4.departure_delay;
									f_tmp.arrival_delay = row4.arrival_delay;
									f = f_tmp;
// ###############################

								} // end of Var scope

								rejectedInnerJoin_tMap_3 = false;

								tos_count_tMap_3++;

								/**
								 * [tMap_3 main ] stop
								 */

								/**
								 * [tMap_3 process_data_begin ] start
								 */

								currentComponent = "tMap_3";

								/**
								 * [tMap_3 process_data_begin ] stop
								 */
// Start of branch "f"
								if (f != null) {

									/**
									 * [tUniqRow_2 main ] start
									 */

									currentComponent = "tUniqRow_2";

									if (execStat) {
										runStat.updateStatOnConnection(iterateId, 1, 1, "f");
									}

									row5 = null;
									finder_tUniqRow_2.distance = f.distance;
									finder_tUniqRow_2.departure_delay = f.departure_delay;
									finder_tUniqRow_2.arrival_delay = f.arrival_delay;
									finder_tUniqRow_2.hashCodeDirty = true;
									if (!keystUniqRow_2.contains(finder_tUniqRow_2)) {
										KeyStruct_tUniqRow_2 new_tUniqRow_2 = new KeyStruct_tUniqRow_2();

										new_tUniqRow_2.distance = f.distance;
										new_tUniqRow_2.departure_delay = f.departure_delay;
										new_tUniqRow_2.arrival_delay = f.arrival_delay;

										keystUniqRow_2.add(new_tUniqRow_2);
										if (row5 == null) {

											row5 = new row5Struct();
										}
										row5.flight_id = f.flight_id;
										row5.distance = f.distance;
										row5.departure_delay = f.departure_delay;
										row5.arrival_delay = f.arrival_delay;
										nb_uniques_tUniqRow_2++;
									} else {
										nb_duplicates_tUniqRow_2++;
									}

									tos_count_tUniqRow_2++;

									/**
									 * [tUniqRow_2 main ] stop
									 */

									/**
									 * [tUniqRow_2 process_data_begin ] start
									 */

									currentComponent = "tUniqRow_2";

									/**
									 * [tUniqRow_2 process_data_begin ] stop
									 */
// Start of branch "row5"
									if (row5 != null) {

										/**
										 * [tDBOutput_2 main ] start
										 */

										currentComponent = "tDBOutput_2";

										if (execStat) {
											runStat.updateStatOnConnection(iterateId, 1, 1, "row5");
										}

										whetherReject_tDBOutput_2 = false;
										pstmt_tDBOutput_2.setLong(1, row5.flight_id);

										if (row5.distance == null) {
											pstmt_tDBOutput_2.setNull(2, java.sql.Types.INTEGER);
										} else {
											pstmt_tDBOutput_2.setInt(2, row5.distance);
										}

										if (row5.departure_delay == null) {
											pstmt_tDBOutput_2.setNull(3, java.sql.Types.INTEGER);
										} else {
											pstmt_tDBOutput_2.setInt(3, row5.departure_delay);
										}

										if (row5.arrival_delay == null) {
											pstmt_tDBOutput_2.setNull(4, java.sql.Types.INTEGER);
										} else {
											pstmt_tDBOutput_2.setInt(4, row5.arrival_delay);
										}

										pstmt_tDBOutput_2.addBatch();
										nb_line_tDBOutput_2++;

										batchSizeCounter_tDBOutput_2++;

										if ((batchSize_tDBOutput_2 > 0)
												&& (batchSize_tDBOutput_2 <= batchSizeCounter_tDBOutput_2)) {
											try {
												int countSum_tDBOutput_2 = 0;

												for (int countEach_tDBOutput_2 : pstmt_tDBOutput_2.executeBatch()) {
													countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0
															: countEach_tDBOutput_2);
												}

												insertedCount_tDBOutput_2 += countSum_tDBOutput_2;

												batchSizeCounter_tDBOutput_2 = 0;
											} catch (java.sql.BatchUpdateException e_tDBOutput_2) {
												java.sql.SQLException ne_tDBOutput_2 = e_tDBOutput_2.getNextException(),
														sqle_tDBOutput_2 = null;
												String errormessage_tDBOutput_2;
												if (ne_tDBOutput_2 != null) {
													// build new exception to provide the original cause
													sqle_tDBOutput_2 = new java.sql.SQLException(
															e_tDBOutput_2.getMessage() + "\ncaused by: "
																	+ ne_tDBOutput_2.getMessage(),
															ne_tDBOutput_2.getSQLState(), ne_tDBOutput_2.getErrorCode(),
															ne_tDBOutput_2);
													errormessage_tDBOutput_2 = sqle_tDBOutput_2.getMessage();
												} else {
													errormessage_tDBOutput_2 = e_tDBOutput_2.getMessage();
												}

												int countSum_tDBOutput_2 = 0;
												for (int countEach_tDBOutput_2 : e_tDBOutput_2.getUpdateCounts()) {
													countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0
															: countEach_tDBOutput_2);
												}

												insertedCount_tDBOutput_2 += countSum_tDBOutput_2;

												System.err.println(errormessage_tDBOutput_2);

											}
										}

										commitCounter_tDBOutput_2++;
										if (commitEvery_tDBOutput_2 <= commitCounter_tDBOutput_2) {
											if ((batchSize_tDBOutput_2 > 0) && (batchSizeCounter_tDBOutput_2 > 0)) {
												try {
													int countSum_tDBOutput_2 = 0;

													for (int countEach_tDBOutput_2 : pstmt_tDBOutput_2.executeBatch()) {
														countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0
																: countEach_tDBOutput_2);
													}

													insertedCount_tDBOutput_2 += countSum_tDBOutput_2;

													batchSizeCounter_tDBOutput_2 = 0;
												} catch (java.sql.BatchUpdateException e_tDBOutput_2) {
													java.sql.SQLException ne_tDBOutput_2 = e_tDBOutput_2
															.getNextException(), sqle_tDBOutput_2 = null;
													String errormessage_tDBOutput_2;
													if (ne_tDBOutput_2 != null) {
														// build new exception to provide the original cause
														sqle_tDBOutput_2 = new java.sql.SQLException(
																e_tDBOutput_2.getMessage() + "\ncaused by: "
																		+ ne_tDBOutput_2.getMessage(),
																ne_tDBOutput_2.getSQLState(),
																ne_tDBOutput_2.getErrorCode(), ne_tDBOutput_2);
														errormessage_tDBOutput_2 = sqle_tDBOutput_2.getMessage();
													} else {
														errormessage_tDBOutput_2 = e_tDBOutput_2.getMessage();
													}

													int countSum_tDBOutput_2 = 0;
													for (int countEach_tDBOutput_2 : e_tDBOutput_2.getUpdateCounts()) {
														countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0
																: countEach_tDBOutput_2);
													}

													insertedCount_tDBOutput_2 += countSum_tDBOutput_2;

													System.err.println(errormessage_tDBOutput_2);

												}
											}
											conn_tDBOutput_2.commit();

											commitCounter_tDBOutput_2 = 0;
										}

										tos_count_tDBOutput_2++;

										/**
										 * [tDBOutput_2 main ] stop
										 */

										/**
										 * [tDBOutput_2 process_data_begin ] start
										 */

										currentComponent = "tDBOutput_2";

										/**
										 * [tDBOutput_2 process_data_begin ] stop
										 */

										/**
										 * [tDBOutput_2 process_data_end ] start
										 */

										currentComponent = "tDBOutput_2";

										/**
										 * [tDBOutput_2 process_data_end ] stop
										 */

									} // End of branch "row5"

									/**
									 * [tUniqRow_2 process_data_end ] start
									 */

									currentComponent = "tUniqRow_2";

									/**
									 * [tUniqRow_2 process_data_end ] stop
									 */

								} // End of branch "f"

								/**
								 * [tMap_3 process_data_end ] start
								 */

								currentComponent = "tMap_3";

								/**
								 * [tMap_3 process_data_end ] stop
								 */

								/**
								 * [tAddCRCRow_2 process_data_end ] start
								 */

								currentComponent = "tAddCRCRow_2";

								/**
								 * [tAddCRCRow_2 process_data_end ] stop
								 */

							} // End of branch "flight"

// Start of branch "satisfaction"
							if (satisfaction != null) {

								/**
								 * [tAddCRCRow_3 main ] start
								 */

								currentComponent = "tAddCRCRow_3";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1, "satisfaction");
								}

								Long crcComputedValuetAddCRCRow_3 = null;
								StringBuilder strBuffer_tAddCRCRow_3 = new StringBuilder();
								strBuffer_tAddCRCRow_3.append(

										String.valueOf(satisfaction.id)

								);

								java.util.zip.CRC32 crc32tAddCRCRow_3 = new java.util.zip.CRC32();
								crc32tAddCRCRow_3.update(strBuffer_tAddCRCRow_3.toString().getBytes());
								crcComputedValuetAddCRCRow_3 = new Long(crc32tAddCRCRow_3.getValue());
								row6.id = satisfaction.id;
								row6.seat_comfort = satisfaction.seat_comfort;
								row6.time_convenience = satisfaction.time_convenience;
								row6.food = satisfaction.food;
								row6.gate_location = satisfaction.gate_location;
								row6.wifi_service = satisfaction.wifi_service;
								row6.entertainment = satisfaction.entertainment;
								row6.online_support = satisfaction.online_support;
								row6.booking = satisfaction.booking;
								row6.onboard_service = satisfaction.onboard_service;
								row6.leg_room_service = satisfaction.leg_room_service;
								row6.baggage_handling = satisfaction.baggage_handling;
								row6.checkin = satisfaction.checkin;
								row6.cleanliness = satisfaction.cleanliness;
								row6.CRC = crcComputedValuetAddCRCRow_3;
								nb_line_tAddCRCRow_3++;

								tos_count_tAddCRCRow_3++;

								/**
								 * [tAddCRCRow_3 main ] stop
								 */

								/**
								 * [tAddCRCRow_3 process_data_begin ] start
								 */

								currentComponent = "tAddCRCRow_3";

								/**
								 * [tAddCRCRow_3 process_data_begin ] stop
								 */

								/**
								 * [tMap_4 main ] start
								 */

								currentComponent = "tMap_4";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1, "row6");
								}

								boolean hasCasePrimitiveKeyWithNull_tMap_4 = false;

								// ###############################
								// # Input tables (lookups)
								boolean rejectedInnerJoin_tMap_4 = false;
								boolean mainRowRejected_tMap_4 = false;

								// ###############################
								{ // start of Var scope

									// ###############################
									// # Vars tables

									Var__tMap_4__Struct Var = Var__tMap_4;// ###############################
									// ###############################
									// # Output tables

									s = null;

// # Output table : 's'
									s_tmp.satisfaction_id = row6.CRC;
									s_tmp.seat_comfort = row6.seat_comfort;
									s_tmp.time_convenience = row6.time_convenience;
									s_tmp.food = row6.food;
									s_tmp.gate_location = row6.gate_location;
									s_tmp.wifi_service = row6.wifi_service;
									s_tmp.entertainment = row6.entertainment;
									s_tmp.online_support = row6.online_support;
									s_tmp.booking = row6.booking;
									s_tmp.onboard_service = row6.onboard_service;
									s_tmp.leg_room_service = row6.leg_room_service;
									s_tmp.baggage_handling = row6.baggage_handling;
									s_tmp.checkin = row6.checkin;
									s_tmp.cleanliness = row6.cleanliness;
									s = s_tmp;
// ###############################

								} // end of Var scope

								rejectedInnerJoin_tMap_4 = false;

								tos_count_tMap_4++;

								/**
								 * [tMap_4 main ] stop
								 */

								/**
								 * [tMap_4 process_data_begin ] start
								 */

								currentComponent = "tMap_4";

								/**
								 * [tMap_4 process_data_begin ] stop
								 */
// Start of branch "s"
								if (s != null) {

									/**
									 * [tUniqRow_3 main ] start
									 */

									currentComponent = "tUniqRow_3";

									if (execStat) {
										runStat.updateStatOnConnection(iterateId, 1, 1, "s");
									}

									row8 = null;
									finder_tUniqRow_3.seat_comfort = s.seat_comfort;
									finder_tUniqRow_3.time_convenience = s.time_convenience;
									finder_tUniqRow_3.food = s.food;
									finder_tUniqRow_3.gate_location = s.gate_location;
									finder_tUniqRow_3.wifi_service = s.wifi_service;
									finder_tUniqRow_3.entertainment = s.entertainment;
									finder_tUniqRow_3.online_support = s.online_support;
									finder_tUniqRow_3.booking = s.booking;
									finder_tUniqRow_3.onboard_service = s.onboard_service;
									finder_tUniqRow_3.leg_room_service = s.leg_room_service;
									finder_tUniqRow_3.baggage_handling = s.baggage_handling;
									finder_tUniqRow_3.checkin = s.checkin;
									finder_tUniqRow_3.cleanliness = s.cleanliness;
									finder_tUniqRow_3.hashCodeDirty = true;
									if (!keystUniqRow_3.contains(finder_tUniqRow_3)) {
										KeyStruct_tUniqRow_3 new_tUniqRow_3 = new KeyStruct_tUniqRow_3();

										new_tUniqRow_3.seat_comfort = s.seat_comfort;
										new_tUniqRow_3.time_convenience = s.time_convenience;
										new_tUniqRow_3.food = s.food;
										new_tUniqRow_3.gate_location = s.gate_location;
										new_tUniqRow_3.wifi_service = s.wifi_service;
										new_tUniqRow_3.entertainment = s.entertainment;
										new_tUniqRow_3.online_support = s.online_support;
										new_tUniqRow_3.booking = s.booking;
										new_tUniqRow_3.onboard_service = s.onboard_service;
										new_tUniqRow_3.leg_room_service = s.leg_room_service;
										new_tUniqRow_3.baggage_handling = s.baggage_handling;
										new_tUniqRow_3.checkin = s.checkin;
										new_tUniqRow_3.cleanliness = s.cleanliness;

										keystUniqRow_3.add(new_tUniqRow_3);
										if (row8 == null) {

											row8 = new row8Struct();
										}
										row8.satisfaction_id = s.satisfaction_id;
										row8.seat_comfort = s.seat_comfort;
										row8.time_convenience = s.time_convenience;
										row8.food = s.food;
										row8.gate_location = s.gate_location;
										row8.wifi_service = s.wifi_service;
										row8.entertainment = s.entertainment;
										row8.online_support = s.online_support;
										row8.booking = s.booking;
										row8.onboard_service = s.onboard_service;
										row8.leg_room_service = s.leg_room_service;
										row8.baggage_handling = s.baggage_handling;
										row8.checkin = s.checkin;
										row8.cleanliness = s.cleanliness;
										nb_uniques_tUniqRow_3++;
									} else {
										nb_duplicates_tUniqRow_3++;
									}

									tos_count_tUniqRow_3++;

									/**
									 * [tUniqRow_3 main ] stop
									 */

									/**
									 * [tUniqRow_3 process_data_begin ] start
									 */

									currentComponent = "tUniqRow_3";

									/**
									 * [tUniqRow_3 process_data_begin ] stop
									 */
// Start of branch "row8"
									if (row8 != null) {

										/**
										 * [tDBOutput_4 main ] start
										 */

										currentComponent = "tDBOutput_4";

										if (execStat) {
											runStat.updateStatOnConnection(iterateId, 1, 1, "row8");
										}

										whetherReject_tDBOutput_4 = false;
										pstmt_tDBOutput_4.setLong(1, row8.satisfaction_id);

										if (row8.seat_comfort == null) {
											pstmt_tDBOutput_4.setNull(2, java.sql.Types.INTEGER);
										} else {
											pstmt_tDBOutput_4.setInt(2, row8.seat_comfort);
										}

										if (row8.time_convenience == null) {
											pstmt_tDBOutput_4.setNull(3, java.sql.Types.INTEGER);
										} else {
											pstmt_tDBOutput_4.setInt(3, row8.time_convenience);
										}

										if (row8.food == null) {
											pstmt_tDBOutput_4.setNull(4, java.sql.Types.INTEGER);
										} else {
											pstmt_tDBOutput_4.setInt(4, row8.food);
										}

										if (row8.gate_location == null) {
											pstmt_tDBOutput_4.setNull(5, java.sql.Types.INTEGER);
										} else {
											pstmt_tDBOutput_4.setInt(5, row8.gate_location);
										}

										if (row8.wifi_service == null) {
											pstmt_tDBOutput_4.setNull(6, java.sql.Types.INTEGER);
										} else {
											pstmt_tDBOutput_4.setInt(6, row8.wifi_service);
										}

										if (row8.entertainment == null) {
											pstmt_tDBOutput_4.setNull(7, java.sql.Types.INTEGER);
										} else {
											pstmt_tDBOutput_4.setInt(7, row8.entertainment);
										}

										if (row8.online_support == null) {
											pstmt_tDBOutput_4.setNull(8, java.sql.Types.INTEGER);
										} else {
											pstmt_tDBOutput_4.setInt(8, row8.online_support);
										}

										if (row8.booking == null) {
											pstmt_tDBOutput_4.setNull(9, java.sql.Types.INTEGER);
										} else {
											pstmt_tDBOutput_4.setInt(9, row8.booking);
										}

										if (row8.onboard_service == null) {
											pstmt_tDBOutput_4.setNull(10, java.sql.Types.INTEGER);
										} else {
											pstmt_tDBOutput_4.setInt(10, row8.onboard_service);
										}

										if (row8.leg_room_service == null) {
											pstmt_tDBOutput_4.setNull(11, java.sql.Types.INTEGER);
										} else {
											pstmt_tDBOutput_4.setInt(11, row8.leg_room_service);
										}

										if (row8.baggage_handling == null) {
											pstmt_tDBOutput_4.setNull(12, java.sql.Types.INTEGER);
										} else {
											pstmt_tDBOutput_4.setInt(12, row8.baggage_handling);
										}

										if (row8.checkin == null) {
											pstmt_tDBOutput_4.setNull(13, java.sql.Types.INTEGER);
										} else {
											pstmt_tDBOutput_4.setInt(13, row8.checkin);
										}

										if (row8.cleanliness == null) {
											pstmt_tDBOutput_4.setNull(14, java.sql.Types.INTEGER);
										} else {
											pstmt_tDBOutput_4.setInt(14, row8.cleanliness);
										}

										pstmt_tDBOutput_4.addBatch();
										nb_line_tDBOutput_4++;

										batchSizeCounter_tDBOutput_4++;

										if ((batchSize_tDBOutput_4 > 0)
												&& (batchSize_tDBOutput_4 <= batchSizeCounter_tDBOutput_4)) {
											try {
												int countSum_tDBOutput_4 = 0;

												for (int countEach_tDBOutput_4 : pstmt_tDBOutput_4.executeBatch()) {
													countSum_tDBOutput_4 += (countEach_tDBOutput_4 < 0 ? 0
															: countEach_tDBOutput_4);
												}

												insertedCount_tDBOutput_4 += countSum_tDBOutput_4;

												batchSizeCounter_tDBOutput_4 = 0;
											} catch (java.sql.BatchUpdateException e_tDBOutput_4) {
												java.sql.SQLException ne_tDBOutput_4 = e_tDBOutput_4.getNextException(),
														sqle_tDBOutput_4 = null;
												String errormessage_tDBOutput_4;
												if (ne_tDBOutput_4 != null) {
													// build new exception to provide the original cause
													sqle_tDBOutput_4 = new java.sql.SQLException(
															e_tDBOutput_4.getMessage() + "\ncaused by: "
																	+ ne_tDBOutput_4.getMessage(),
															ne_tDBOutput_4.getSQLState(), ne_tDBOutput_4.getErrorCode(),
															ne_tDBOutput_4);
													errormessage_tDBOutput_4 = sqle_tDBOutput_4.getMessage();
												} else {
													errormessage_tDBOutput_4 = e_tDBOutput_4.getMessage();
												}

												int countSum_tDBOutput_4 = 0;
												for (int countEach_tDBOutput_4 : e_tDBOutput_4.getUpdateCounts()) {
													countSum_tDBOutput_4 += (countEach_tDBOutput_4 < 0 ? 0
															: countEach_tDBOutput_4);
												}

												insertedCount_tDBOutput_4 += countSum_tDBOutput_4;

												System.err.println(errormessage_tDBOutput_4);

											}
										}

										commitCounter_tDBOutput_4++;
										if (commitEvery_tDBOutput_4 <= commitCounter_tDBOutput_4) {
											if ((batchSize_tDBOutput_4 > 0) && (batchSizeCounter_tDBOutput_4 > 0)) {
												try {
													int countSum_tDBOutput_4 = 0;

													for (int countEach_tDBOutput_4 : pstmt_tDBOutput_4.executeBatch()) {
														countSum_tDBOutput_4 += (countEach_tDBOutput_4 < 0 ? 0
																: countEach_tDBOutput_4);
													}

													insertedCount_tDBOutput_4 += countSum_tDBOutput_4;

													batchSizeCounter_tDBOutput_4 = 0;
												} catch (java.sql.BatchUpdateException e_tDBOutput_4) {
													java.sql.SQLException ne_tDBOutput_4 = e_tDBOutput_4
															.getNextException(), sqle_tDBOutput_4 = null;
													String errormessage_tDBOutput_4;
													if (ne_tDBOutput_4 != null) {
														// build new exception to provide the original cause
														sqle_tDBOutput_4 = new java.sql.SQLException(
																e_tDBOutput_4.getMessage() + "\ncaused by: "
																		+ ne_tDBOutput_4.getMessage(),
																ne_tDBOutput_4.getSQLState(),
																ne_tDBOutput_4.getErrorCode(), ne_tDBOutput_4);
														errormessage_tDBOutput_4 = sqle_tDBOutput_4.getMessage();
													} else {
														errormessage_tDBOutput_4 = e_tDBOutput_4.getMessage();
													}

													int countSum_tDBOutput_4 = 0;
													for (int countEach_tDBOutput_4 : e_tDBOutput_4.getUpdateCounts()) {
														countSum_tDBOutput_4 += (countEach_tDBOutput_4 < 0 ? 0
																: countEach_tDBOutput_4);
													}

													insertedCount_tDBOutput_4 += countSum_tDBOutput_4;

													System.err.println(errormessage_tDBOutput_4);

												}
											}
											conn_tDBOutput_4.commit();

											commitCounter_tDBOutput_4 = 0;
										}

										tos_count_tDBOutput_4++;

										/**
										 * [tDBOutput_4 main ] stop
										 */

										/**
										 * [tDBOutput_4 process_data_begin ] start
										 */

										currentComponent = "tDBOutput_4";

										/**
										 * [tDBOutput_4 process_data_begin ] stop
										 */

										/**
										 * [tDBOutput_4 process_data_end ] start
										 */

										currentComponent = "tDBOutput_4";

										/**
										 * [tDBOutput_4 process_data_end ] stop
										 */

									} // End of branch "row8"

									/**
									 * [tUniqRow_3 process_data_end ] start
									 */

									currentComponent = "tUniqRow_3";

									/**
									 * [tUniqRow_3 process_data_end ] stop
									 */

								} // End of branch "s"

								/**
								 * [tMap_4 process_data_end ] start
								 */

								currentComponent = "tMap_4";

								/**
								 * [tMap_4 process_data_end ] stop
								 */

								/**
								 * [tAddCRCRow_3 process_data_end ] start
								 */

								currentComponent = "tAddCRCRow_3";

								/**
								 * [tAddCRCRow_3 process_data_end ] stop
								 */

							} // End of branch "satisfaction"

// Start of branch "ticket"
							if (ticket != null) {

								/**
								 * [tAddCRCRow_4 main ] start
								 */

								currentComponent = "tAddCRCRow_4";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1, "ticket");
								}

								Long crcComputedValuetAddCRCRow_4 = null;
								StringBuilder strBuffer_tAddCRCRow_4 = new StringBuilder();
								strBuffer_tAddCRCRow_4.append(

										String.valueOf(ticket.id)

								);

								java.util.zip.CRC32 crc32tAddCRCRow_4 = new java.util.zip.CRC32();
								crc32tAddCRCRow_4.update(strBuffer_tAddCRCRow_4.toString().getBytes());
								crcComputedValuetAddCRCRow_4 = new Long(crc32tAddCRCRow_4.getValue());
								row7.id = ticket.id;
								row7.type_travel = ticket.type_travel;
								row7.flight_class = ticket.flight_class;
								row7.CRC = crcComputedValuetAddCRCRow_4;
								nb_line_tAddCRCRow_4++;

								tos_count_tAddCRCRow_4++;

								/**
								 * [tAddCRCRow_4 main ] stop
								 */

								/**
								 * [tAddCRCRow_4 process_data_begin ] start
								 */

								currentComponent = "tAddCRCRow_4";

								/**
								 * [tAddCRCRow_4 process_data_begin ] stop
								 */

								/**
								 * [tMap_5 main ] start
								 */

								currentComponent = "tMap_5";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1, "row7");
								}

								boolean hasCasePrimitiveKeyWithNull_tMap_5 = false;

								// ###############################
								// # Input tables (lookups)
								boolean rejectedInnerJoin_tMap_5 = false;
								boolean mainRowRejected_tMap_5 = false;

								// ###############################
								{ // start of Var scope

									// ###############################
									// # Vars tables

									Var__tMap_5__Struct Var = Var__tMap_5;// ###############################
									// ###############################
									// # Output tables

									t = null;

// # Output table : 't'
									t_tmp.ticket_id = row7.CRC;
									t_tmp.type_travel = row7.type_travel;
									t_tmp.flight_class = row7.flight_class;
									t = t_tmp;
// ###############################

								} // end of Var scope

								rejectedInnerJoin_tMap_5 = false;

								tos_count_tMap_5++;

								/**
								 * [tMap_5 main ] stop
								 */

								/**
								 * [tMap_5 process_data_begin ] start
								 */

								currentComponent = "tMap_5";

								/**
								 * [tMap_5 process_data_begin ] stop
								 */
// Start of branch "t"
								if (t != null) {

									/**
									 * [tUniqRow_4 main ] start
									 */

									currentComponent = "tUniqRow_4";

									if (execStat) {
										runStat.updateStatOnConnection(iterateId, 1, 1, "t");
									}

									row9 = null;
									if (t.type_travel == null) {
										finder_tUniqRow_4.type_travel = null;
									} else {
										finder_tUniqRow_4.type_travel = t.type_travel.toLowerCase();
									}
									if (t.flight_class == null) {
										finder_tUniqRow_4.flight_class = null;
									} else {
										finder_tUniqRow_4.flight_class = t.flight_class.toLowerCase();
									}
									finder_tUniqRow_4.hashCodeDirty = true;
									if (!keystUniqRow_4.contains(finder_tUniqRow_4)) {
										KeyStruct_tUniqRow_4 new_tUniqRow_4 = new KeyStruct_tUniqRow_4();

										if (t.type_travel == null) {
											new_tUniqRow_4.type_travel = null;
										} else {
											new_tUniqRow_4.type_travel = t.type_travel.toLowerCase();
										}
										if (t.flight_class == null) {
											new_tUniqRow_4.flight_class = null;
										} else {
											new_tUniqRow_4.flight_class = t.flight_class.toLowerCase();
										}

										keystUniqRow_4.add(new_tUniqRow_4);
										if (row9 == null) {

											row9 = new row9Struct();
										}
										row9.ticket_id = t.ticket_id;
										row9.type_travel = t.type_travel;
										row9.flight_class = t.flight_class;
										nb_uniques_tUniqRow_4++;
									} else {
										nb_duplicates_tUniqRow_4++;
									}

									tos_count_tUniqRow_4++;

									/**
									 * [tUniqRow_4 main ] stop
									 */

									/**
									 * [tUniqRow_4 process_data_begin ] start
									 */

									currentComponent = "tUniqRow_4";

									/**
									 * [tUniqRow_4 process_data_begin ] stop
									 */
// Start of branch "row9"
									if (row9 != null) {

										/**
										 * [tDBOutput_5 main ] start
										 */

										currentComponent = "tDBOutput_5";

										if (execStat) {
											runStat.updateStatOnConnection(iterateId, 1, 1, "row9");
										}

										whetherReject_tDBOutput_5 = false;
										pstmt_tDBOutput_5.setLong(1, row9.ticket_id);

										if (row9.type_travel == null) {
											pstmt_tDBOutput_5.setNull(2, java.sql.Types.VARCHAR);
										} else {
											pstmt_tDBOutput_5.setString(2, row9.type_travel);
										}

										if (row9.flight_class == null) {
											pstmt_tDBOutput_5.setNull(3, java.sql.Types.VARCHAR);
										} else {
											pstmt_tDBOutput_5.setString(3, row9.flight_class);
										}

										pstmt_tDBOutput_5.addBatch();
										nb_line_tDBOutput_5++;

										batchSizeCounter_tDBOutput_5++;

										if ((batchSize_tDBOutput_5 > 0)
												&& (batchSize_tDBOutput_5 <= batchSizeCounter_tDBOutput_5)) {
											try {
												int countSum_tDBOutput_5 = 0;

												for (int countEach_tDBOutput_5 : pstmt_tDBOutput_5.executeBatch()) {
													countSum_tDBOutput_5 += (countEach_tDBOutput_5 < 0 ? 0
															: countEach_tDBOutput_5);
												}

												insertedCount_tDBOutput_5 += countSum_tDBOutput_5;

												batchSizeCounter_tDBOutput_5 = 0;
											} catch (java.sql.BatchUpdateException e_tDBOutput_5) {
												java.sql.SQLException ne_tDBOutput_5 = e_tDBOutput_5.getNextException(),
														sqle_tDBOutput_5 = null;
												String errormessage_tDBOutput_5;
												if (ne_tDBOutput_5 != null) {
													// build new exception to provide the original cause
													sqle_tDBOutput_5 = new java.sql.SQLException(
															e_tDBOutput_5.getMessage() + "\ncaused by: "
																	+ ne_tDBOutput_5.getMessage(),
															ne_tDBOutput_5.getSQLState(), ne_tDBOutput_5.getErrorCode(),
															ne_tDBOutput_5);
													errormessage_tDBOutput_5 = sqle_tDBOutput_5.getMessage();
												} else {
													errormessage_tDBOutput_5 = e_tDBOutput_5.getMessage();
												}

												int countSum_tDBOutput_5 = 0;
												for (int countEach_tDBOutput_5 : e_tDBOutput_5.getUpdateCounts()) {
													countSum_tDBOutput_5 += (countEach_tDBOutput_5 < 0 ? 0
															: countEach_tDBOutput_5);
												}

												insertedCount_tDBOutput_5 += countSum_tDBOutput_5;

												System.err.println(errormessage_tDBOutput_5);

											}
										}

										commitCounter_tDBOutput_5++;
										if (commitEvery_tDBOutput_5 <= commitCounter_tDBOutput_5) {
											if ((batchSize_tDBOutput_5 > 0) && (batchSizeCounter_tDBOutput_5 > 0)) {
												try {
													int countSum_tDBOutput_5 = 0;

													for (int countEach_tDBOutput_5 : pstmt_tDBOutput_5.executeBatch()) {
														countSum_tDBOutput_5 += (countEach_tDBOutput_5 < 0 ? 0
																: countEach_tDBOutput_5);
													}

													insertedCount_tDBOutput_5 += countSum_tDBOutput_5;

													batchSizeCounter_tDBOutput_5 = 0;
												} catch (java.sql.BatchUpdateException e_tDBOutput_5) {
													java.sql.SQLException ne_tDBOutput_5 = e_tDBOutput_5
															.getNextException(), sqle_tDBOutput_5 = null;
													String errormessage_tDBOutput_5;
													if (ne_tDBOutput_5 != null) {
														// build new exception to provide the original cause
														sqle_tDBOutput_5 = new java.sql.SQLException(
																e_tDBOutput_5.getMessage() + "\ncaused by: "
																		+ ne_tDBOutput_5.getMessage(),
																ne_tDBOutput_5.getSQLState(),
																ne_tDBOutput_5.getErrorCode(), ne_tDBOutput_5);
														errormessage_tDBOutput_5 = sqle_tDBOutput_5.getMessage();
													} else {
														errormessage_tDBOutput_5 = e_tDBOutput_5.getMessage();
													}

													int countSum_tDBOutput_5 = 0;
													for (int countEach_tDBOutput_5 : e_tDBOutput_5.getUpdateCounts()) {
														countSum_tDBOutput_5 += (countEach_tDBOutput_5 < 0 ? 0
																: countEach_tDBOutput_5);
													}

													insertedCount_tDBOutput_5 += countSum_tDBOutput_5;

													System.err.println(errormessage_tDBOutput_5);

												}
											}
											conn_tDBOutput_5.commit();

											commitCounter_tDBOutput_5 = 0;
										}

										tos_count_tDBOutput_5++;

										/**
										 * [tDBOutput_5 main ] stop
										 */

										/**
										 * [tDBOutput_5 process_data_begin ] start
										 */

										currentComponent = "tDBOutput_5";

										/**
										 * [tDBOutput_5 process_data_begin ] stop
										 */

										/**
										 * [tDBOutput_5 process_data_end ] start
										 */

										currentComponent = "tDBOutput_5";

										/**
										 * [tDBOutput_5 process_data_end ] stop
										 */

									} // End of branch "row9"

									/**
									 * [tUniqRow_4 process_data_end ] start
									 */

									currentComponent = "tUniqRow_4";

									/**
									 * [tUniqRow_4 process_data_end ] stop
									 */

								} // End of branch "t"

								/**
								 * [tMap_5 process_data_end ] start
								 */

								currentComponent = "tMap_5";

								/**
								 * [tMap_5 process_data_end ] stop
								 */

								/**
								 * [tAddCRCRow_4 process_data_end ] start
								 */

								currentComponent = "tAddCRCRow_4";

								/**
								 * [tAddCRCRow_4 process_data_end ] stop
								 */

							} // End of branch "ticket"

							/**
							 * [tMap_1 process_data_end ] start
							 */

							currentComponent = "tMap_1";

							/**
							 * [tMap_1 process_data_end ] stop
							 */

						} // End of branch "row1"

						/**
						 * [tFileInputDelimited_1 process_data_end ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						/**
						 * [tFileInputDelimited_1 process_data_end ] stop
						 */

						/**
						 * [tFileInputDelimited_1 end ] start
						 */

						currentComponent = "tFileInputDelimited_1";

					}
				} finally {
					if (!((Object) ("/Users/dylanperdigao/Library/CloudStorage/OneDrive-dei.uc.pt/UC/UC-Cadeiras_do_Curso/Mestrado/Semestre_2/Business_Intelligence/BI-Project/Dataset/satisfaction.csv") instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_1 != null) {
							fid_tFileInputDelimited_1.close();
						}
					}
					if (fid_tFileInputDelimited_1 != null) {
						globalMap.put("tFileInputDelimited_1_NB_LINE", fid_tFileInputDelimited_1.getRowNumber());

					}
				}

				ok_Hash.put("tFileInputDelimited_1", true);
				end_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_1 end ] stop
				 */

				/**
				 * [tMap_1 end ] start
				 */

				currentComponent = "tMap_1";

// ###############################
// # Lookup hashes releasing
// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row1");
				}

				ok_Hash.put("tMap_1", true);
				end_Hash.put("tMap_1", System.currentTimeMillis());

				/**
				 * [tMap_1 end ] stop
				 */

				/**
				 * [tAddCRCRow_1 end ] start
				 */

				currentComponent = "tAddCRCRow_1";

				globalMap.put("tAddCRCRow_1_NB_LINE", nb_line_tAddCRCRow_1);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "person");
				}

				ok_Hash.put("tAddCRCRow_1", true);
				end_Hash.put("tAddCRCRow_1", System.currentTimeMillis());

				/**
				 * [tAddCRCRow_1 end ] stop
				 */

				/**
				 * [tMap_2 end ] start
				 */

				currentComponent = "tMap_2";

// ###############################
// # Lookup hashes releasing
// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row2");
				}

				ok_Hash.put("tMap_2", true);
				end_Hash.put("tMap_2", System.currentTimeMillis());

				/**
				 * [tMap_2 end ] stop
				 */

				/**
				 * [tUniqRow_1 end ] start
				 */

				currentComponent = "tUniqRow_1";

				globalMap.put("tUniqRow_1_NB_UNIQUES", nb_uniques_tUniqRow_1);
				globalMap.put("tUniqRow_1_NB_DUPLICATES", nb_duplicates_tUniqRow_1);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "p");
				}

				ok_Hash.put("tUniqRow_1", true);
				end_Hash.put("tUniqRow_1", System.currentTimeMillis());

				/**
				 * [tUniqRow_1 end ] stop
				 */

				/**
				 * [tDBOutput_3 end ] start
				 */

				currentComponent = "tDBOutput_3";

				try {
					int countSum_tDBOutput_3 = 0;
					if (pstmt_tDBOutput_3 != null && batchSizeCounter_tDBOutput_3 > 0) {

						for (int countEach_tDBOutput_3 : pstmt_tDBOutput_3.executeBatch()) {
							countSum_tDBOutput_3 += (countEach_tDBOutput_3 < 0 ? 0 : countEach_tDBOutput_3);
						}

					}

					insertedCount_tDBOutput_3 += countSum_tDBOutput_3;

				} catch (java.sql.BatchUpdateException e_tDBOutput_3) {
					java.sql.SQLException ne_tDBOutput_3 = e_tDBOutput_3.getNextException(), sqle_tDBOutput_3 = null;
					String errormessage_tDBOutput_3;
					if (ne_tDBOutput_3 != null) {
						// build new exception to provide the original cause
						sqle_tDBOutput_3 = new java.sql.SQLException(
								e_tDBOutput_3.getMessage() + "\ncaused by: " + ne_tDBOutput_3.getMessage(),
								ne_tDBOutput_3.getSQLState(), ne_tDBOutput_3.getErrorCode(), ne_tDBOutput_3);
						errormessage_tDBOutput_3 = sqle_tDBOutput_3.getMessage();
					} else {
						errormessage_tDBOutput_3 = e_tDBOutput_3.getMessage();
					}

					int countSum_tDBOutput_3 = 0;
					for (int countEach_tDBOutput_3 : e_tDBOutput_3.getUpdateCounts()) {
						countSum_tDBOutput_3 += (countEach_tDBOutput_3 < 0 ? 0 : countEach_tDBOutput_3);
					}

					insertedCount_tDBOutput_3 += countSum_tDBOutput_3;

					System.err.println(errormessage_tDBOutput_3);

				}

				if (pstmt_tDBOutput_3 != null) {

					pstmt_tDBOutput_3.close();
					resourceMap.remove("pstmt_tDBOutput_3");
				}
				resourceMap.put("statementClosed_tDBOutput_3", true);

				conn_tDBOutput_3.commit();

				conn_tDBOutput_3.close();

				resourceMap.put("finish_tDBOutput_3", true);

				nb_line_deleted_tDBOutput_3 = nb_line_deleted_tDBOutput_3 + deletedCount_tDBOutput_3;
				nb_line_update_tDBOutput_3 = nb_line_update_tDBOutput_3 + updatedCount_tDBOutput_3;
				nb_line_inserted_tDBOutput_3 = nb_line_inserted_tDBOutput_3 + insertedCount_tDBOutput_3;
				nb_line_rejected_tDBOutput_3 = nb_line_rejected_tDBOutput_3 + rejectedCount_tDBOutput_3;

				globalMap.put("tDBOutput_3_NB_LINE", nb_line_tDBOutput_3);
				globalMap.put("tDBOutput_3_NB_LINE_UPDATED", nb_line_update_tDBOutput_3);
				globalMap.put("tDBOutput_3_NB_LINE_INSERTED", nb_line_inserted_tDBOutput_3);
				globalMap.put("tDBOutput_3_NB_LINE_DELETED", nb_line_deleted_tDBOutput_3);
				globalMap.put("tDBOutput_3_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_3);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row3");
				}

				ok_Hash.put("tDBOutput_3", true);
				end_Hash.put("tDBOutput_3", System.currentTimeMillis());

				/**
				 * [tDBOutput_3 end ] stop
				 */

				/**
				 * [tAddCRCRow_2 end ] start
				 */

				currentComponent = "tAddCRCRow_2";

				globalMap.put("tAddCRCRow_2_NB_LINE", nb_line_tAddCRCRow_2);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "flight");
				}

				ok_Hash.put("tAddCRCRow_2", true);
				end_Hash.put("tAddCRCRow_2", System.currentTimeMillis());

				/**
				 * [tAddCRCRow_2 end ] stop
				 */

				/**
				 * [tMap_3 end ] start
				 */

				currentComponent = "tMap_3";

// ###############################
// # Lookup hashes releasing
// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row4");
				}

				ok_Hash.put("tMap_3", true);
				end_Hash.put("tMap_3", System.currentTimeMillis());

				/**
				 * [tMap_3 end ] stop
				 */

				/**
				 * [tUniqRow_2 end ] start
				 */

				currentComponent = "tUniqRow_2";

				globalMap.put("tUniqRow_2_NB_UNIQUES", nb_uniques_tUniqRow_2);
				globalMap.put("tUniqRow_2_NB_DUPLICATES", nb_duplicates_tUniqRow_2);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "f");
				}

				ok_Hash.put("tUniqRow_2", true);
				end_Hash.put("tUniqRow_2", System.currentTimeMillis());

				/**
				 * [tUniqRow_2 end ] stop
				 */

				/**
				 * [tDBOutput_2 end ] start
				 */

				currentComponent = "tDBOutput_2";

				try {
					int countSum_tDBOutput_2 = 0;
					if (pstmt_tDBOutput_2 != null && batchSizeCounter_tDBOutput_2 > 0) {

						for (int countEach_tDBOutput_2 : pstmt_tDBOutput_2.executeBatch()) {
							countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0 : countEach_tDBOutput_2);
						}

					}

					insertedCount_tDBOutput_2 += countSum_tDBOutput_2;

				} catch (java.sql.BatchUpdateException e_tDBOutput_2) {
					java.sql.SQLException ne_tDBOutput_2 = e_tDBOutput_2.getNextException(), sqle_tDBOutput_2 = null;
					String errormessage_tDBOutput_2;
					if (ne_tDBOutput_2 != null) {
						// build new exception to provide the original cause
						sqle_tDBOutput_2 = new java.sql.SQLException(
								e_tDBOutput_2.getMessage() + "\ncaused by: " + ne_tDBOutput_2.getMessage(),
								ne_tDBOutput_2.getSQLState(), ne_tDBOutput_2.getErrorCode(), ne_tDBOutput_2);
						errormessage_tDBOutput_2 = sqle_tDBOutput_2.getMessage();
					} else {
						errormessage_tDBOutput_2 = e_tDBOutput_2.getMessage();
					}

					int countSum_tDBOutput_2 = 0;
					for (int countEach_tDBOutput_2 : e_tDBOutput_2.getUpdateCounts()) {
						countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0 : countEach_tDBOutput_2);
					}

					insertedCount_tDBOutput_2 += countSum_tDBOutput_2;

					System.err.println(errormessage_tDBOutput_2);

				}

				if (pstmt_tDBOutput_2 != null) {

					pstmt_tDBOutput_2.close();
					resourceMap.remove("pstmt_tDBOutput_2");
				}
				resourceMap.put("statementClosed_tDBOutput_2", true);

				conn_tDBOutput_2.commit();

				conn_tDBOutput_2.close();

				resourceMap.put("finish_tDBOutput_2", true);

				nb_line_deleted_tDBOutput_2 = nb_line_deleted_tDBOutput_2 + deletedCount_tDBOutput_2;
				nb_line_update_tDBOutput_2 = nb_line_update_tDBOutput_2 + updatedCount_tDBOutput_2;
				nb_line_inserted_tDBOutput_2 = nb_line_inserted_tDBOutput_2 + insertedCount_tDBOutput_2;
				nb_line_rejected_tDBOutput_2 = nb_line_rejected_tDBOutput_2 + rejectedCount_tDBOutput_2;

				globalMap.put("tDBOutput_2_NB_LINE", nb_line_tDBOutput_2);
				globalMap.put("tDBOutput_2_NB_LINE_UPDATED", nb_line_update_tDBOutput_2);
				globalMap.put("tDBOutput_2_NB_LINE_INSERTED", nb_line_inserted_tDBOutput_2);
				globalMap.put("tDBOutput_2_NB_LINE_DELETED", nb_line_deleted_tDBOutput_2);
				globalMap.put("tDBOutput_2_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_2);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row5");
				}

				ok_Hash.put("tDBOutput_2", true);
				end_Hash.put("tDBOutput_2", System.currentTimeMillis());

				/**
				 * [tDBOutput_2 end ] stop
				 */

				/**
				 * [tAddCRCRow_3 end ] start
				 */

				currentComponent = "tAddCRCRow_3";

				globalMap.put("tAddCRCRow_3_NB_LINE", nb_line_tAddCRCRow_3);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "satisfaction");
				}

				ok_Hash.put("tAddCRCRow_3", true);
				end_Hash.put("tAddCRCRow_3", System.currentTimeMillis());

				/**
				 * [tAddCRCRow_3 end ] stop
				 */

				/**
				 * [tMap_4 end ] start
				 */

				currentComponent = "tMap_4";

// ###############################
// # Lookup hashes releasing
// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row6");
				}

				ok_Hash.put("tMap_4", true);
				end_Hash.put("tMap_4", System.currentTimeMillis());

				/**
				 * [tMap_4 end ] stop
				 */

				/**
				 * [tUniqRow_3 end ] start
				 */

				currentComponent = "tUniqRow_3";

				globalMap.put("tUniqRow_3_NB_UNIQUES", nb_uniques_tUniqRow_3);
				globalMap.put("tUniqRow_3_NB_DUPLICATES", nb_duplicates_tUniqRow_3);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "s");
				}

				ok_Hash.put("tUniqRow_3", true);
				end_Hash.put("tUniqRow_3", System.currentTimeMillis());

				/**
				 * [tUniqRow_3 end ] stop
				 */

				/**
				 * [tDBOutput_4 end ] start
				 */

				currentComponent = "tDBOutput_4";

				try {
					int countSum_tDBOutput_4 = 0;
					if (pstmt_tDBOutput_4 != null && batchSizeCounter_tDBOutput_4 > 0) {

						for (int countEach_tDBOutput_4 : pstmt_tDBOutput_4.executeBatch()) {
							countSum_tDBOutput_4 += (countEach_tDBOutput_4 < 0 ? 0 : countEach_tDBOutput_4);
						}

					}

					insertedCount_tDBOutput_4 += countSum_tDBOutput_4;

				} catch (java.sql.BatchUpdateException e_tDBOutput_4) {
					java.sql.SQLException ne_tDBOutput_4 = e_tDBOutput_4.getNextException(), sqle_tDBOutput_4 = null;
					String errormessage_tDBOutput_4;
					if (ne_tDBOutput_4 != null) {
						// build new exception to provide the original cause
						sqle_tDBOutput_4 = new java.sql.SQLException(
								e_tDBOutput_4.getMessage() + "\ncaused by: " + ne_tDBOutput_4.getMessage(),
								ne_tDBOutput_4.getSQLState(), ne_tDBOutput_4.getErrorCode(), ne_tDBOutput_4);
						errormessage_tDBOutput_4 = sqle_tDBOutput_4.getMessage();
					} else {
						errormessage_tDBOutput_4 = e_tDBOutput_4.getMessage();
					}

					int countSum_tDBOutput_4 = 0;
					for (int countEach_tDBOutput_4 : e_tDBOutput_4.getUpdateCounts()) {
						countSum_tDBOutput_4 += (countEach_tDBOutput_4 < 0 ? 0 : countEach_tDBOutput_4);
					}

					insertedCount_tDBOutput_4 += countSum_tDBOutput_4;

					System.err.println(errormessage_tDBOutput_4);

				}

				if (pstmt_tDBOutput_4 != null) {

					pstmt_tDBOutput_4.close();
					resourceMap.remove("pstmt_tDBOutput_4");
				}
				resourceMap.put("statementClosed_tDBOutput_4", true);

				conn_tDBOutput_4.commit();

				conn_tDBOutput_4.close();

				resourceMap.put("finish_tDBOutput_4", true);

				nb_line_deleted_tDBOutput_4 = nb_line_deleted_tDBOutput_4 + deletedCount_tDBOutput_4;
				nb_line_update_tDBOutput_4 = nb_line_update_tDBOutput_4 + updatedCount_tDBOutput_4;
				nb_line_inserted_tDBOutput_4 = nb_line_inserted_tDBOutput_4 + insertedCount_tDBOutput_4;
				nb_line_rejected_tDBOutput_4 = nb_line_rejected_tDBOutput_4 + rejectedCount_tDBOutput_4;

				globalMap.put("tDBOutput_4_NB_LINE", nb_line_tDBOutput_4);
				globalMap.put("tDBOutput_4_NB_LINE_UPDATED", nb_line_update_tDBOutput_4);
				globalMap.put("tDBOutput_4_NB_LINE_INSERTED", nb_line_inserted_tDBOutput_4);
				globalMap.put("tDBOutput_4_NB_LINE_DELETED", nb_line_deleted_tDBOutput_4);
				globalMap.put("tDBOutput_4_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_4);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row8");
				}

				ok_Hash.put("tDBOutput_4", true);
				end_Hash.put("tDBOutput_4", System.currentTimeMillis());

				/**
				 * [tDBOutput_4 end ] stop
				 */

				/**
				 * [tAddCRCRow_4 end ] start
				 */

				currentComponent = "tAddCRCRow_4";

				globalMap.put("tAddCRCRow_4_NB_LINE", nb_line_tAddCRCRow_4);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "ticket");
				}

				ok_Hash.put("tAddCRCRow_4", true);
				end_Hash.put("tAddCRCRow_4", System.currentTimeMillis());

				/**
				 * [tAddCRCRow_4 end ] stop
				 */

				/**
				 * [tMap_5 end ] start
				 */

				currentComponent = "tMap_5";

// ###############################
// # Lookup hashes releasing
// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row7");
				}

				ok_Hash.put("tMap_5", true);
				end_Hash.put("tMap_5", System.currentTimeMillis());

				/**
				 * [tMap_5 end ] stop
				 */

				/**
				 * [tUniqRow_4 end ] start
				 */

				currentComponent = "tUniqRow_4";

				globalMap.put("tUniqRow_4_NB_UNIQUES", nb_uniques_tUniqRow_4);
				globalMap.put("tUniqRow_4_NB_DUPLICATES", nb_duplicates_tUniqRow_4);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "t");
				}

				ok_Hash.put("tUniqRow_4", true);
				end_Hash.put("tUniqRow_4", System.currentTimeMillis());

				/**
				 * [tUniqRow_4 end ] stop
				 */

				/**
				 * [tDBOutput_5 end ] start
				 */

				currentComponent = "tDBOutput_5";

				try {
					int countSum_tDBOutput_5 = 0;
					if (pstmt_tDBOutput_5 != null && batchSizeCounter_tDBOutput_5 > 0) {

						for (int countEach_tDBOutput_5 : pstmt_tDBOutput_5.executeBatch()) {
							countSum_tDBOutput_5 += (countEach_tDBOutput_5 < 0 ? 0 : countEach_tDBOutput_5);
						}

					}

					insertedCount_tDBOutput_5 += countSum_tDBOutput_5;

				} catch (java.sql.BatchUpdateException e_tDBOutput_5) {
					java.sql.SQLException ne_tDBOutput_5 = e_tDBOutput_5.getNextException(), sqle_tDBOutput_5 = null;
					String errormessage_tDBOutput_5;
					if (ne_tDBOutput_5 != null) {
						// build new exception to provide the original cause
						sqle_tDBOutput_5 = new java.sql.SQLException(
								e_tDBOutput_5.getMessage() + "\ncaused by: " + ne_tDBOutput_5.getMessage(),
								ne_tDBOutput_5.getSQLState(), ne_tDBOutput_5.getErrorCode(), ne_tDBOutput_5);
						errormessage_tDBOutput_5 = sqle_tDBOutput_5.getMessage();
					} else {
						errormessage_tDBOutput_5 = e_tDBOutput_5.getMessage();
					}

					int countSum_tDBOutput_5 = 0;
					for (int countEach_tDBOutput_5 : e_tDBOutput_5.getUpdateCounts()) {
						countSum_tDBOutput_5 += (countEach_tDBOutput_5 < 0 ? 0 : countEach_tDBOutput_5);
					}

					insertedCount_tDBOutput_5 += countSum_tDBOutput_5;

					System.err.println(errormessage_tDBOutput_5);

				}

				if (pstmt_tDBOutput_5 != null) {

					pstmt_tDBOutput_5.close();
					resourceMap.remove("pstmt_tDBOutput_5");
				}
				resourceMap.put("statementClosed_tDBOutput_5", true);

				conn_tDBOutput_5.commit();

				conn_tDBOutput_5.close();

				resourceMap.put("finish_tDBOutput_5", true);

				nb_line_deleted_tDBOutput_5 = nb_line_deleted_tDBOutput_5 + deletedCount_tDBOutput_5;
				nb_line_update_tDBOutput_5 = nb_line_update_tDBOutput_5 + updatedCount_tDBOutput_5;
				nb_line_inserted_tDBOutput_5 = nb_line_inserted_tDBOutput_5 + insertedCount_tDBOutput_5;
				nb_line_rejected_tDBOutput_5 = nb_line_rejected_tDBOutput_5 + rejectedCount_tDBOutput_5;

				globalMap.put("tDBOutput_5_NB_LINE", nb_line_tDBOutput_5);
				globalMap.put("tDBOutput_5_NB_LINE_UPDATED", nb_line_update_tDBOutput_5);
				globalMap.put("tDBOutput_5_NB_LINE_INSERTED", nb_line_inserted_tDBOutput_5);
				globalMap.put("tDBOutput_5_NB_LINE_DELETED", nb_line_deleted_tDBOutput_5);
				globalMap.put("tDBOutput_5_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_5);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row9");
				}

				ok_Hash.put("tDBOutput_5", true);
				end_Hash.put("tDBOutput_5", System.currentTimeMillis());

				/**
				 * [tDBOutput_5 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputDelimited_1 finally ] start
				 */

				currentComponent = "tFileInputDelimited_1";

				/**
				 * [tFileInputDelimited_1 finally ] stop
				 */

				/**
				 * [tMap_1 finally ] start
				 */

				currentComponent = "tMap_1";

				/**
				 * [tMap_1 finally ] stop
				 */

				/**
				 * [tAddCRCRow_1 finally ] start
				 */

				currentComponent = "tAddCRCRow_1";

				/**
				 * [tAddCRCRow_1 finally ] stop
				 */

				/**
				 * [tMap_2 finally ] start
				 */

				currentComponent = "tMap_2";

				/**
				 * [tMap_2 finally ] stop
				 */

				/**
				 * [tUniqRow_1 finally ] start
				 */

				currentComponent = "tUniqRow_1";

				/**
				 * [tUniqRow_1 finally ] stop
				 */

				/**
				 * [tDBOutput_3 finally ] start
				 */

				currentComponent = "tDBOutput_3";

				try {
					if (resourceMap.get("statementClosed_tDBOutput_3") == null) {
						java.sql.PreparedStatement pstmtToClose_tDBOutput_3 = null;
						if ((pstmtToClose_tDBOutput_3 = (java.sql.PreparedStatement) resourceMap
								.remove("pstmt_tDBOutput_3")) != null) {
							pstmtToClose_tDBOutput_3.close();
						}
					}
				} finally {
					if (resourceMap.get("finish_tDBOutput_3") == null) {
						java.sql.Connection ctn_tDBOutput_3 = null;
						if ((ctn_tDBOutput_3 = (java.sql.Connection) resourceMap.get("conn_tDBOutput_3")) != null) {
							try {
								ctn_tDBOutput_3.close();
							} catch (java.sql.SQLException sqlEx_tDBOutput_3) {
								String errorMessage_tDBOutput_3 = "failed to close the connection in tDBOutput_3 :"
										+ sqlEx_tDBOutput_3.getMessage();
								System.err.println(errorMessage_tDBOutput_3);
							}
						}
					}
				}

				/**
				 * [tDBOutput_3 finally ] stop
				 */

				/**
				 * [tAddCRCRow_2 finally ] start
				 */

				currentComponent = "tAddCRCRow_2";

				/**
				 * [tAddCRCRow_2 finally ] stop
				 */

				/**
				 * [tMap_3 finally ] start
				 */

				currentComponent = "tMap_3";

				/**
				 * [tMap_3 finally ] stop
				 */

				/**
				 * [tUniqRow_2 finally ] start
				 */

				currentComponent = "tUniqRow_2";

				/**
				 * [tUniqRow_2 finally ] stop
				 */

				/**
				 * [tDBOutput_2 finally ] start
				 */

				currentComponent = "tDBOutput_2";

				try {
					if (resourceMap.get("statementClosed_tDBOutput_2") == null) {
						java.sql.PreparedStatement pstmtToClose_tDBOutput_2 = null;
						if ((pstmtToClose_tDBOutput_2 = (java.sql.PreparedStatement) resourceMap
								.remove("pstmt_tDBOutput_2")) != null) {
							pstmtToClose_tDBOutput_2.close();
						}
					}
				} finally {
					if (resourceMap.get("finish_tDBOutput_2") == null) {
						java.sql.Connection ctn_tDBOutput_2 = null;
						if ((ctn_tDBOutput_2 = (java.sql.Connection) resourceMap.get("conn_tDBOutput_2")) != null) {
							try {
								ctn_tDBOutput_2.close();
							} catch (java.sql.SQLException sqlEx_tDBOutput_2) {
								String errorMessage_tDBOutput_2 = "failed to close the connection in tDBOutput_2 :"
										+ sqlEx_tDBOutput_2.getMessage();
								System.err.println(errorMessage_tDBOutput_2);
							}
						}
					}
				}

				/**
				 * [tDBOutput_2 finally ] stop
				 */

				/**
				 * [tAddCRCRow_3 finally ] start
				 */

				currentComponent = "tAddCRCRow_3";

				/**
				 * [tAddCRCRow_3 finally ] stop
				 */

				/**
				 * [tMap_4 finally ] start
				 */

				currentComponent = "tMap_4";

				/**
				 * [tMap_4 finally ] stop
				 */

				/**
				 * [tUniqRow_3 finally ] start
				 */

				currentComponent = "tUniqRow_3";

				/**
				 * [tUniqRow_3 finally ] stop
				 */

				/**
				 * [tDBOutput_4 finally ] start
				 */

				currentComponent = "tDBOutput_4";

				try {
					if (resourceMap.get("statementClosed_tDBOutput_4") == null) {
						java.sql.PreparedStatement pstmtToClose_tDBOutput_4 = null;
						if ((pstmtToClose_tDBOutput_4 = (java.sql.PreparedStatement) resourceMap
								.remove("pstmt_tDBOutput_4")) != null) {
							pstmtToClose_tDBOutput_4.close();
						}
					}
				} finally {
					if (resourceMap.get("finish_tDBOutput_4") == null) {
						java.sql.Connection ctn_tDBOutput_4 = null;
						if ((ctn_tDBOutput_4 = (java.sql.Connection) resourceMap.get("conn_tDBOutput_4")) != null) {
							try {
								ctn_tDBOutput_4.close();
							} catch (java.sql.SQLException sqlEx_tDBOutput_4) {
								String errorMessage_tDBOutput_4 = "failed to close the connection in tDBOutput_4 :"
										+ sqlEx_tDBOutput_4.getMessage();
								System.err.println(errorMessage_tDBOutput_4);
							}
						}
					}
				}

				/**
				 * [tDBOutput_4 finally ] stop
				 */

				/**
				 * [tAddCRCRow_4 finally ] start
				 */

				currentComponent = "tAddCRCRow_4";

				/**
				 * [tAddCRCRow_4 finally ] stop
				 */

				/**
				 * [tMap_5 finally ] start
				 */

				currentComponent = "tMap_5";

				/**
				 * [tMap_5 finally ] stop
				 */

				/**
				 * [tUniqRow_4 finally ] start
				 */

				currentComponent = "tUniqRow_4";

				/**
				 * [tUniqRow_4 finally ] stop
				 */

				/**
				 * [tDBOutput_5 finally ] start
				 */

				currentComponent = "tDBOutput_5";

				try {
					if (resourceMap.get("statementClosed_tDBOutput_5") == null) {
						java.sql.PreparedStatement pstmtToClose_tDBOutput_5 = null;
						if ((pstmtToClose_tDBOutput_5 = (java.sql.PreparedStatement) resourceMap
								.remove("pstmt_tDBOutput_5")) != null) {
							pstmtToClose_tDBOutput_5.close();
						}
					}
				} finally {
					if (resourceMap.get("finish_tDBOutput_5") == null) {
						java.sql.Connection ctn_tDBOutput_5 = null;
						if ((ctn_tDBOutput_5 = (java.sql.Connection) resourceMap.get("conn_tDBOutput_5")) != null) {
							try {
								ctn_tDBOutput_5.close();
							} catch (java.sql.SQLException sqlEx_tDBOutput_5) {
								String errorMessage_tDBOutput_5 = "failed to close the connection in tDBOutput_5 :"
										+ sqlEx_tDBOutput_5.getMessage();
								System.err.println(errorMessage_tDBOutput_5);
							}
						}
					}
				}

				/**
				 * [tDBOutput_5 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean enableLogStash;

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private PropertiesWithType context_param = new PropertiesWithType();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final Data_Integration Data_IntegrationClass = new Data_Integration();

		int exitCode = Data_IntegrationClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}
		enableLogStash = "true".equalsIgnoreCase(System.getProperty("monitoring"));

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		if (portStats != null) {
			// portStats = -1; //for testing
			if (portStats < 0 || portStats > 65535) {
				// issue:10869, the portStats is invalid, so this client socket can't open
				System.err.println("The statistics socket port " + portStats + " is invalid.");
				execStat = false;
			}
		} else {
			execStat = false;
		}

		try {
			// call job/subjob with an existing context, like: --context=production. if
			// without this parameter, there will use the default context instead.
			java.io.InputStream inContext = Data_Integration.class.getClassLoader()
					.getResourceAsStream("bi/data_integration_0_1/contexts/" + contextStr + ".properties");
			if (inContext == null) {
				inContext = Data_Integration.class.getClassLoader()
						.getResourceAsStream("config/contexts/" + contextStr + ".properties");
			}
			if (inContext != null) {
				// defaultProps is in order to keep the original context value
				if (context != null && context.isEmpty()) {
					defaultProps.load(inContext);
					context = new ContextProperties(defaultProps);
				}

				inContext.close();
			} else if (!isDefaultContext) {
				// print info and job continue to run, for case: context_param is not empty.
				System.err.println("Could not find the context " + contextStr);
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
				// set types for params from parentJobs
				for (Object key : context_param.keySet()) {
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
			}
			class ContextProcessing {
				private void processContext_0() {
				}

				public void processAllContext() {
					processContext_0();
				}
			}

			new ContextProcessing().processAllContext();
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "",
				"", "", "", "", resumeUtil.convertToJsonText(context, parametersToEncrypt));

		if (execStat) {
			try {
				runStat.openSocket(!isChildJob);
				runStat.setAllPID(rootPid, fatherPid, pid, jobName);
				runStat.startThreadStat(clientHost, portStats);
				runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
			} catch (java.io.IOException ioException) {
				ioException.printStackTrace();
			}
		}

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tFileInputDelimited_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tFileInputDelimited_1) {
			globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", -1);

			e_tFileInputDelimited_1.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		if (false) {
			System.out.println(
					(endUsedMemory - startUsedMemory) + " bytes memory increase when running : Data_Integration");
		}

		if (execStat) {
			runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
			runStat.stopThreadStat();
		}
		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "",
				"" + returnCode, "", "", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {

	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_type")) {
			String keyValue = arg.substring(15);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.setContextType(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1));
				}

			}

		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--monitoring") && arg.contains("=")) {// for trunjob call
			final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
	}

	private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" }, { "\\'", "\'" }, { "\\r", "\r" },
			{ "\\f", "\f" }, { "\\b", "\b" }, { "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the
			// result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 253812 characters generated by Talend Open Studio for Data Integration on the
 * March 20, 2022 11:56:37 PM WET
 ************************************************************************************************/